// Load the JSON data
d3.json("data_normalized.json")
  .then((data) => {
    console.log("Data loaded:", data);

    // Constants for the plot dimensions and margins
    const width = 800;
    const height = 800;
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const plotRadius =
      Math.min(width, height) / 2 - Math.max(margin.top, margin.bottom);

    const svgContainer = d3.select("#chart-container");

    // Determine the dimension of the data
    const dataDimension = data[0].data_dimension;
    const maxValues = Array(dataDimension).fill(0);

    // Calculate the maximum values across all dimensions for normalization
    data.slice(1).forEach((cluster) => {
      cluster.beads.forEach((bead) => {
        bead.data_points.forEach((dataPoint) => {
          dataPoint.coordinates.forEach((coord, idx) => {
            maxValues[idx] = Math.max(maxValues[idx], Math.abs(coord));
          });
        });
      });
    });

    // Create a scale for the radius
    const rScale = d3
      .scaleLinear()
      .range([0, plotRadius])
      .domain([0, Math.max(...maxValues)]);

    function createRadarChart(clusterData) {
      const mainSvg = svgContainer
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .attr("class", "chart")
        .append("g")
        .attr("transform", `translate(${width / 2},${height / 2})`);

      console.log("Creating radar chart for cluster:", clusterData);

      // Calculate distances of each bead center from the origin (0, 0)
      const distances = clusterData.beads.map((bead) => {
        const [x, y] = bead.bead_center;
        return Math.sqrt(x * x + y * y);
      });

      // Sort distances and use them for concentric circles
      const sortedDistances = distances.sort((a, b) => a - b);

      // Plot concentric circles based on distances for this specific cluster
      sortedDistances.forEach((distance) => {
        mainSvg
          .append("circle")
          .attr("cx", 0)
          .attr("cy", 0)
          .attr("r", rScale(distance))
          .attr("class", "grid")
          .style("fill", "none")
          .style("stroke", "#ddd")
          .style("stroke-opacity", 0.7);
      });

      // Plot the beads and their data points for this cluster
      clusterData.beads.forEach((bead, beadIndex) => {
        const { bead_center, data_points } = bead;
        const beadColor = d3.schemeCategory10[beadIndex % 10];

        // Plot the bead center
        mainSvg
          .append("circle")
          .attr("cx", rScale(bead_center[0]))
          .attr("cy", rScale(bead_center[1]))
          .attr("r", 6)
          .attr("class", "bead-center")
          .style("fill", beadColor)
          .style("stroke", beadColor)
          .style("stroke-width", 2);

        // Plot data points within the bead
        data_points.forEach((dataPoint) => {
          const [x, y] = dataPoint.coordinates;
          const pointCoordinates = [rScale(x), rScale(y)];

          mainSvg
            .append("circle")
            .attr("cx", pointCoordinates[0])
            .attr("cy", pointCoordinates[1])
            .attr("r", 4)
            .attr("class", "data-point")
            .style("fill", beadColor)
            .style("opacity", 0.8)
            .on("mouseover", function () {
              d3.select(this)
                .transition()
                .duration(100)
                .attr("r", 6)
                .style("opacity", 1);
            })
            .on("mouseout", function () {
              d3.select(this)
                .transition()
                .duration(100)
                .attr("r", 4)
                .style("opacity", 0.8);
            });
        });

        // Add hover interaction to show data points in a new plot with fan animation
        mainSvg
          .selectAll(".bead-center")
          .filter((_, i) => i === beadIndex)
          .on("mouseover", function () {
            // Remove any existing fan plot
            d3.selectAll(".fan-plot").remove();

            // Create a new SVG for the fan plot
            const fanPlotSvg = svgContainer
              .append("svg")
              .attr("width", width)
              .attr("height", height)
              .attr("class", "fan-plot")
              .append("g")
              .attr("transform", `translate(${width / 2},${height / 2})`);

            // Add a semi-transparent background to the fan plot
            fanPlotSvg
              .append("rect")
              .attr("x", -width / 2)
              .attr("y", -height / 2)
              .attr("width", width)
              .attr("height", height)
              .style("fill", "white")
              .style("fill-opacity", 0.7);

            // Add concentric circles to the fan plot
            const numCircles = 5;
            const gridStep = plotRadius / numCircles;
            for (let i = 1; i <= numCircles; i++) {
              fanPlotSvg
                .append("circle")
                .attr("cx", 0)
                .attr("cy", 0)
                .attr("r", gridStep * i)
                .style("fill", "none")
                .style("stroke", "black")
                .style("stroke-opacity", 0.3);
            }

            // Add fan plot data points
            data_points.forEach((dataPoint) => {
              const [x, y] = dataPoint.coordinates;
              const pointCoordinates = [rScale(x), rScale(y)];

              fanPlotSvg
                .append("circle")
                .attr("cx", pointCoordinates[0])
                .attr("cy", pointCoordinates[1])
                .attr("r", 4)
                .attr("class", "fan-data-point")
                .style("fill", beadColor)
                .style("opacity", 0.9);
            });
          })
          .on("mouseout", function () {
            d3.selectAll(".fan-plot").remove();
          });
      });
    }

    // Create radar charts for each cluster
    data.slice(1).forEach((cluster) => {
      createRadarChart(cluster);
    });
  })
  .catch((error) => {
    console.error("Error loading the data:", error);
  });
