{"ast":null,"code":"// // // // import React, { useEffect, useRef, useState } from \"react\";\n// // // // import * as d3 from \"d3\";\n\n// // // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // // //   const graphRef = useRef(null);\n// // // //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// // // //   useEffect(() => {\n// // // //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// // // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // // //       return;\n// // // //     }\n\n// // // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // // //       console.error(\"Invalid labelsData:\", labelsData);\n// // // //       return;\n// // // //     }\n\n// // // //     const svg = d3.select(graphRef.current);\n// // // //     svg.selectAll(\"*\").remove();\n\n// // // //     const width = 800;\n// // // //     const height = 800;\n// // // //     const margin = 20;\n// // // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // // //     const g = svg\n// // // //       .attr(\"width\", width)\n// // // //       .attr(\"height\", height)\n// // // //       .append(\"g\")\n// // // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // // //     const tooltip = d3\n// // // //       .select(\"body\")\n// // // //       .append(\"div\")\n// // // //       .attr(\"class\", \"tooltip\")\n// // // //       .style(\"position\", \"absolute\")\n// // // //       .style(\"visibility\", \"hidden\")\n// // // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // // //       .style(\"color\", \"white\")\n// // // //       .style(\"padding\", \"5px\")\n// // // //       .style(\"border-radius\", \"4px\")\n// // // //       .style(\"font-size\", \"12px\");\n\n// // // //     const getLabelColor = (pointId) => {\n// // // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // // //       for (const label of Object.keys(labelsData.labels)) {\n// // // //         const pointList = labelsData.labels[label];\n// // // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // // //           return colorScale(label);\n// // // //         }\n// // // //       }\n// // // //       return \"gray\";\n// // // //     };\n\n// // // //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// // // //     const getRingColor = (index) => {\n// // // //       const totalRings = Object.keys(jsonData).length;\n// // // //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// // // //       return d3.color(colorScaleInd(index));\n// // // //     };\n// // // //     const getSectorColor = (index, sectorIndex) => {\n// // // //       const baseColor = d3.hsl(getRingColor(index));\n// // // //       const isPositive = sectorIndex % 2 === 0;\n// // // //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// // // //     };\n\n// // // //     const subspaces = Object.keys(jsonData);\n// // // //     subspaces.sort((a, b) => a.length - b.length);\n// // // //     const pointsData = subspaces.map((key) => ({\n// // // //       key,\n// // // //       points: jsonData[key] || [],\n// // // //       dimensions: key.length,\n// // // //       subspaceId: key,\n// // // //     }));\n// // // //     console.log(\"Points data:\", pointsData.dimensions);\n// // // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// // // //     const pointPositions = {};\n\n// // // //     const renderNormalView = () => {\n// // // //       subspaces.forEach((key, index) => {\n// // // //         if (!ringVisibility[key]) return;\n// // // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // // //         const sectors = 2 ** (index + 1);\n// // // //         const rotationOffset = Math.PI / 2;\n\n// // // //         for (let i = 0; i < sectors; i++) {\n// // // //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // // //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // // //           g.append(\"path\")\n// // // //             .attr(\"d\", d3.arc()\n// // // //               .innerRadius(innerRadius)\n// // // //               .outerRadius(outerRadius)\n// // // //               .startAngle(startAngle)\n// // // //               .endAngle(endAngle)\n// // // //             )\n// // // //             .attr(\"fill\", getSectorColor(index, i))\n// // // //             .attr(\"fill-opacity\", 0.3)\n// // // //             .attr(\"stroke\", \"black\")\n// // // //             .attr(\"stroke-width\", 0.5)\n// // // //             .style(\"cursor\", \"pointer\");\n\n// // // //           g.append(\"text\")\n// // // //             .attr(\"x\", 0)\n// // // //             .attr(\"y\", -outerRadius - 5)\n// // // //             .attr(\"text-anchor\", \"middle\")\n// // // //             .attr(\"font-size\", \"16px\")\n// // // //             .attr(\"fill\", \"red\")\n// // // //             .attr(\"font-weight\", \"bold\")\n// // // //             .text(ringLabels[index]);\n// // // //         }\n// // // //         renderPoints(index, innerRadius, outerRadius, sectors);\n// // // //       });\n// // // //     };\n\n// // // //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// // // //       const isProportional = viewMode === \"proportional\";\n// // // //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// // // //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// // // //       let currentAngle = Math.PI / 2;\n// // // //       pointsData[index].points.forEach((point, i) => {\n// // // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// // // //         const startAngle = isProportional ?\n// // // //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// // // //           (2 * Math.PI * bitVectorIndex) / sectors;\n// // // //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// // // //         const centerAngle = startAngle + angleWidth / 2;\n\n// // // //         const minRadius = innerRadius;\n// // // //         const maxRadius = outerRadius;\n// // // //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// // // //         const totalPoints = pointsData[index].points.length;\n// // // //         const clusterFactor = 0.9;\n// // // //         const overlapRadius =\n// // // //           innerRadius +\n// // // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // // //           totalPoints;\n// // // //         const x = overlapRadius * Math.cos(centerAngle);\n// // // //         const y = overlapRadius * Math.sin(centerAngle);\n\n// // // //         point.Point_ID.forEach((id) => {\n// // // //           if (!pointPositions[id]) {\n// // // //             pointPositions[id] = [];\n// // // //           }\n// // // //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// // // //         });\n\n// // // //         g.append(\"circle\")\n// // // //           .attr(\"cx\", x)\n// // // //           .attr(\"cy\", y)\n// // // //           .attr(\"r\", 3)\n// // // //           .attr(\"fill\", \"black\")\n// // // //           .attr(\"stroke\", \"white\")\n// // // //           .attr(\"stroke-width\", 0.5)\n// // // //           .style(\"pointer-events\", \"visible\")\n// // // //           .on(\"mouseover\", (event) => {\n// // // //             const pointIds = point.Point_ID.join(\", \");\n// // // //             let associatedLabels = [];\n// // // //             if (labelsData && labelsData.labels) {\n// // // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // // //                   associatedLabels.push(label);\n// // // //                 }\n// // // //               });\n// // // //             }\n// // // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // // //             tooltip\n// // // //               .style(\"visibility\", \"visible\")\n// // // //               .html(\n// // // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// // // //               );\n// // // //             setHoveredCoordinates({ ...point, label: labelText });\n// // // //           })\n// // // //           .on(\"mousemove\", (event) => {\n// // // //             tooltip\n// // // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // // //           })\n// // // //           .on(\"mouseout\", () => {\n// // // //             tooltip.style(\"visibility\", \"hidden\");\n// // // //             setHoveredCoordinates(null);\n// // // //           });\n// // // //       });\n// // // //     };\n\n// // // //     if (viewMode === \"normal\") {\n// // // //       renderNormalView();\n// // // //     } \n// // // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // // //       if (positions.length > 1) {\n// // // //         for (let i = 0; i < positions.length - 1; i++) {\n// // // //           const line = g.append(\"line\")\n// // // //             .attr(\"x1\", positions[i].x)\n// // // //             .attr(\"y1\", positions[i].y)\n// // // //             .attr(\"x2\", positions[i + 1].x)\n// // // //             .attr(\"y2\", positions[i + 1].y)\n// // // //             .attr(\"stroke\", getLabelColor(pointId))\n// // // //             .attr(\"stroke-width\", 1.5)\n// // // //             .attr(\"stroke-opacity\", 0.9)\n// // // //             .style(\"cursor\", \"pointer\")\n// // // //             .on(\"mouseover\", (event) => {\n// // // //               tooltip\n// // // //                 .style(\"visibility\", \"visible\")\n// // // //                 .html(`Connection: Point_ID ${pointId}`);\n// // // //             })\n// // // //             .on(\"mousemove\", (event) => {\n// // // //               tooltip\n// // // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // // //             })\n// // // //             .on(\"mouseout\", () => {\n// // // //               tooltip.style(\"visibility\", \"hidden\");\n// // // //             });\n// // // //         }\n// // // //       }\n// // // //     });\n\n// // // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // // //       g.attr(\"transform\", event.transform);\n// // // //     });\n// // // //     svg.call(zoom);\n\n// // // //     return () => {\n// // // //       tooltip.remove();\n// // // //     };\n// // // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// // // //   return (\n// // // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // // //       <div style={{ marginBottom: \"10px\" }}>\n// // // //         <button\n// // // //           onClick={() => setViewMode(\"normal\")}\n// // // //           style={{\n// // // //             marginRight: \"10px\",\n// // // //             padding: \"5px 10px\",\n// // // //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // // //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// // // //           }}\n// // // //         >\n// // // //           Normal View\n// // // //         </button>\n// // // //         <button\n// // // //           onClick={() => setViewMode(\"proportional\")}\n// // // //           style={{\n// // // //             padding: \"5px 10px\",\n// // // //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // // //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// // // //           }}\n// // // //         >\n// // // //           Proportional View\n// // // //         </button>\n// // // //       </div>\n// // // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default HierarchicalGraph;\n\n// // // import React, { useEffect, useRef, useState } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n// // //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// // //     const getRingColor = (index) => {\n// // //       const totalRings = Object.keys(jsonData).length;\n// // //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// // //       return d3.color(colorScaleInd(index));\n// // //     };\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       const baseColor = d3.hsl(getRingColor(index));\n// // //       const isPositive = sectorIndex % 2 === 0;\n// // //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key] || [],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n// // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// // //     const pointPositions = {};\n\n// // //     const calculateProportionalAngles = (index) => {\n// // //       const sectors = 2 ** (index + 1);\n// // //       const points = pointsData[index].points;\n// // //       const sectorCounts = Array(sectors).fill(0);\n// // //       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n// // //       points.forEach(point => {\n// // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n// // //         sectorCounts[bitVectorIndex]++;\n// // //       });\n\n// // //       const totalPoints = points.length || 1; // Avoid division by zero\n// // //       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n// // //       return sectorCounts.map(count => {\n// // //         if (count === 0) return minAngle;\n// // //         return (count / totalPoints) * remainingAngle;\n// // //       });\n// // //     };\n\n// // //     const renderNormalView = () => {\n// // //       subspaces.forEach((key, index) => {\n// // //         if (!ringVisibility[key]) return;\n// // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //         const sectors = 2 ** (index + 1);\n// // //         const rotationOffset = Math.PI / 2;\n\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // //           g.append(\"path\")\n// // //             .attr(\"d\", d3.arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle(startAngle)\n// // //               .endAngle(endAngle)\n// // //             )\n// // //             .attr(\"fill\", getSectorColor(index, i))\n// // //             .attr(\"fill-opacity\", 0.3)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .style(\"cursor\", \"pointer\");\n// // //         }\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"16px\")\n// // //           .attr(\"fill\", \"red\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //           .text(ringLabels[index]);\n\n// // //         renderPoints(index, innerRadius, outerRadius, sectors);\n// // //       });\n// // //     };\n\n// // //     const renderProportionalView = () => {\n// // //       subspaces.forEach((key, index) => {\n// // //         if (!ringVisibility[key]) return;\n// // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //         const rotationOffset = Math.PI / 2;\n\n// // //         const proportionalAngles = calculateProportionalAngles(index);\n\n// // //         let currentAngle = rotationOffset;\n// // //         proportionalAngles.forEach((angle, i) => {\n// // //           const startAngle = currentAngle;\n// // //           const endAngle = currentAngle + angle;\n\n// // //           g.append(\"path\")\n// // //             .attr(\"d\", d3.arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle(startAngle)\n// // //               .endAngle(endAngle)\n// // //             )\n// // //             .attr(\"fill\", getSectorColor(index, i))\n// // //             .attr(\"fill-opacity\", 0.3)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .style(\"cursor\", \"pointer\");\n\n// // //           currentAngle = endAngle;\n// // //         });\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"16px\")\n// // //           .attr(\"fill\", \"red\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //           .text(ringLabels[index]);\n\n// // //         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n// // //       });\n// // //     };\n\n// // //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// // //       const isProportional = viewMode === \"proportional\";\n// // //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// // //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n// // //       const rotationOffset = Math.PI / 2;\n\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// // //         let startAngle = rotationOffset;\n// // //         if (isProportional) {\n// // //           for (let j = 0; j < bitVectorIndex; j++) {\n// // //             startAngle += angles[j];\n// // //           }\n// // //         } else {\n// // //           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         }\n\n// // //         const angleWidth = angles[bitVectorIndex];\n// // //         const centerAngle = startAngle + angleWidth / 2;\n\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.9;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// // //               );\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     };\n\n// // //     if (viewMode === \"normal\") {\n// // //       renderNormalView();\n// // //     } else if (viewMode === \"proportional\") {\n// // //       renderProportionalView();\n// // //     }\n\n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           const line = g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 1.5)\n// // //             .attr(\"stroke-opacity\", 0.9)\n// // //             .style(\"cursor\", \"pointer\")\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n// // //     svg.call(zoom);\n\n// // //     return () => {\n// // //       tooltip.remove();\n// // //     };\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <div style={{ marginBottom: \"10px\" }}>\n// // //         <button\n// // //           onClick={() => setViewMode(\"normal\")}\n// // //           style={{\n// // //             marginRight: \"10px\",\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Normal View\n// // //         </button>\n// // //         <button\n// // //           onClick={() => setViewMode(\"proportional\")}\n// // //           style={{\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Proportional View\n// // //         </button>\n// // //       </div>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length || 1, // Ensure dimensions is at least 1\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = (index) => {\n//       if (index < 0 || index >= pointsData.length) {\n//         console.error(\"Invalid index:\", index);\n//         return Array(2).fill(Math.PI); // Return a safe default\n//       }\n\n//       const currentSubspace = pointsData[index];\n//       const dimensions = Math.max(1, currentSubspace.dimensions);\n\n//       // Calculate sectors based on dimensions, with a safe upper limit\n//       const maxSafeDimensions = 10; // Limit to prevent excessive sectors\n//       const safeDimensions = Math.min(dimensions, maxSafeDimensions);\n//       const sectors = Math.pow(2, safeDimensions);\n\n//       // Ensure sectors is a safe number\n//       if (!Number.isFinite(sectors) || sectors <= 0 || sectors > 1024) {\n//         console.error(\"Invalid sectors calculation:\", { index, dimensions, sectors });\n//         return Array(2).fill(Math.PI); // Return a safe default\n//       }\n\n//       // Initialize angles array with the correct size\n//       const sectorAngles = Array(sectors).fill(0);\n\n//       if (index === pointsData.length - 1) { // Outermost ring\n//         const sectorCounts = Array(sectors).fill(0);\n//         const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n//         // Count points in each sector\n//         if (Array.isArray(currentSubspace.points)) {\n//           currentSubspace.points.forEach(point => {\n//             const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n//             // Ensure we don't exceed the number of dimensions we can handle\n//             const limitedPointData = pointData.slice(0, safeDimensions);\n\n//             // Create bit vector based on coordinates\n//             const bitVector = limitedPointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n\n//             // Parse bit vector to get sector index with safe fallback\n//             let bitVectorIndex;\n//             try {\n//               bitVectorIndex = parseInt(bitVector, 2);\n//               if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n//             } catch (e) {\n//               bitVectorIndex = 0;\n//             }\n\n//             // Ensure index is within bounds\n//             bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n//             sectorCounts[bitVectorIndex]++;\n//           });\n//         }\n\n//         const totalPoints = currentSubspace.points.length || 1;\n//         const emptyCount = sectorCounts.filter(count => count === 0).length;\n//         const remainingAngle = 2 * Math.PI - (minAngle * emptyCount);\n//         const pointTotal = sectorCounts.reduce((sum, count) => sum + count, 0);\n\n//         // Calculate proportional angles\n//         for (let i = 0; i < sectors; i++) {\n//           if (sectorCounts[i] === 0) {\n//             sectorAngles[i] = minAngle;\n//           } else {\n//             sectorAngles[i] = (sectorCounts[i] / (pointTotal || 1)) * remainingAngle;\n//           }\n//         }\n\n//         return sectorAngles;\n//       } else { // Inner rings\n//         // Get angles from next ring\n//         let nextRingAngles = [];\n//         try {\n//           nextRingAngles = calculateProportionalAngles(index + 1);\n//         } catch (e) {\n//           console.error(\"Error calculating next ring angles:\", e);\n//           return Array(sectors).fill(2 * Math.PI / sectors); // Safe fallback\n//         }\n\n//         // If next ring doesn't have valid angles, use equal distribution\n//         if (!nextRingAngles || nextRingAngles.length === 0) {\n//           return Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // Create angles for this ring by combining pairs from next ring\n//         for (let i = 0; i < sectors; i++) {\n//           const childIndex1 = i * 2;\n//           const childIndex2 = i * 2 + 1;\n\n//           // Safely get angles from next ring\n//           const angle1 = childIndex1 < nextRingAngles.length ? nextRingAngles[childIndex1] : 0;\n//           const angle2 = childIndex2 < nextRingAngles.length ? nextRingAngles[childIndex2] : 0;\n\n//           sectorAngles[i] = angle1 + angle2;\n//         }\n\n//         return sectorAngles;\n//       }\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = Math.pow(2, index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       for (let index = subspaces.length - 1; index >= 0; index--) {\n//         if (!ringVisibility[pointsData[index].key]) continue;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const rotationOffset = Math.PI / 2;\n\n//         let proportionalAngles;\n//         try {\n//           proportionalAngles = calculateProportionalAngles(index);\n//         } catch (e) {\n//           console.error(\"Error calculating proportional angles:\", e);\n//           // Fallback to equal distribution\n//           const safeSectors = Math.pow(2, Math.min(index + 1, 8));\n//           proportionalAngles = Array(safeSectors).fill(2 * Math.PI / safeSectors);\n//         }\n\n//         // Validate proportionalAngles\n//         if (!Array.isArray(proportionalAngles) || proportionalAngles.length === 0) {\n//           console.error(\"Invalid angles for index:\", index);\n//           continue;\n//         }\n\n//         let currentAngle = rotationOffset;\n\n//         // Render sectors in the same order as normal view\n//         for (let i = 0; i < proportionalAngles.length; i++) {\n//           const angle = proportionalAngles[i];\n\n//           // Ensure angle is a valid number\n//           if (typeof angle !== 'number' || !isFinite(angle)) {\n//             console.error(\"Invalid angle:\", angle);\n//             continue;\n//           }\n\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n//       }\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const points = pointsData[index].points;\n\n//       if (!Array.isArray(points) || points.length === 0) {\n//         return; // No points to render\n//       }\n\n//       // Ensure we have valid angles or sectors\n//       let sectors, angles;\n//       if (isProportional) {\n//         if (!Array.isArray(anglesOrSectors) || anglesOrSectors.length === 0) {\n//           console.error(\"Invalid angles for point rendering:\", anglesOrSectors);\n//           return;\n//         }\n//         sectors = anglesOrSectors.length;\n//         angles = anglesOrSectors;\n//       } else {\n//         if (!Number.isFinite(anglesOrSectors) || anglesOrSectors <= 0) {\n//           console.error(\"Invalid sectors for point rendering:\", anglesOrSectors);\n//           return;\n//         }\n//         sectors = anglesOrSectors;\n//         angles = Array(sectors).fill(2 * Math.PI / sectors);\n//       }\n\n//       const rotationOffset = Math.PI / 2;\n//       const dimensions = Math.min(pointsData[index].dimensions, 10); // Limit dimensions\n\n//       points.forEach((point, i) => {\n//         if (!point || typeof point !== 'object') {\n//           console.error(\"Invalid point:\", point);\n//           return;\n//         }\n\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n//         // Ensure we don't exceed the number of dimensions we can handle\n//         const limitedPointData = pointData.slice(0, dimensions);\n\n//         // Create bit vector based on coordinates\n//         const bitVector = limitedPointData.map(([_, coord]) => {\n//           const num = parseFloat(coord);\n//           return isNaN(num) ? 0 : (num >= 0 ? 1 : 0);\n//         }).join(\"\");\n\n//         // Parse bit vector to get sector index with safe fallback\n//         let bitVectorIndex;\n//         try {\n//           bitVectorIndex = parseInt(bitVector, 2);\n//           if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n//         } catch (e) {\n//           bitVectorIndex = 0;\n//         }\n\n//         // Ensure index is within bounds\n//         bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n\n//         let startAngle = rotationOffset;\n//         if (isProportional) {\n//           for (let j = 0; j < bitVectorIndex; j++) {\n//             if (j < angles.length) {\n//               startAngle += angles[j] || 0;\n//             }\n//           }\n//         } else {\n//           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n//         }\n\n//         const angleWidth = bitVectorIndex < angles.length ? angles[bitVectorIndex] : 2 * Math.PI / sectors;\n//         const centerAngle = startAngle + angleWidth / 2;\n//         const totalPoints = points.length || 1;\n//         const clusterFactor = 0.9;\n//         const overlapRadius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         // Ensure Point_ID is an array\n//         const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID : [point.Point_ID];\n\n//         pointIds.forEach((id) => {\n//           if (!id) return;\n//           if (!pointPositions[id]) pointPositions[id] = [];\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID.join(\", \") : point.Point_ID;\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (Array.isArray(point.Point_ID) && Array.isArray(pointList) &&\n//                   point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;","map":{"version":3,"names":[],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // // // import React, { useEffect, useRef, useState } from \"react\";\n// // // // import * as d3 from \"d3\";\n\n// // // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // // //   const graphRef = useRef(null);\n// // // //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// // // //   useEffect(() => {\n// // // //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// // // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // // //       return;\n// // // //     }\n\n// // // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // // //       console.error(\"Invalid labelsData:\", labelsData);\n// // // //       return;\n// // // //     }\n\n// // // //     const svg = d3.select(graphRef.current);\n// // // //     svg.selectAll(\"*\").remove();\n\n// // // //     const width = 800;\n// // // //     const height = 800;\n// // // //     const margin = 20;\n// // // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // // //     const g = svg\n// // // //       .attr(\"width\", width)\n// // // //       .attr(\"height\", height)\n// // // //       .append(\"g\")\n// // // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // // //     const tooltip = d3\n// // // //       .select(\"body\")\n// // // //       .append(\"div\")\n// // // //       .attr(\"class\", \"tooltip\")\n// // // //       .style(\"position\", \"absolute\")\n// // // //       .style(\"visibility\", \"hidden\")\n// // // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // // //       .style(\"color\", \"white\")\n// // // //       .style(\"padding\", \"5px\")\n// // // //       .style(\"border-radius\", \"4px\")\n// // // //       .style(\"font-size\", \"12px\");\n\n// // // //     const getLabelColor = (pointId) => {\n// // // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // // //       for (const label of Object.keys(labelsData.labels)) {\n// // // //         const pointList = labelsData.labels[label];\n// // // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // // //           return colorScale(label);\n// // // //         }\n// // // //       }\n// // // //       return \"gray\";\n// // // //     };\n\n// // // //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// // // //     const getRingColor = (index) => {\n// // // //       const totalRings = Object.keys(jsonData).length;\n// // // //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// // // //       return d3.color(colorScaleInd(index));\n// // // //     };\n// // // //     const getSectorColor = (index, sectorIndex) => {\n// // // //       const baseColor = d3.hsl(getRingColor(index));\n// // // //       const isPositive = sectorIndex % 2 === 0;\n// // // //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// // // //     };\n\n// // // //     const subspaces = Object.keys(jsonData);\n// // // //     subspaces.sort((a, b) => a.length - b.length);\n// // // //     const pointsData = subspaces.map((key) => ({\n// // // //       key,\n// // // //       points: jsonData[key] || [],\n// // // //       dimensions: key.length,\n// // // //       subspaceId: key,\n// // // //     }));\n// // // //     console.log(\"Points data:\", pointsData.dimensions);\n// // // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// // // //     const pointPositions = {};\n\n// // // //     const renderNormalView = () => {\n// // // //       subspaces.forEach((key, index) => {\n// // // //         if (!ringVisibility[key]) return;\n// // // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // // //         const sectors = 2 ** (index + 1);\n// // // //         const rotationOffset = Math.PI / 2;\n\n// // // //         for (let i = 0; i < sectors; i++) {\n// // // //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // // //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // // //           g.append(\"path\")\n// // // //             .attr(\"d\", d3.arc()\n// // // //               .innerRadius(innerRadius)\n// // // //               .outerRadius(outerRadius)\n// // // //               .startAngle(startAngle)\n// // // //               .endAngle(endAngle)\n// // // //             )\n// // // //             .attr(\"fill\", getSectorColor(index, i))\n// // // //             .attr(\"fill-opacity\", 0.3)\n// // // //             .attr(\"stroke\", \"black\")\n// // // //             .attr(\"stroke-width\", 0.5)\n// // // //             .style(\"cursor\", \"pointer\");\n\n// // // //           g.append(\"text\")\n// // // //             .attr(\"x\", 0)\n// // // //             .attr(\"y\", -outerRadius - 5)\n// // // //             .attr(\"text-anchor\", \"middle\")\n// // // //             .attr(\"font-size\", \"16px\")\n// // // //             .attr(\"fill\", \"red\")\n// // // //             .attr(\"font-weight\", \"bold\")\n// // // //             .text(ringLabels[index]);\n// // // //         }\n// // // //         renderPoints(index, innerRadius, outerRadius, sectors);\n// // // //       });\n// // // //     };\n\n\n// // // //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// // // //       const isProportional = viewMode === \"proportional\";\n// // // //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// // // //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// // // //       let currentAngle = Math.PI / 2;\n// // // //       pointsData[index].points.forEach((point, i) => {\n// // // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// // // //         const startAngle = isProportional ?\n// // // //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// // // //           (2 * Math.PI * bitVectorIndex) / sectors;\n// // // //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// // // //         const centerAngle = startAngle + angleWidth / 2;\n\n// // // //         const minRadius = innerRadius;\n// // // //         const maxRadius = outerRadius;\n// // // //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// // // //         const totalPoints = pointsData[index].points.length;\n// // // //         const clusterFactor = 0.9;\n// // // //         const overlapRadius =\n// // // //           innerRadius +\n// // // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // // //           totalPoints;\n// // // //         const x = overlapRadius * Math.cos(centerAngle);\n// // // //         const y = overlapRadius * Math.sin(centerAngle);\n\n// // // //         point.Point_ID.forEach((id) => {\n// // // //           if (!pointPositions[id]) {\n// // // //             pointPositions[id] = [];\n// // // //           }\n// // // //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// // // //         });\n\n// // // //         g.append(\"circle\")\n// // // //           .attr(\"cx\", x)\n// // // //           .attr(\"cy\", y)\n// // // //           .attr(\"r\", 3)\n// // // //           .attr(\"fill\", \"black\")\n// // // //           .attr(\"stroke\", \"white\")\n// // // //           .attr(\"stroke-width\", 0.5)\n// // // //           .style(\"pointer-events\", \"visible\")\n// // // //           .on(\"mouseover\", (event) => {\n// // // //             const pointIds = point.Point_ID.join(\", \");\n// // // //             let associatedLabels = [];\n// // // //             if (labelsData && labelsData.labels) {\n// // // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // // //                   associatedLabels.push(label);\n// // // //                 }\n// // // //               });\n// // // //             }\n// // // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // // //             tooltip\n// // // //               .style(\"visibility\", \"visible\")\n// // // //               .html(\n// // // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// // // //               );\n// // // //             setHoveredCoordinates({ ...point, label: labelText });\n// // // //           })\n// // // //           .on(\"mousemove\", (event) => {\n// // // //             tooltip\n// // // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // // //           })\n// // // //           .on(\"mouseout\", () => {\n// // // //             tooltip.style(\"visibility\", \"hidden\");\n// // // //             setHoveredCoordinates(null);\n// // // //           });\n// // // //       });\n// // // //     };\n\n// // // //     if (viewMode === \"normal\") {\n// // // //       renderNormalView();\n// // // //     } \n// // // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // // //       if (positions.length > 1) {\n// // // //         for (let i = 0; i < positions.length - 1; i++) {\n// // // //           const line = g.append(\"line\")\n// // // //             .attr(\"x1\", positions[i].x)\n// // // //             .attr(\"y1\", positions[i].y)\n// // // //             .attr(\"x2\", positions[i + 1].x)\n// // // //             .attr(\"y2\", positions[i + 1].y)\n// // // //             .attr(\"stroke\", getLabelColor(pointId))\n// // // //             .attr(\"stroke-width\", 1.5)\n// // // //             .attr(\"stroke-opacity\", 0.9)\n// // // //             .style(\"cursor\", \"pointer\")\n// // // //             .on(\"mouseover\", (event) => {\n// // // //               tooltip\n// // // //                 .style(\"visibility\", \"visible\")\n// // // //                 .html(`Connection: Point_ID ${pointId}`);\n// // // //             })\n// // // //             .on(\"mousemove\", (event) => {\n// // // //               tooltip\n// // // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // // //             })\n// // // //             .on(\"mouseout\", () => {\n// // // //               tooltip.style(\"visibility\", \"hidden\");\n// // // //             });\n// // // //         }\n// // // //       }\n// // // //     });\n\n// // // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // // //       g.attr(\"transform\", event.transform);\n// // // //     });\n// // // //     svg.call(zoom);\n\n// // // //     return () => {\n// // // //       tooltip.remove();\n// // // //     };\n// // // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// // // //   return (\n// // // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // // //       <div style={{ marginBottom: \"10px\" }}>\n// // // //         <button\n// // // //           onClick={() => setViewMode(\"normal\")}\n// // // //           style={{\n// // // //             marginRight: \"10px\",\n// // // //             padding: \"5px 10px\",\n// // // //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // // //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// // // //           }}\n// // // //         >\n// // // //           Normal View\n// // // //         </button>\n// // // //         <button\n// // // //           onClick={() => setViewMode(\"proportional\")}\n// // // //           style={{\n// // // //             padding: \"5px 10px\",\n// // // //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // // //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// // // //           }}\n// // // //         >\n// // // //           Proportional View\n// // // //         </button>\n// // // //       </div>\n// // // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default HierarchicalGraph;\n\n\n// // // import React, { useEffect, useRef, useState } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n// // //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// // //     const getRingColor = (index) => {\n// // //       const totalRings = Object.keys(jsonData).length;\n// // //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// // //       return d3.color(colorScaleInd(index));\n// // //     };\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       const baseColor = d3.hsl(getRingColor(index));\n// // //       const isPositive = sectorIndex % 2 === 0;\n// // //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key] || [],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n// // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// // //     const pointPositions = {};\n\n// // //     const calculateProportionalAngles = (index) => {\n// // //       const sectors = 2 ** (index + 1);\n// // //       const points = pointsData[index].points;\n// // //       const sectorCounts = Array(sectors).fill(0);\n// // //       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n// // //       points.forEach(point => {\n// // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n// // //         sectorCounts[bitVectorIndex]++;\n// // //       });\n\n// // //       const totalPoints = points.length || 1; // Avoid division by zero\n// // //       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n// // //       return sectorCounts.map(count => {\n// // //         if (count === 0) return minAngle;\n// // //         return (count / totalPoints) * remainingAngle;\n// // //       });\n// // //     };\n\n// // //     const renderNormalView = () => {\n// // //       subspaces.forEach((key, index) => {\n// // //         if (!ringVisibility[key]) return;\n// // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //         const sectors = 2 ** (index + 1);\n// // //         const rotationOffset = Math.PI / 2;\n\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // //           g.append(\"path\")\n// // //             .attr(\"d\", d3.arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle(startAngle)\n// // //               .endAngle(endAngle)\n// // //             )\n// // //             .attr(\"fill\", getSectorColor(index, i))\n// // //             .attr(\"fill-opacity\", 0.3)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .style(\"cursor\", \"pointer\");\n// // //         }\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"16px\")\n// // //           .attr(\"fill\", \"red\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //           .text(ringLabels[index]);\n\n// // //         renderPoints(index, innerRadius, outerRadius, sectors);\n// // //       });\n// // //     };\n\n// // //     const renderProportionalView = () => {\n// // //       subspaces.forEach((key, index) => {\n// // //         if (!ringVisibility[key]) return;\n// // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //         const rotationOffset = Math.PI / 2;\n\n// // //         const proportionalAngles = calculateProportionalAngles(index);\n\n// // //         let currentAngle = rotationOffset;\n// // //         proportionalAngles.forEach((angle, i) => {\n// // //           const startAngle = currentAngle;\n// // //           const endAngle = currentAngle + angle;\n\n// // //           g.append(\"path\")\n// // //             .attr(\"d\", d3.arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle(startAngle)\n// // //               .endAngle(endAngle)\n// // //             )\n// // //             .attr(\"fill\", getSectorColor(index, i))\n// // //             .attr(\"fill-opacity\", 0.3)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .style(\"cursor\", \"pointer\");\n\n// // //           currentAngle = endAngle;\n// // //         });\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"16px\")\n// // //           .attr(\"fill\", \"red\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //           .text(ringLabels[index]);\n\n// // //         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n// // //       });\n// // //     };\n\n// // //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// // //       const isProportional = viewMode === \"proportional\";\n// // //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// // //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n// // //       const rotationOffset = Math.PI / 2;\n\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// // //         let startAngle = rotationOffset;\n// // //         if (isProportional) {\n// // //           for (let j = 0; j < bitVectorIndex; j++) {\n// // //             startAngle += angles[j];\n// // //           }\n// // //         } else {\n// // //           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         }\n\n// // //         const angleWidth = angles[bitVectorIndex];\n// // //         const centerAngle = startAngle + angleWidth / 2;\n\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.9;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// // //               );\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     };\n\n// // //     if (viewMode === \"normal\") {\n// // //       renderNormalView();\n// // //     } else if (viewMode === \"proportional\") {\n// // //       renderProportionalView();\n// // //     }\n\n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           const line = g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 1.5)\n// // //             .attr(\"stroke-opacity\", 0.9)\n// // //             .style(\"cursor\", \"pointer\")\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n// // //     svg.call(zoom);\n\n// // //     return () => {\n// // //       tooltip.remove();\n// // //     };\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <div style={{ marginBottom: \"10px\" }}>\n// // //         <button\n// // //           onClick={() => setViewMode(\"normal\")}\n// // //           style={{\n// // //             marginRight: \"10px\",\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Normal View\n// // //         </button>\n// // //         <button\n// // //           onClick={() => setViewMode(\"proportional\")}\n// // //           style={{\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Proportional View\n// // //         </button>\n// // //       </div>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length || 1, // Ensure dimensions is at least 1\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = (index) => {\n//       if (index < 0 || index >= pointsData.length) {\n//         console.error(\"Invalid index:\", index);\n//         return Array(2).fill(Math.PI); // Return a safe default\n//       }\n\n//       const currentSubspace = pointsData[index];\n//       const dimensions = Math.max(1, currentSubspace.dimensions);\n\n//       // Calculate sectors based on dimensions, with a safe upper limit\n//       const maxSafeDimensions = 10; // Limit to prevent excessive sectors\n//       const safeDimensions = Math.min(dimensions, maxSafeDimensions);\n//       const sectors = Math.pow(2, safeDimensions);\n\n//       // Ensure sectors is a safe number\n//       if (!Number.isFinite(sectors) || sectors <= 0 || sectors > 1024) {\n//         console.error(\"Invalid sectors calculation:\", { index, dimensions, sectors });\n//         return Array(2).fill(Math.PI); // Return a safe default\n//       }\n\n//       // Initialize angles array with the correct size\n//       const sectorAngles = Array(sectors).fill(0);\n\n//       if (index === pointsData.length - 1) { // Outermost ring\n//         const sectorCounts = Array(sectors).fill(0);\n//         const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n//         // Count points in each sector\n//         if (Array.isArray(currentSubspace.points)) {\n//           currentSubspace.points.forEach(point => {\n//             const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n//             // Ensure we don't exceed the number of dimensions we can handle\n//             const limitedPointData = pointData.slice(0, safeDimensions);\n\n//             // Create bit vector based on coordinates\n//             const bitVector = limitedPointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n\n//             // Parse bit vector to get sector index with safe fallback\n//             let bitVectorIndex;\n//             try {\n//               bitVectorIndex = parseInt(bitVector, 2);\n//               if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n//             } catch (e) {\n//               bitVectorIndex = 0;\n//             }\n\n//             // Ensure index is within bounds\n//             bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n//             sectorCounts[bitVectorIndex]++;\n//           });\n//         }\n\n//         const totalPoints = currentSubspace.points.length || 1;\n//         const emptyCount = sectorCounts.filter(count => count === 0).length;\n//         const remainingAngle = 2 * Math.PI - (minAngle * emptyCount);\n//         const pointTotal = sectorCounts.reduce((sum, count) => sum + count, 0);\n\n//         // Calculate proportional angles\n//         for (let i = 0; i < sectors; i++) {\n//           if (sectorCounts[i] === 0) {\n//             sectorAngles[i] = minAngle;\n//           } else {\n//             sectorAngles[i] = (sectorCounts[i] / (pointTotal || 1)) * remainingAngle;\n//           }\n//         }\n\n//         return sectorAngles;\n//       } else { // Inner rings\n//         // Get angles from next ring\n//         let nextRingAngles = [];\n//         try {\n//           nextRingAngles = calculateProportionalAngles(index + 1);\n//         } catch (e) {\n//           console.error(\"Error calculating next ring angles:\", e);\n//           return Array(sectors).fill(2 * Math.PI / sectors); // Safe fallback\n//         }\n\n//         // If next ring doesn't have valid angles, use equal distribution\n//         if (!nextRingAngles || nextRingAngles.length === 0) {\n//           return Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // Create angles for this ring by combining pairs from next ring\n//         for (let i = 0; i < sectors; i++) {\n//           const childIndex1 = i * 2;\n//           const childIndex2 = i * 2 + 1;\n\n//           // Safely get angles from next ring\n//           const angle1 = childIndex1 < nextRingAngles.length ? nextRingAngles[childIndex1] : 0;\n//           const angle2 = childIndex2 < nextRingAngles.length ? nextRingAngles[childIndex2] : 0;\n\n//           sectorAngles[i] = angle1 + angle2;\n//         }\n\n//         return sectorAngles;\n//       }\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = Math.pow(2, index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       for (let index = subspaces.length - 1; index >= 0; index--) {\n//         if (!ringVisibility[pointsData[index].key]) continue;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const rotationOffset = Math.PI / 2;\n\n//         let proportionalAngles;\n//         try {\n//           proportionalAngles = calculateProportionalAngles(index);\n//         } catch (e) {\n//           console.error(\"Error calculating proportional angles:\", e);\n//           // Fallback to equal distribution\n//           const safeSectors = Math.pow(2, Math.min(index + 1, 8));\n//           proportionalAngles = Array(safeSectors).fill(2 * Math.PI / safeSectors);\n//         }\n\n//         // Validate proportionalAngles\n//         if (!Array.isArray(proportionalAngles) || proportionalAngles.length === 0) {\n//           console.error(\"Invalid angles for index:\", index);\n//           continue;\n//         }\n\n//         let currentAngle = rotationOffset;\n\n//         // Render sectors in the same order as normal view\n//         for (let i = 0; i < proportionalAngles.length; i++) {\n//           const angle = proportionalAngles[i];\n\n//           // Ensure angle is a valid number\n//           if (typeof angle !== 'number' || !isFinite(angle)) {\n//             console.error(\"Invalid angle:\", angle);\n//             continue;\n//           }\n\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n//       }\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const points = pointsData[index].points;\n\n//       if (!Array.isArray(points) || points.length === 0) {\n//         return; // No points to render\n//       }\n\n//       // Ensure we have valid angles or sectors\n//       let sectors, angles;\n//       if (isProportional) {\n//         if (!Array.isArray(anglesOrSectors) || anglesOrSectors.length === 0) {\n//           console.error(\"Invalid angles for point rendering:\", anglesOrSectors);\n//           return;\n//         }\n//         sectors = anglesOrSectors.length;\n//         angles = anglesOrSectors;\n//       } else {\n//         if (!Number.isFinite(anglesOrSectors) || anglesOrSectors <= 0) {\n//           console.error(\"Invalid sectors for point rendering:\", anglesOrSectors);\n//           return;\n//         }\n//         sectors = anglesOrSectors;\n//         angles = Array(sectors).fill(2 * Math.PI / sectors);\n//       }\n\n//       const rotationOffset = Math.PI / 2;\n//       const dimensions = Math.min(pointsData[index].dimensions, 10); // Limit dimensions\n\n//       points.forEach((point, i) => {\n//         if (!point || typeof point !== 'object') {\n//           console.error(\"Invalid point:\", point);\n//           return;\n//         }\n\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n//         // Ensure we don't exceed the number of dimensions we can handle\n//         const limitedPointData = pointData.slice(0, dimensions);\n\n//         // Create bit vector based on coordinates\n//         const bitVector = limitedPointData.map(([_, coord]) => {\n//           const num = parseFloat(coord);\n//           return isNaN(num) ? 0 : (num >= 0 ? 1 : 0);\n//         }).join(\"\");\n\n//         // Parse bit vector to get sector index with safe fallback\n//         let bitVectorIndex;\n//         try {\n//           bitVectorIndex = parseInt(bitVector, 2);\n//           if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n//         } catch (e) {\n//           bitVectorIndex = 0;\n//         }\n\n//         // Ensure index is within bounds\n//         bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n\n//         let startAngle = rotationOffset;\n//         if (isProportional) {\n//           for (let j = 0; j < bitVectorIndex; j++) {\n//             if (j < angles.length) {\n//               startAngle += angles[j] || 0;\n//             }\n//           }\n//         } else {\n//           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n//         }\n\n//         const angleWidth = bitVectorIndex < angles.length ? angles[bitVectorIndex] : 2 * Math.PI / sectors;\n//         const centerAngle = startAngle + angleWidth / 2;\n//         const totalPoints = points.length || 1;\n//         const clusterFactor = 0.9;\n//         const overlapRadius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         // Ensure Point_ID is an array\n//         const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID : [point.Point_ID];\n\n//         pointIds.forEach((id) => {\n//           if (!id) return;\n//           if (!pointPositions[id]) pointPositions[id] = [];\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID.join(\", \") : point.Point_ID;\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (Array.isArray(point.Point_ID) && Array.isArray(pointList) &&\n//                   point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}