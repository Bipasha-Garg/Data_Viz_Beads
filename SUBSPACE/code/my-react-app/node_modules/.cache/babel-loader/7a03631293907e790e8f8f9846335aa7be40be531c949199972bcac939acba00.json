{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/GRAPH/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || jsonData.length === 0) return;\n\n    // Dynamically extract coordinate keys (dimensions)\n    const coordinateKeys = Object.keys(jsonData[0]).filter(key => key !== \"Cluster\" && key !== \"Bead\");\n\n    // Helper to calculate centroid\n    const calculateCentroid = points => {\n      const n = points.length;\n      const sum = points.reduce((acc, point) => {\n        coordinateKeys.forEach(key => {\n          acc[key] = (acc[key] || 0) + point[key];\n        });\n        return acc;\n      }, {});\n      // Compute average for each dimension\n      Object.keys(sum).forEach(key => sum[key] /= n);\n      return sum;\n    };\n    // Assign bit vectors based on coordinate keys (planes)\n    const assignBitVector = point => {\n      return coordinateKeys.map(key => point[key] >= 0 ? \"1\" : \"0\").join(\"\");\n    };\n    // Parse and process data\n    const clusters = d3.group(jsonData, d => d.Cluster);\n    const beads = d3.group(jsonData, d => `${d.Cluster}-${d.Bead}`);\n\n    // Root centroid\n    const rootCentroid = calculateCentroid(jsonData);\n\n    // Cluster centroids\n    const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n      cluster,\n      centroid: calculateCentroid(points)\n    }));\n\n    // Bead centroids\n    const beadCentroids = Array.from(beads, ([key, points]) => {\n      const [cluster, bead] = key.split(\"-\");\n      return {\n        cluster,\n        bead,\n        centroid: calculateCentroid(points),\n        points\n      };\n    });\n\n    // Build hierarchical links\n    const links = [];\n    const nodes = [{\n      id: \"root\",\n      ...rootCentroid,\n      bitVector: assignBitVector(rootCentroid)\n    } // Root node\n    ];\n\n    // Add cluster nodes and links\n    clusterCentroids.forEach(({\n      cluster,\n      centroid\n    }) => {\n      nodes.push({\n        id: `cluster-${cluster}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid)\n      });\n      links.push({\n        source: \"root\",\n        target: `cluster-${cluster}`\n      });\n    });\n\n    // Add bead nodes and links\n    beadCentroids.forEach(({\n      cluster,\n      bead,\n      centroid,\n      points\n    }) => {\n      nodes.push({\n        id: `bead-${cluster}-${bead}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid)\n      });\n      links.push({\n        source: `cluster-${cluster}`,\n        target: `bead-${cluster}-${bead}`\n      });\n\n      // Add individual points and links\n      points.forEach((point, index) => {\n        const pointId = `point-${cluster}-${bead}-${index}`;\n        nodes.push({\n          id: pointId,\n          ...point,\n          bitVector: assignBitVector(point)\n        });\n        links.push({\n          source: `bead-${cluster}-${bead}`,\n          target: pointId\n        });\n      });\n    });\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const svg = d3.select(graphRef.current).attr(\"width\", width).attr(\"height\", height).attr(\"viewBox\", `0 0 ${width} ${height}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Force simulation\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).id(d => d.id).distance(-10)).force(\"charge\", d3.forceManyBody().strength(1)).force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"collision\", d3.forceCollide().radius(d => d.id.startsWith(\"point\") ? 10 : 15) // Adjust radii for different node types\n    ).force(\"charge\", d3.forceManyBody().strength(-1)).force(\"center\", d3.forceCenter((width - margin.left - margin.right) / 2, (height - margin.top - margin.bottom) / 2)).on(\"tick\", () => {\n      link.attr(\"x1\", d => clamp(d.source.x, 0, width)).attr(\"y1\", d => clamp(d.source.y, 0, height)).attr(\"x2\", d => clamp(d.target.x, 0, width)).attr(\"y2\", d => clamp(d.target.y, 0, height));\n      node.attr(\"cx\", d => clamp(d.x, 0, width)).attr(\"cy\", d => clamp(d.y, 0, height));\n    });\n\n    // Clamp function to restrict within bounds\n    const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n    // Draw links\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(links).enter().append(\"line\").attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 2);\n\n    // Draw nodes\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 5).attr(\"fill\", d => {\n      if (d.id === \"root\") return \"red\";\n      if (d.id.startsWith(\"cluster\")) return \"blue\";\n      if (d.id.startsWith(\"bead\")) return \"green\";\n      return \"gray\";\n    }).on(\"mouseover\", (event, d) => {\n      // Create an object to hold all coordinate values\n      const coordinates = {};\n\n      // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n      coordinateKeys.forEach(key => {\n        coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n      });\n\n      // Pass the full coordinates to the parent component\n      setHoveredCoordinates({\n        ...coordinates,\n        id: d.id,\n        bitVector: d.bitVector\n      });\n    }).call(d3.drag().on(\"start\", event => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }).on(\"drag\", event => {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }).on(\"end\", event => {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }));\n\n    // Add tooltips\n    // node.append(\"title\").text((d) => d.id);\n    node.append(\"title\").text(d => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","length","coordinateKeys","Object","keys","filter","key","calculateCentroid","points","n","sum","reduce","acc","point","forEach","assignBitVector","map","join","clusters","group","d","Cluster","beads","Bead","rootCentroid","clusterCentroids","Array","from","cluster","centroid","beadCentroids","bead","split","links","nodes","id","bitVector","push","source","target","index","pointId","container","select","current","parentNode","width","node","getBoundingClientRect","height","margin","top","right","bottom","left","svg","attr","selectAll","remove","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","forceCollide","radius","startsWith","on","link","clamp","x","y","value","min","max","Math","append","data","enter","event","coordinates","call","drag","active","alphaTarget","restart","subject","fx","fy","text","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/GRAPH/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || jsonData.length === 0) return;\n\n    // Dynamically extract coordinate keys (dimensions)\n    const coordinateKeys = Object.keys(jsonData[0]).filter(\n      (key) => key !== \"Cluster\" && key !== \"Bead\"\n    );\n\n    // Helper to calculate centroid\n    const calculateCentroid = (points) => {\n      const n = points.length;\n      const sum = points.reduce((acc, point) => {\n        coordinateKeys.forEach((key) => {\n          acc[key] = (acc[key] || 0) + point[key];\n        });\n        return acc;\n      }, {});\n      // Compute average for each dimension\n      Object.keys(sum).forEach((key) => (sum[key] /= n));\n      return sum;\n    };\n    // Assign bit vectors based on coordinate keys (planes)\n    const assignBitVector = (point) => {\n      return coordinateKeys\n        .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n        .join(\"\");\n    };\n    // Parse and process data\n    const clusters = d3.group(jsonData, (d) => d.Cluster);\n    const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n    // Root centroid\n    const rootCentroid = calculateCentroid(jsonData);\n\n    // Cluster centroids\n    const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n      cluster,\n      centroid: calculateCentroid(points),\n    }));\n\n    // Bead centroids\n    const beadCentroids = Array.from(beads, ([key, points]) => {\n      const [cluster, bead] = key.split(\"-\");\n      return {\n        cluster,\n        bead,\n        centroid: calculateCentroid(points),\n        points,\n      };\n    });\n\n    // Build hierarchical links\n    const links = [];\n    const nodes = [\n      { id: \"root\", ...rootCentroid , bitVector: assignBitVector(rootCentroid)}, // Root node\n    ];\n\n    // Add cluster nodes and links\n    clusterCentroids.forEach(({ cluster, centroid }) => {\n      nodes.push({ id: `cluster-${cluster}`, ...centroid,\n        bitVector: assignBitVector(centroid), });\n      links.push({ source: \"root\", target: `cluster-${cluster}` });\n    });\n\n    // Add bead nodes and links\n    beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n      nodes.push({ id: `bead-${cluster}-${bead}`, ...centroid,\n        bitVector: assignBitVector(centroid), });\n      links.push({\n        source: `cluster-${cluster}`,\n        target: `bead-${cluster}-${bead}`,\n      });\n\n      // Add individual points and links\n      points.forEach((point, index) => {\n        const pointId = `point-${cluster}-${bead}-${index}`;\n        nodes.push({ id: pointId, ...point,\n          bitVector: assignBitVector(point), });\n        links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n      });\n    });\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n    const svg = d3\n      .select(graphRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Force simulation\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink(links)\n          .id((d) => d.id)\n          .distance(-10)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(1))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\n      .force(\n        \"collision\",\n        d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15)) // Adjust radii for different node types\n      )\n\n      .force(\"charge\", d3.forceManyBody().strength(-1))\n      .force(\n        \"center\",\n        d3.forceCenter(\n          (width - margin.left - margin.right) / 2,\n          (height - margin.top - margin.bottom) / 2\n        )\n      )\n      .on(\"tick\", () => {\n        link\n          .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n          .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n          .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n          .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n        node\n          .attr(\"cx\", (d) => clamp(d.x, 0, width))\n          .attr(\"cy\", (d) => clamp(d.y, 0, height));\n      });\n\n    // Clamp function to restrict within bounds\n    const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n    // Draw links\n    const link = svg\n      .append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke\", \"#aaa\")\n      .attr(\"stroke-width\", 2);\n\n    // Draw nodes\n    const node = svg\n      .append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 5)\n      .attr(\"fill\", (d) => {\n        if (d.id === \"root\") return \"red\";\n        if (d.id.startsWith(\"cluster\")) return \"blue\";\n        if (d.id.startsWith(\"bead\")) return \"green\";\n        return \"gray\";\n      })\n\n      .on(\"mouseover\", (event, d) => {\n        // Create an object to hold all coordinate values\n        const coordinates = {};\n\n        // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n        coordinateKeys.forEach((key) => {\n          coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n        });\n\n        // Pass the full coordinates to the parent component\n        setHoveredCoordinates({\n          ...coordinates,\n          id: d.id,\n          bitVector: d.bitVector,\n        });\n      })\n\n      .call(\n        d3\n          .drag()\n          .on(\"start\", (event) => {\n            if (!event.active) simulation.alphaTarget(0.3).restart();\n            event.subject.fx = event.subject.x;\n            event.subject.fy = event.subject.y;\n          })\n          .on(\"drag\", (event) => {\n            event.subject.fx = event.x;\n            event.subject.fy = event.y;\n          })\n          .on(\"end\", (event) => {\n            if (!event.active) simulation.alphaTarget(0);\n            event.subject.fx = null;\n            event.subject.fy = null;\n          })\n      );\n\n    // Add tooltips\n    // node.append(\"title\").text((d) => d.id);\n    node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}