{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/GRAPH/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || jsonData.length === 0) return;\n\n// // //     // Dynamically extract coordinate keys (dimensions)\n// // //     const coordinateKeys = Object.keys(jsonData[0]).filter(\n// // //       (key) => key !== \"Cluster\" && key !== \"Bead\"\n// // //     );\n\n// // //     // Helper to calculate centroid\n// // //     const calculateCentroid = (points) => {\n// // //       const n = points.length;\n// // //       const sum = points.reduce((acc, point) => {\n// // //         coordinateKeys.forEach((key) => {\n// // //           acc[key] = (acc[key] || 0) + point[key];\n// // //         });\n// // //         return acc;\n// // //       }, {});\n// // //       // Compute average for each dimension\n// // //       Object.keys(sum).forEach((key) => (sum[key] /= n));\n// // //       return sum;\n// // //     };\n// // //     // Assign bit vectors based on coordinate keys (planes)\n// // //     const assignBitVector = (point) => {\n// // //       return coordinateKeys\n// // //         .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n// // //         .join(\"\");\n// // //     };\n// // //     // Parse and process data\n// // //     const clusters = d3.group(jsonData, (d) => d.Cluster);\n// // //     const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n// // //     // Root centroid\n// // //     const rootCentroid = calculateCentroid(jsonData);\n\n// // //     // Cluster centroids\n// // //     const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n// // //       cluster,\n// // //       centroid: calculateCentroid(points),\n// // //     }));\n\n// // //     // Bead centroids\n// // //     const beadCentroids = Array.from(beads, ([key, points]) => {\n// // //       const [cluster, bead] = key.split(\"-\");\n// // //       return {\n// // //         cluster,\n// // //         bead,\n// // //         centroid: calculateCentroid(points),\n// // //         points,\n// // //       };\n// // //     });\n\n// // //     // Build hierarchical links\n// // //     const links = [];\n// // //     const nodes = [\n// // //       { id: \"root\", ...rootCentroid , bitVector: assignBitVector(rootCentroid)}, // Root node\n// // //     ];\n\n// // //     // Add cluster nodes and links\n// // //     clusterCentroids.forEach(({ cluster, centroid }) => {\n// // //       nodes.push({ id: `cluster-${cluster}`, ...centroid,\n// // //         bitVector: assignBitVector(centroid), });\n// // //       links.push({ source: \"root\", target: `cluster-${cluster}` });\n// // //     });\n\n// // //     // Add bead nodes and links\n// // //     beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n// // //       nodes.push({ id: `bead-${cluster}-${bead}`, ...centroid,\n// // //         bitVector: assignBitVector(centroid), });\n// // //       links.push({\n// // //         source: `cluster-${cluster}`,\n// // //         target: `bead-${cluster}-${bead}`,\n// // //       });\n\n// // //       // Add individual points and links\n// // //       points.forEach((point, index) => {\n// // //         const pointId = `point-${cluster}-${bead}-${index}`;\n// // //         nodes.push({ id: pointId, ...point,\n// // //           bitVector: assignBitVector(point), });\n// // //         links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n// // //       });\n// // //     });\n\n// // //     // Set up container dimensions\n// // //     const container = d3.select(graphRef.current.parentNode);\n// // //     const width = container.node().getBoundingClientRect().width;\n// // //     const height = container.node().getBoundingClientRect().height;\n// // //     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n// // //     const svg = d3\n// // //       .select(graphRef.current)\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n// // //       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n// // //     // Clear previous render\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     // Force simulation\n// // //     const simulation = d3\n// // //       .forceSimulation(nodes)\n// // //       .force(\n// // //         \"link\",\n// // //         d3\n// // //           .forceLink(links)\n// // //           .id((d) => d.id)\n// // //           .distance(-10)\n// // //       )\n// // //       .force(\"charge\", d3.forceManyBody().strength(1))\n// // //       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n// // //       .force(\n// // //         \"collision\",\n// // //         d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15)) // Adjust radii for different node types\n// // //       )\n\n// // //       .force(\"charge\", d3.forceManyBody().strength( 3))\n// // //       .force(\n// // //         \"center\",\n// // //         d3.forceCenter(\n// // //           (width - margin.left - margin.right) / 2,\n// // //           (height - margin.top - margin.bottom) / 2\n// // //         )\n// // //       )\n// // //       .on(\"tick\", () => {\n// // //         link\n// // //           .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n// // //           .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n// // //           .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n// // //           .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n// // //         node\n// // //           .attr(\"cx\", (d) => clamp(d.x, 0, width))\n// // //           .attr(\"cy\", (d) => clamp(d.y, 0, height));\n// // //       });\n\n// // //     // Clamp function to restrict within bounds\n// // //     const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n// // //     // Draw links\n// // //     const link = svg\n// // //       .append(\"g\")\n// // //       .attr(\"class\", \"links\")\n// // //       .selectAll(\"line\")\n// // //       .data(links)\n// // //       .enter()\n// // //       .append(\"line\")\n// // //       .attr(\"stroke\", \"#aaa\")\n// // //       .attr(\"stroke-width\", 2);\n\n// // //     // Draw nodes\n// // //     const node = svg\n// // //       .append(\"g\")\n// // //       .attr(\"class\", \"nodes\")\n// // //       .selectAll(\"circle\")\n// // //       .data(nodes)\n// // //       .enter()\n// // //       .append(\"circle\")\n// // //       .attr(\"r\", 5)\n// // //       .attr(\"fill\", (d) => {\n// // //         if (d.id === \"root\") return \"red\";\n// // //         if (d.id.startsWith(\"cluster\")) return \"blue\";\n// // //         if (d.id.startsWith(\"bead\")) return \"green\";\n// // //         return \"gray\";\n// // //       })\n\n// // //       .on(\"mouseover\", (event, d) => {\n// // //         // Create an object to hold all coordinate values\n// // //         const coordinates = {};\n\n// // //         // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n// // //         coordinateKeys.forEach((key) => {\n// // //           coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n// // //         });\n\n// // //         // Pass the full coordinates to the parent component\n// // //         setHoveredCoordinates({\n// // //           ...coordinates,\n// // //           id: d.id,\n// // //           bitVector: d.bitVector,\n// // //         });\n// // //       })\n\n// // //       .call(\n// // //         d3\n// // //           .drag()\n// // //           .on(\"start\", (event) => {\n// // //             if (!event.active) simulation.alphaTarget(0.3).restart();\n// // //             event.subject.fx = event.subject.x;\n// // //             event.subject.fy = event.subject.y;\n// // //           })\n// // //           .on(\"drag\", (event) => {\n// // //             event.subject.fx = event.x;\n// // //             event.subject.fy = event.y;\n// // //           })\n// // //           .on(\"end\", (event) => {\n// // //             if (!event.active) simulation.alphaTarget(0);\n// // //             event.subject.fx = null;\n// // //             event.subject.fy = null;\n// // //           })\n// // //       );\n\n// // //     // Add tooltips\n// // //     // node.append(\"title\").text((d) => d.id);\n// // //     node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n// // //   }, [jsonData, setHoveredCoordinates]);\n\n// // //   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // // _____________________________________placement acc x and y bit vectors_________________________________\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (!jsonData || jsonData.length === 0) return;\n\n// //     // Dynamically extract coordinate keys (dimensions)\n// //     const coordinateKeys = Object.keys(jsonData[0]).filter(\n// //       (key) => key !== \"Cluster\" && key !== \"Bead\"\n// //     );\n\n// //     // Helper to calculate centroid\n// //     const calculateCentroid = (points) => {\n// //       const n = points.length;\n// //       const sum = points.reduce((acc, point) => {\n// //         coordinateKeys.forEach((key) => {\n// //           acc[key] = (acc[key] || 0) + point[key];\n// //         });\n// //         return acc;\n// //       }, {});\n// //       // Compute average for each dimension\n// //       Object.keys(sum).forEach((key) => (sum[key] /= n));\n// //       return sum;\n// //     };\n// //     // Assign bit vectors based on coordinate keys (planes)\n// //     const assignBitVector = (point) => {\n// //       return coordinateKeys\n// //         .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n// //         .join(\"\");\n// //     };\n// //     // Parse and process data\n// //     const clusters = d3.group(jsonData, (d) => d.Cluster);\n// //     const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n// //     // Root centroid\n// //     const rootCentroid = calculateCentroid(jsonData);\n\n// //     // Cluster centroids\n// //     const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n// //       cluster,\n// //       centroid: calculateCentroid(points),\n// //     }));\n\n// //     // Bead centroids\n// //     const beadCentroids = Array.from(beads, ([key, points]) => {\n// //       const [cluster, bead] = key.split(\"-\");\n// //       return {\n// //         cluster,\n// //         bead,\n// //         centroid: calculateCentroid(points),\n// //         points,\n// //       };\n// //     });\n\n// //     // Build hierarchical links\n// //     const links = [];\n// //     const nodes = [\n// //       { id: \"root\", ...rootCentroid, bitVector: assignBitVector(rootCentroid) }, // Root node\n// //     ];\n\n// //     // Add cluster nodes and links\n// //     clusterCentroids.forEach(({ cluster, centroid }) => {\n// //       nodes.push({\n// //         id: `cluster-${cluster}`,\n// //         ...centroid,\n// //         bitVector: assignBitVector(centroid),\n// //       });\n// //       links.push({ source: \"root\", target: `cluster-${cluster}` });\n// //     });\n\n// //     // Add bead nodes and links\n// //     beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n// //       nodes.push({\n// //         id: `bead-${cluster}-${bead}`,\n// //         ...centroid,\n// //         bitVector: assignBitVector(centroid),\n// //       });\n// //       links.push({\n// //         source: `cluster-${cluster}`,\n// //         target: `bead-${cluster}-${bead}`,\n// //       });\n\n// //       // Add individual points and links\n// //       points.forEach((point, index) => {\n// //         const pointId = `point-${cluster}-${bead}-${index}`;\n// //         nodes.push({\n// //           id: pointId,\n// //           ...point,\n// //           bitVector: assignBitVector(point),\n// //         });\n// //         links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n// //       });\n// //     });\n\n// //     // Set up container dimensions\n// //     const container = d3.select(graphRef.current.parentNode);\n// //     const width = container.node().getBoundingClientRect().width;\n// //     const height = container.node().getBoundingClientRect().height;\n// //     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n// //     const svg = d3\n// //       .select(graphRef.current)\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n// //       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n// //     // Clear previous render\n// //     svg.selectAll(\"*\").remove();\n\n// //     // Calculate initial positions based on bit vectors\n// //     nodes.forEach((node) => {\n// //       if (node.bitVector) {\n// //         // Avoid undefined case\n// //         let x = 0;\n// //         let y = 0;\n\n// //         for (let i = 0; i < coordinateKeys.length; i++) {\n// //           const key = coordinateKeys[i];\n// //           const bit = node.bitVector[i];\n// //           const dimensionMultiplier = 100; // You can increase or decrease this to change spread between clusters\n\n// //           // Use the dimensionMultiplier and add more multiplier if more than one dimension\n// //           x +=\n// //             (bit === \"1\"\n// //               ? dimensionMultiplier * 1.5\n// //               : -dimensionMultiplier * 1.5) *\n// //             (i + 1);\n// //           y +=\n// //             (bit === \"1\"\n// //               ? dimensionMultiplier * 1.5\n// //               : -dimensionMultiplier * 1.5) *\n// //             (i + 1);\n// //         }\n\n// //         node.x = x + width / 2;\n// //         node.y = y + height / 2;\n// //       }\n// //     });\n\n// //     // Force simulation\n// //     const simulation = d3\n// //       .forceSimulation(nodes)\n// //       .force(\n// //         \"link\",\n// //         d3\n// //           .forceLink(links)\n// //           .id((d) => d.id)\n// //           .distance(-10)\n// //       )\n// //       .force(\"charge\", d3.forceManyBody().strength(1))\n// //       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n// //       .force(\n// //         \"collision\",\n// //         d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15)) // Adjust radii for different node types\n// //       )\n\n// //       .force(\"charge\", d3.forceManyBody().strength(3))\n// //       .force(\n// //         \"center\",\n// //         d3.forceCenter(\n// //           (width - margin.left - margin.right) / 2,\n// //           (height - margin.top - margin.bottom) / 2\n// //         )\n// //       )\n// //       .on(\"tick\", () => {\n// //         link\n// //           .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n// //           .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n// //           .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n// //           .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n// //         node\n// //           .attr(\"cx\", (d) => clamp(d.x, 0, width))\n// //           .attr(\"cy\", (d) => clamp(d.y, 0, height));\n// //       });\n\n// //     // Clamp function to restrict within bounds\n// //     const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n// //     // Draw links\n// //     const link = svg\n// //       .append(\"g\")\n// //       .attr(\"class\", \"links\")\n// //       .selectAll(\"line\")\n// //       .data(links)\n// //       .enter()\n// //       .append(\"line\")\n// //       .attr(\"stroke\", \"#aaa\")\n// //       .attr(\"stroke-width\", 2);\n\n// //     // Draw nodes\n// //     const node = svg\n// //       .append(\"g\")\n// //       .attr(\"class\", \"nodes\")\n// //       .selectAll(\"circle\")\n// //       .data(nodes)\n// //       .enter()\n// //       .append(\"circle\")\n// //       .attr(\"r\", 5)\n// //       .attr(\"fill\", (d) => {\n// //         if (d.id === \"root\") return \"red\";\n// //         if (d.id.startsWith(\"cluster\")) return \"blue\";\n// //         if (d.id.startsWith(\"bead\")) return \"green\";\n// //         return \"gray\";\n// //       })\n\n// //       .on(\"mouseover\", (event, d) => {\n// //         // Create an object to hold all coordinate values\n// //         const coordinates = {};\n\n// //         // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n// //         coordinateKeys.forEach((key) => {\n// //           coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n// //         });\n\n// //         // Pass the full coordinates to the parent component\n// //         setHoveredCoordinates({\n// //           ...coordinates,\n// //           id: d.id,\n// //           bitVector: d.bitVector,\n// //         });\n// //       })\n\n// //       .call(\n// //         d3\n// //           .drag()\n// //           .on(\"start\", (event) => {\n// //             if (!event.active) simulation.alphaTarget(0.3).restart();\n// //             event.subject.fx = event.subject.x;\n// //             event.subject.fy = event.subject.y;\n// //           })\n// //           .on(\"drag\", (event) => {\n// //             event.subject.fx = event.x;\n// //             event.subject.fy = event.y;\n// //           })\n// //           .on(\"end\", (event) => {\n// //             if (!event.active) simulation.alphaTarget(0);\n// //             event.subject.fx = null;\n// //             event.subject.fy = null;\n// //           })\n// //       );\n\n// //     // Add tooltips\n// //     // node.append(\"title\").text((d) => d.id);\n// //     node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n// //   }, [jsonData, setHoveredCoordinates]);\n\n// //   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// // };\n\n// // export default HierarchicalGraph;\n\n// // _______________________________________________________QUANDRANT POSITIONING WITH SIMULATION_________________\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || jsonData.length === 0) return;\n\n//     // Dynamically extract coordinate keys (dimensions)\n//     const coordinateKeys = Object.keys(jsonData[0]).filter(\n//       (key) => key !== \"Cluster\" && key !== \"Bead\"\n//     );\n\n//     // Helper to calculate centroid\n//     const calculateCentroid = (points) => {\n//       const n = points.length;\n//       const sum = points.reduce((acc, point) => {\n//         coordinateKeys.forEach((key) => {\n//           acc[key] = (acc[key] || 0) + point[key];\n//         });\n//         return acc;\n//       }, {});\n//       // Compute average for each dimension\n//       Object.keys(sum).forEach((key) => (sum[key] /= n));\n//       return sum;\n//     };\n//     // Assign bit vectors based on coordinate keys (planes)\n//     const assignBitVector = (point) => {\n//       return coordinateKeys\n//         .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n//         .join(\"\");\n//     };\n//     // Parse and process data\n//     const clusters = d3.group(jsonData, (d) => d.Cluster);\n//     const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n//     // Root centroid\n//     const rootCentroid = calculateCentroid(jsonData);\n\n//     // Cluster centroids\n//     const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n//       cluster,\n//       centroid: calculateCentroid(points),\n//     }));\n\n//     // Bead centroids\n//     const beadCentroids = Array.from(beads, ([key, points]) => {\n//       const [cluster, bead] = key.split(\"-\");\n//       return {\n//         cluster,\n//         bead,\n//         centroid: calculateCentroid(points),\n//         points,\n//       };\n//     });\n\n//     // Build hierarchical links\n//     const links = [];\n//     const nodes = [\n//       { id: \"root\", ...rootCentroid, bitVector: assignBitVector(rootCentroid) }, // Root node\n//     ];\n\n//     // Add cluster nodes and links\n//     clusterCentroids.forEach(({ cluster, centroid }) => {\n//       nodes.push({\n//         id: `cluster-${cluster}`,\n//         ...centroid,\n//         bitVector: assignBitVector(centroid),\n//       });\n//       links.push({ source: \"root\", target: `cluster-${cluster}` });\n//     });\n\n//     // Add bead nodes and links\n//     beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n//       nodes.push({\n//         id: `bead-${cluster}-${bead}`,\n//         ...centroid,\n//         bitVector: assignBitVector(centroid),\n//       });\n//       links.push({\n//         source: `cluster-${cluster}`,\n//         target: `bead-${cluster}-${bead}`,\n//       });\n\n//       // Add individual points and links\n//       points.forEach((point, index) => {\n//         const pointId = `point-${cluster}-${bead}-${index}`;\n//         nodes.push({\n//           id: pointId,\n//           ...point,\n//           bitVector: assignBitVector(point),\n//         });\n//         links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n//       });\n//     });\n\n//     // Set up container dimensions\n//     const container = d3.select(graphRef.current.parentNode);\n//     const width = container.node().getBoundingClientRect().width;\n//     const height = container.node().getBoundingClientRect().height;\n//     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//     const svg = d3\n//       .select(graphRef.current)\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n//       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Calculate the number of quadrants based on the number of dimensions\n//     const numDimensions = coordinateKeys.length;\n//     const numQuadrants = 2 ** numDimensions;\n\n//     // Calculate initial positions based on bit vectors\n//     nodes.forEach((node) => {\n//       if (node.bitVector) {\n//         // Convert the bit vector to a decimal number\n//         const quadrantIndex = parseInt(node.bitVector, 2);\n\n//         // Calculate quadrant size and starting position\n//         const numRows = Math.ceil(Math.sqrt(numQuadrants));\n//         const numCols = Math.ceil(numQuadrants / numRows);\n//         const quadrantWidth = (width - margin.left - margin.right) / numCols;\n//         const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n\n//         const row = Math.floor(quadrantIndex / numCols);\n//         const col = quadrantIndex % numCols;\n\n//         const x = col * quadrantWidth + quadrantWidth / 2 + margin.left;\n//         const y = row * quadrantHeight + quadrantHeight / 2 + margin.top;\n\n//         node.x = x;\n//         node.y = y;\n//       }\n//     });\n\n//     // Force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(-10)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(1))\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n//       .force(\n//         \"collision\",\n//         d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15))\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(3))\n//       .force(\n//         \"center\",\n//         d3.forceCenter(\n//           (width - margin.left - margin.right) / 2,\n//           (height - margin.top - margin.bottom) / 2\n//         )\n//       )\n//       .on(\"tick\", () => {\n//         link\n//           .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n//           .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n//           .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n//           .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n//         node\n//           .attr(\"cx\", (d) => clamp(d.x, 0, width))\n//           .attr(\"cy\", (d) => clamp(d.y, 0, height));\n//       });\n\n//     // Clamp function to restrict within bounds\n//     const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n//     // Draw links\n//     const link = svg\n//       .append(\"g\")\n//       .attr(\"class\", \"links\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"stroke\", \"#aaa\")\n//       .attr(\"stroke-width\", 2);\n\n//     // Draw nodes\n//     const node = svg\n//       .append(\"g\")\n//       .attr(\"class\", \"nodes\")\n//       .selectAll(\"circle\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"r\", 5)\n//       .attr(\"fill\", (d) => {\n//         if (d.id === \"root\") return \"red\";\n//         if (d.id.startsWith(\"cluster\")) return \"blue\";\n//         if (d.id.startsWith(\"bead\")) return \"green\";\n//         return \"gray\";\n//       })\n//       .on(\"mouseover\", (event, d) => {\n//         // Create an object to hold all coordinate values\n//         const coordinates = {};\n\n//         // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n//         coordinateKeys.forEach((key) => {\n//           coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n//         });\n\n//         // Pass the full coordinates to the parent component\n//         setHoveredCoordinates({\n//           ...coordinates,\n//           id: d.id,\n//           bitVector: d.bitVector,\n//         });\n//       })\n//       .call(\n//         d3\n//           .drag()\n//           .on(\"start\", (event) => {\n//             if (!event.active) simulation.alphaTarget(0.3).restart();\n//             event.subject.fx = event.subject.x;\n//             event.subject.fy = event.subject.y;\n//           })\n//           .on(\"drag\", (event) => {\n//             event.subject.fx = event.x;\n//             event.subject.fy = event.y;\n//           })\n//           .on(\"end\", (event) => {\n//             if (!event.active) simulation.alphaTarget(0);\n//             event.subject.fx = null;\n//             event.subject.fy = null;\n//           })\n//       );\n\n//     // Add tooltips\n//     // node.append(\"title\").text((d) => d.id);\n//     node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || jsonData.length === 0) return;\n\n    // Dynamically extract coordinate keys (dimensions)\n    const coordinateKeys = Object.keys(jsonData[0]).filter(key => key !== \"Cluster\" && key !== \"Bead\");\n\n    // Helper to calculate centroid\n    const calculateCentroid = points => {\n      const n = points.length;\n      const sum = points.reduce((acc, point) => {\n        coordinateKeys.forEach(key => {\n          acc[key] = (acc[key] || 0) + point[key];\n        });\n        return acc;\n      }, {});\n      // Compute average for each dimension\n      Object.keys(sum).forEach(key => sum[key] /= n);\n      return sum;\n    };\n    // Assign bit vectors based on coordinate keys (planes)\n    const assignBitVector = point => {\n      return coordinateKeys.map(key => point[key] >= 0 ? \"1\" : \"0\").join(\"\");\n    };\n    // Parse and process data\n    const clusters = d3.group(jsonData, d => d.Cluster);\n    const beads = d3.group(jsonData, d => `${d.Cluster}-${d.Bead}`);\n\n    // Root centroid\n    const rootCentroid = calculateCentroid(jsonData);\n\n    // Cluster centroids\n    const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n      cluster,\n      centroid: calculateCentroid(points)\n    }));\n\n    // Bead centroids\n    const beadCentroids = Array.from(beads, ([key, points]) => {\n      const [cluster, bead] = key.split(\"-\");\n      return {\n        cluster,\n        bead,\n        centroid: calculateCentroid(points),\n        points\n      };\n    });\n\n    // Build hierarchical links\n    const links = [];\n    const nodes = [{\n      id: \"root\",\n      ...rootCentroid,\n      bitVector: assignBitVector(rootCentroid)\n    } // Root node\n    ];\n\n    // Add cluster nodes and links\n    clusterCentroids.forEach(({\n      cluster,\n      centroid\n    }) => {\n      nodes.push({\n        id: `cluster-${cluster}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid)\n      });\n      links.push({\n        source: \"root\",\n        target: `cluster-${cluster}`\n      });\n    });\n\n    // Add bead nodes and links\n    beadCentroids.forEach(({\n      cluster,\n      bead,\n      centroid,\n      points\n    }) => {\n      nodes.push({\n        id: `bead-${cluster}-${bead}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid)\n      });\n      links.push({\n        source: `cluster-${cluster}`,\n        target: `bead-${cluster}-${bead}`\n      });\n\n      // Add individual points and links\n      points.forEach((point, index) => {\n        const pointId = `point-${cluster}-${bead}-${index}`;\n        nodes.push({\n          id: pointId,\n          ...point,\n          bitVector: assignBitVector(point)\n        });\n        links.push({\n          source: `bead-${cluster}-${bead}`,\n          target: pointId\n        });\n      });\n    });\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const svg = d3.select(graphRef.current).attr(\"width\", width).attr(\"height\", height).attr(\"viewBox\", `0 0 ${width} ${height}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Calculate the number of quadrants based on the number of dimensions\n    const numDimensions = coordinateKeys.length;\n    const numQuadrants = 2 ** numDimensions;\n\n    // Calculate initial positions based on bit vectors\n    nodes.forEach(node => {\n      if (node.bitVector) {\n        // Convert the bit vector to a decimal number\n        const quadrantIndex = parseInt(node.bitVector, 2);\n\n        // Calculate quadrant size and starting position\n        const numRows = Math.ceil(Math.sqrt(numQuadrants));\n        const numCols = Math.ceil(numQuadrants / numRows);\n        const quadrantWidth = (width - margin.left - margin.right) / numCols;\n        const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n        const row = Math.floor(quadrantIndex / numCols);\n        const col = quadrantIndex % numCols;\n        const x = col * quadrantWidth + quadrantWidth / 2 + margin.left;\n        const y = row * quadrantHeight + quadrantHeight / 2 + margin.top;\n        node.x = x;\n        node.y = y;\n      }\n    });\n\n    // Draw grid lines\n    const numRows = Math.ceil(Math.sqrt(numQuadrants));\n    const numCols = Math.ceil(numQuadrants / numRows);\n    const quadrantWidth = (width - margin.left - margin.right) / numCols;\n    const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n    const grid = svg.append(\"g\").attr(\"class\", \"grid\");\n\n    // Draw vertical lines\n    for (let i = 0; i <= numCols; i++) {\n      grid.append(\"line\").attr(\"x1\", margin.left + i * quadrantWidth).attr(\"y1\", margin.top).attr(\"x2\", margin.left + i * quadrantWidth).attr(\"y2\", height - margin.bottom).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1);\n    }\n\n    // Draw horizontal lines\n    for (let i = 0; i <= numRows; i++) {\n      grid.append(\"line\").attr(\"x1\", margin.left).attr(\"y1\", margin.top + i * quadrantHeight).attr(\"x2\", width - margin.right).attr(\"y2\", margin.top + i * quadrantHeight).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1);\n    }\n\n    // Draw links\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(links).enter().append(\"line\").attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y).attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 2);\n\n    // Draw nodes\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 5).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y).attr(\"fill\", d => {\n      if (d.id === \"root\") return \"red\";\n      if (d.id.startsWith(\"cluster\")) return \"blue\";\n      if (d.id.startsWith(\"bead\")) return \"green\";\n      return \"gray\";\n    }).on(\"mouseover\", (event, d) => {\n      const coordinates = {};\n      coordinateKeys.forEach(key => {\n        coordinates[key] = d[key];\n      });\n      setHoveredCoordinates({\n        ...coordinates,\n        id: d.id,\n        bitVector: d.bitVector\n      });\n    }).call(d3.drag().on(\"start\", event => {\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }).on(\"drag\", event => {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }).on(\"end\", event => {\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }));\n\n    // Add tooltips\n    node.append(\"title\").text(d => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 966,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","length","coordinateKeys","Object","keys","filter","key","calculateCentroid","points","n","sum","reduce","acc","point","forEach","assignBitVector","map","join","clusters","group","d","Cluster","beads","Bead","rootCentroid","clusterCentroids","Array","from","cluster","centroid","beadCentroids","bead","split","links","nodes","id","bitVector","push","source","target","index","pointId","container","select","current","parentNode","width","node","getBoundingClientRect","height","margin","top","right","bottom","left","svg","attr","selectAll","remove","numDimensions","numQuadrants","quadrantIndex","parseInt","numRows","Math","ceil","sqrt","numCols","quadrantWidth","quadrantHeight","row","floor","col","x","y","grid","append","i","link","data","enter","startsWith","on","event","coordinates","call","drag","subject","fx","fy","text","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/GRAPH/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || jsonData.length === 0) return;\n\n// // //     // Dynamically extract coordinate keys (dimensions)\n// // //     const coordinateKeys = Object.keys(jsonData[0]).filter(\n// // //       (key) => key !== \"Cluster\" && key !== \"Bead\"\n// // //     );\n\n// // //     // Helper to calculate centroid\n// // //     const calculateCentroid = (points) => {\n// // //       const n = points.length;\n// // //       const sum = points.reduce((acc, point) => {\n// // //         coordinateKeys.forEach((key) => {\n// // //           acc[key] = (acc[key] || 0) + point[key];\n// // //         });\n// // //         return acc;\n// // //       }, {});\n// // //       // Compute average for each dimension\n// // //       Object.keys(sum).forEach((key) => (sum[key] /= n));\n// // //       return sum;\n// // //     };\n// // //     // Assign bit vectors based on coordinate keys (planes)\n// // //     const assignBitVector = (point) => {\n// // //       return coordinateKeys\n// // //         .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n// // //         .join(\"\");\n// // //     };\n// // //     // Parse and process data\n// // //     const clusters = d3.group(jsonData, (d) => d.Cluster);\n// // //     const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n// // //     // Root centroid\n// // //     const rootCentroid = calculateCentroid(jsonData);\n\n// // //     // Cluster centroids\n// // //     const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n// // //       cluster,\n// // //       centroid: calculateCentroid(points),\n// // //     }));\n\n// // //     // Bead centroids\n// // //     const beadCentroids = Array.from(beads, ([key, points]) => {\n// // //       const [cluster, bead] = key.split(\"-\");\n// // //       return {\n// // //         cluster,\n// // //         bead,\n// // //         centroid: calculateCentroid(points),\n// // //         points,\n// // //       };\n// // //     });\n\n// // //     // Build hierarchical links\n// // //     const links = [];\n// // //     const nodes = [\n// // //       { id: \"root\", ...rootCentroid , bitVector: assignBitVector(rootCentroid)}, // Root node\n// // //     ];\n\n// // //     // Add cluster nodes and links\n// // //     clusterCentroids.forEach(({ cluster, centroid }) => {\n// // //       nodes.push({ id: `cluster-${cluster}`, ...centroid,\n// // //         bitVector: assignBitVector(centroid), });\n// // //       links.push({ source: \"root\", target: `cluster-${cluster}` });\n// // //     });\n\n// // //     // Add bead nodes and links\n// // //     beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n// // //       nodes.push({ id: `bead-${cluster}-${bead}`, ...centroid,\n// // //         bitVector: assignBitVector(centroid), });\n// // //       links.push({\n// // //         source: `cluster-${cluster}`,\n// // //         target: `bead-${cluster}-${bead}`,\n// // //       });\n\n// // //       // Add individual points and links\n// // //       points.forEach((point, index) => {\n// // //         const pointId = `point-${cluster}-${bead}-${index}`;\n// // //         nodes.push({ id: pointId, ...point,\n// // //           bitVector: assignBitVector(point), });\n// // //         links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n// // //       });\n// // //     });\n\n// // //     // Set up container dimensions\n// // //     const container = d3.select(graphRef.current.parentNode);\n// // //     const width = container.node().getBoundingClientRect().width;\n// // //     const height = container.node().getBoundingClientRect().height;\n// // //     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n// // //     const svg = d3\n// // //       .select(graphRef.current)\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n// // //       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n// // //     // Clear previous render\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     // Force simulation\n// // //     const simulation = d3\n// // //       .forceSimulation(nodes)\n// // //       .force(\n// // //         \"link\",\n// // //         d3\n// // //           .forceLink(links)\n// // //           .id((d) => d.id)\n// // //           .distance(-10)\n// // //       )\n// // //       .force(\"charge\", d3.forceManyBody().strength(1))\n// // //       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n// // //       .force(\n// // //         \"collision\",\n// // //         d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15)) // Adjust radii for different node types\n// // //       )\n\n// // //       .force(\"charge\", d3.forceManyBody().strength( 3))\n// // //       .force(\n// // //         \"center\",\n// // //         d3.forceCenter(\n// // //           (width - margin.left - margin.right) / 2,\n// // //           (height - margin.top - margin.bottom) / 2\n// // //         )\n// // //       )\n// // //       .on(\"tick\", () => {\n// // //         link\n// // //           .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n// // //           .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n// // //           .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n// // //           .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n// // //         node\n// // //           .attr(\"cx\", (d) => clamp(d.x, 0, width))\n// // //           .attr(\"cy\", (d) => clamp(d.y, 0, height));\n// // //       });\n\n// // //     // Clamp function to restrict within bounds\n// // //     const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n// // //     // Draw links\n// // //     const link = svg\n// // //       .append(\"g\")\n// // //       .attr(\"class\", \"links\")\n// // //       .selectAll(\"line\")\n// // //       .data(links)\n// // //       .enter()\n// // //       .append(\"line\")\n// // //       .attr(\"stroke\", \"#aaa\")\n// // //       .attr(\"stroke-width\", 2);\n\n// // //     // Draw nodes\n// // //     const node = svg\n// // //       .append(\"g\")\n// // //       .attr(\"class\", \"nodes\")\n// // //       .selectAll(\"circle\")\n// // //       .data(nodes)\n// // //       .enter()\n// // //       .append(\"circle\")\n// // //       .attr(\"r\", 5)\n// // //       .attr(\"fill\", (d) => {\n// // //         if (d.id === \"root\") return \"red\";\n// // //         if (d.id.startsWith(\"cluster\")) return \"blue\";\n// // //         if (d.id.startsWith(\"bead\")) return \"green\";\n// // //         return \"gray\";\n// // //       })\n\n// // //       .on(\"mouseover\", (event, d) => {\n// // //         // Create an object to hold all coordinate values\n// // //         const coordinates = {};\n\n// // //         // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n// // //         coordinateKeys.forEach((key) => {\n// // //           coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n// // //         });\n\n// // //         // Pass the full coordinates to the parent component\n// // //         setHoveredCoordinates({\n// // //           ...coordinates,\n// // //           id: d.id,\n// // //           bitVector: d.bitVector,\n// // //         });\n// // //       })\n\n// // //       .call(\n// // //         d3\n// // //           .drag()\n// // //           .on(\"start\", (event) => {\n// // //             if (!event.active) simulation.alphaTarget(0.3).restart();\n// // //             event.subject.fx = event.subject.x;\n// // //             event.subject.fy = event.subject.y;\n// // //           })\n// // //           .on(\"drag\", (event) => {\n// // //             event.subject.fx = event.x;\n// // //             event.subject.fy = event.y;\n// // //           })\n// // //           .on(\"end\", (event) => {\n// // //             if (!event.active) simulation.alphaTarget(0);\n// // //             event.subject.fx = null;\n// // //             event.subject.fy = null;\n// // //           })\n// // //       );\n\n// // //     // Add tooltips\n// // //     // node.append(\"title\").text((d) => d.id);\n// // //     node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n// // //   }, [jsonData, setHoveredCoordinates]);\n\n// // //   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // // _____________________________________placement acc x and y bit vectors_________________________________\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (!jsonData || jsonData.length === 0) return;\n\n// //     // Dynamically extract coordinate keys (dimensions)\n// //     const coordinateKeys = Object.keys(jsonData[0]).filter(\n// //       (key) => key !== \"Cluster\" && key !== \"Bead\"\n// //     );\n\n// //     // Helper to calculate centroid\n// //     const calculateCentroid = (points) => {\n// //       const n = points.length;\n// //       const sum = points.reduce((acc, point) => {\n// //         coordinateKeys.forEach((key) => {\n// //           acc[key] = (acc[key] || 0) + point[key];\n// //         });\n// //         return acc;\n// //       }, {});\n// //       // Compute average for each dimension\n// //       Object.keys(sum).forEach((key) => (sum[key] /= n));\n// //       return sum;\n// //     };\n// //     // Assign bit vectors based on coordinate keys (planes)\n// //     const assignBitVector = (point) => {\n// //       return coordinateKeys\n// //         .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n// //         .join(\"\");\n// //     };\n// //     // Parse and process data\n// //     const clusters = d3.group(jsonData, (d) => d.Cluster);\n// //     const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n// //     // Root centroid\n// //     const rootCentroid = calculateCentroid(jsonData);\n\n// //     // Cluster centroids\n// //     const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n// //       cluster,\n// //       centroid: calculateCentroid(points),\n// //     }));\n\n// //     // Bead centroids\n// //     const beadCentroids = Array.from(beads, ([key, points]) => {\n// //       const [cluster, bead] = key.split(\"-\");\n// //       return {\n// //         cluster,\n// //         bead,\n// //         centroid: calculateCentroid(points),\n// //         points,\n// //       };\n// //     });\n\n// //     // Build hierarchical links\n// //     const links = [];\n// //     const nodes = [\n// //       { id: \"root\", ...rootCentroid, bitVector: assignBitVector(rootCentroid) }, // Root node\n// //     ];\n\n// //     // Add cluster nodes and links\n// //     clusterCentroids.forEach(({ cluster, centroid }) => {\n// //       nodes.push({\n// //         id: `cluster-${cluster}`,\n// //         ...centroid,\n// //         bitVector: assignBitVector(centroid),\n// //       });\n// //       links.push({ source: \"root\", target: `cluster-${cluster}` });\n// //     });\n\n// //     // Add bead nodes and links\n// //     beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n// //       nodes.push({\n// //         id: `bead-${cluster}-${bead}`,\n// //         ...centroid,\n// //         bitVector: assignBitVector(centroid),\n// //       });\n// //       links.push({\n// //         source: `cluster-${cluster}`,\n// //         target: `bead-${cluster}-${bead}`,\n// //       });\n\n// //       // Add individual points and links\n// //       points.forEach((point, index) => {\n// //         const pointId = `point-${cluster}-${bead}-${index}`;\n// //         nodes.push({\n// //           id: pointId,\n// //           ...point,\n// //           bitVector: assignBitVector(point),\n// //         });\n// //         links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n// //       });\n// //     });\n\n// //     // Set up container dimensions\n// //     const container = d3.select(graphRef.current.parentNode);\n// //     const width = container.node().getBoundingClientRect().width;\n// //     const height = container.node().getBoundingClientRect().height;\n// //     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n// //     const svg = d3\n// //       .select(graphRef.current)\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n// //       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n// //     // Clear previous render\n// //     svg.selectAll(\"*\").remove();\n\n// //     // Calculate initial positions based on bit vectors\n// //     nodes.forEach((node) => {\n// //       if (node.bitVector) {\n// //         // Avoid undefined case\n// //         let x = 0;\n// //         let y = 0;\n\n// //         for (let i = 0; i < coordinateKeys.length; i++) {\n// //           const key = coordinateKeys[i];\n// //           const bit = node.bitVector[i];\n// //           const dimensionMultiplier = 100; // You can increase or decrease this to change spread between clusters\n\n// //           // Use the dimensionMultiplier and add more multiplier if more than one dimension\n// //           x +=\n// //             (bit === \"1\"\n// //               ? dimensionMultiplier * 1.5\n// //               : -dimensionMultiplier * 1.5) *\n// //             (i + 1);\n// //           y +=\n// //             (bit === \"1\"\n// //               ? dimensionMultiplier * 1.5\n// //               : -dimensionMultiplier * 1.5) *\n// //             (i + 1);\n// //         }\n\n// //         node.x = x + width / 2;\n// //         node.y = y + height / 2;\n// //       }\n// //     });\n\n// //     // Force simulation\n// //     const simulation = d3\n// //       .forceSimulation(nodes)\n// //       .force(\n// //         \"link\",\n// //         d3\n// //           .forceLink(links)\n// //           .id((d) => d.id)\n// //           .distance(-10)\n// //       )\n// //       .force(\"charge\", d3.forceManyBody().strength(1))\n// //       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n// //       .force(\n// //         \"collision\",\n// //         d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15)) // Adjust radii for different node types\n// //       )\n\n// //       .force(\"charge\", d3.forceManyBody().strength(3))\n// //       .force(\n// //         \"center\",\n// //         d3.forceCenter(\n// //           (width - margin.left - margin.right) / 2,\n// //           (height - margin.top - margin.bottom) / 2\n// //         )\n// //       )\n// //       .on(\"tick\", () => {\n// //         link\n// //           .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n// //           .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n// //           .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n// //           .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n// //         node\n// //           .attr(\"cx\", (d) => clamp(d.x, 0, width))\n// //           .attr(\"cy\", (d) => clamp(d.y, 0, height));\n// //       });\n\n// //     // Clamp function to restrict within bounds\n// //     const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n// //     // Draw links\n// //     const link = svg\n// //       .append(\"g\")\n// //       .attr(\"class\", \"links\")\n// //       .selectAll(\"line\")\n// //       .data(links)\n// //       .enter()\n// //       .append(\"line\")\n// //       .attr(\"stroke\", \"#aaa\")\n// //       .attr(\"stroke-width\", 2);\n\n// //     // Draw nodes\n// //     const node = svg\n// //       .append(\"g\")\n// //       .attr(\"class\", \"nodes\")\n// //       .selectAll(\"circle\")\n// //       .data(nodes)\n// //       .enter()\n// //       .append(\"circle\")\n// //       .attr(\"r\", 5)\n// //       .attr(\"fill\", (d) => {\n// //         if (d.id === \"root\") return \"red\";\n// //         if (d.id.startsWith(\"cluster\")) return \"blue\";\n// //         if (d.id.startsWith(\"bead\")) return \"green\";\n// //         return \"gray\";\n// //       })\n\n// //       .on(\"mouseover\", (event, d) => {\n// //         // Create an object to hold all coordinate values\n// //         const coordinates = {};\n\n// //         // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n// //         coordinateKeys.forEach((key) => {\n// //           coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n// //         });\n\n// //         // Pass the full coordinates to the parent component\n// //         setHoveredCoordinates({\n// //           ...coordinates,\n// //           id: d.id,\n// //           bitVector: d.bitVector,\n// //         });\n// //       })\n\n// //       .call(\n// //         d3\n// //           .drag()\n// //           .on(\"start\", (event) => {\n// //             if (!event.active) simulation.alphaTarget(0.3).restart();\n// //             event.subject.fx = event.subject.x;\n// //             event.subject.fy = event.subject.y;\n// //           })\n// //           .on(\"drag\", (event) => {\n// //             event.subject.fx = event.x;\n// //             event.subject.fy = event.y;\n// //           })\n// //           .on(\"end\", (event) => {\n// //             if (!event.active) simulation.alphaTarget(0);\n// //             event.subject.fx = null;\n// //             event.subject.fy = null;\n// //           })\n// //       );\n\n// //     // Add tooltips\n// //     // node.append(\"title\").text((d) => d.id);\n// //     node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n// //   }, [jsonData, setHoveredCoordinates]);\n\n// //   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// // };\n\n// // export default HierarchicalGraph;\n\n// // _______________________________________________________QUANDRANT POSITIONING WITH SIMULATION_________________\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || jsonData.length === 0) return;\n\n//     // Dynamically extract coordinate keys (dimensions)\n//     const coordinateKeys = Object.keys(jsonData[0]).filter(\n//       (key) => key !== \"Cluster\" && key !== \"Bead\"\n//     );\n\n//     // Helper to calculate centroid\n//     const calculateCentroid = (points) => {\n//       const n = points.length;\n//       const sum = points.reduce((acc, point) => {\n//         coordinateKeys.forEach((key) => {\n//           acc[key] = (acc[key] || 0) + point[key];\n//         });\n//         return acc;\n//       }, {});\n//       // Compute average for each dimension\n//       Object.keys(sum).forEach((key) => (sum[key] /= n));\n//       return sum;\n//     };\n//     // Assign bit vectors based on coordinate keys (planes)\n//     const assignBitVector = (point) => {\n//       return coordinateKeys\n//         .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n//         .join(\"\");\n//     };\n//     // Parse and process data\n//     const clusters = d3.group(jsonData, (d) => d.Cluster);\n//     const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n//     // Root centroid\n//     const rootCentroid = calculateCentroid(jsonData);\n\n//     // Cluster centroids\n//     const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n//       cluster,\n//       centroid: calculateCentroid(points),\n//     }));\n\n//     // Bead centroids\n//     const beadCentroids = Array.from(beads, ([key, points]) => {\n//       const [cluster, bead] = key.split(\"-\");\n//       return {\n//         cluster,\n//         bead,\n//         centroid: calculateCentroid(points),\n//         points,\n//       };\n//     });\n\n//     // Build hierarchical links\n//     const links = [];\n//     const nodes = [\n//       { id: \"root\", ...rootCentroid, bitVector: assignBitVector(rootCentroid) }, // Root node\n//     ];\n\n//     // Add cluster nodes and links\n//     clusterCentroids.forEach(({ cluster, centroid }) => {\n//       nodes.push({\n//         id: `cluster-${cluster}`,\n//         ...centroid,\n//         bitVector: assignBitVector(centroid),\n//       });\n//       links.push({ source: \"root\", target: `cluster-${cluster}` });\n//     });\n\n//     // Add bead nodes and links\n//     beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n//       nodes.push({\n//         id: `bead-${cluster}-${bead}`,\n//         ...centroid,\n//         bitVector: assignBitVector(centroid),\n//       });\n//       links.push({\n//         source: `cluster-${cluster}`,\n//         target: `bead-${cluster}-${bead}`,\n//       });\n\n//       // Add individual points and links\n//       points.forEach((point, index) => {\n//         const pointId = `point-${cluster}-${bead}-${index}`;\n//         nodes.push({\n//           id: pointId,\n//           ...point,\n//           bitVector: assignBitVector(point),\n//         });\n//         links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n//       });\n//     });\n\n//     // Set up container dimensions\n//     const container = d3.select(graphRef.current.parentNode);\n//     const width = container.node().getBoundingClientRect().width;\n//     const height = container.node().getBoundingClientRect().height;\n//     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//     const svg = d3\n//       .select(graphRef.current)\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n//       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Calculate the number of quadrants based on the number of dimensions\n//     const numDimensions = coordinateKeys.length;\n//     const numQuadrants = 2 ** numDimensions;\n\n//     // Calculate initial positions based on bit vectors\n//     nodes.forEach((node) => {\n//       if (node.bitVector) {\n//         // Convert the bit vector to a decimal number\n//         const quadrantIndex = parseInt(node.bitVector, 2);\n\n//         // Calculate quadrant size and starting position\n//         const numRows = Math.ceil(Math.sqrt(numQuadrants));\n//         const numCols = Math.ceil(numQuadrants / numRows);\n//         const quadrantWidth = (width - margin.left - margin.right) / numCols;\n//         const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n\n//         const row = Math.floor(quadrantIndex / numCols);\n//         const col = quadrantIndex % numCols;\n\n//         const x = col * quadrantWidth + quadrantWidth / 2 + margin.left;\n//         const y = row * quadrantHeight + quadrantHeight / 2 + margin.top;\n\n//         node.x = x;\n//         node.y = y;\n//       }\n//     });\n\n//     // Force simulation\n//     const simulation = d3\n//       .forceSimulation(nodes)\n//       .force(\n//         \"link\",\n//         d3\n//           .forceLink(links)\n//           .id((d) => d.id)\n//           .distance(-10)\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(1))\n//       .force(\"center\", d3.forceCenter(width / 2, height / 2))\n//       .force(\n//         \"collision\",\n//         d3.forceCollide().radius((d) => (d.id.startsWith(\"point\") ? 10 : 15))\n//       )\n//       .force(\"charge\", d3.forceManyBody().strength(3))\n//       .force(\n//         \"center\",\n//         d3.forceCenter(\n//           (width - margin.left - margin.right) / 2,\n//           (height - margin.top - margin.bottom) / 2\n//         )\n//       )\n//       .on(\"tick\", () => {\n//         link\n//           .attr(\"x1\", (d) => clamp(d.source.x, 0, width))\n//           .attr(\"y1\", (d) => clamp(d.source.y, 0, height))\n//           .attr(\"x2\", (d) => clamp(d.target.x, 0, width))\n//           .attr(\"y2\", (d) => clamp(d.target.y, 0, height));\n\n//         node\n//           .attr(\"cx\", (d) => clamp(d.x, 0, width))\n//           .attr(\"cy\", (d) => clamp(d.y, 0, height));\n//       });\n\n//     // Clamp function to restrict within bounds\n//     const clamp = (value, min, max) => Math.max(min, Math.min(value, max));\n\n//     // Draw links\n//     const link = svg\n//       .append(\"g\")\n//       .attr(\"class\", \"links\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"stroke\", \"#aaa\")\n//       .attr(\"stroke-width\", 2);\n\n//     // Draw nodes\n//     const node = svg\n//       .append(\"g\")\n//       .attr(\"class\", \"nodes\")\n//       .selectAll(\"circle\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"r\", 5)\n//       .attr(\"fill\", (d) => {\n//         if (d.id === \"root\") return \"red\";\n//         if (d.id.startsWith(\"cluster\")) return \"blue\";\n//         if (d.id.startsWith(\"bead\")) return \"green\";\n//         return \"gray\";\n//       })\n//       .on(\"mouseover\", (event, d) => {\n//         // Create an object to hold all coordinate values\n//         const coordinates = {};\n\n//         // Add all coordinate dimensions to the object (excluding non-coordinate dimensions like cluster and bead)\n//         coordinateKeys.forEach((key) => {\n//           coordinates[key] = d[key]; // Assuming each node has the corresponding dimension in d\n//         });\n\n//         // Pass the full coordinates to the parent component\n//         setHoveredCoordinates({\n//           ...coordinates,\n//           id: d.id,\n//           bitVector: d.bitVector,\n//         });\n//       })\n//       .call(\n//         d3\n//           .drag()\n//           .on(\"start\", (event) => {\n//             if (!event.active) simulation.alphaTarget(0.3).restart();\n//             event.subject.fx = event.subject.x;\n//             event.subject.fy = event.subject.y;\n//           })\n//           .on(\"drag\", (event) => {\n//             event.subject.fx = event.x;\n//             event.subject.fy = event.y;\n//           })\n//           .on(\"end\", (event) => {\n//             if (!event.active) simulation.alphaTarget(0);\n//             event.subject.fx = null;\n//             event.subject.fy = null;\n//           })\n//       );\n\n//     // Add tooltips\n//     // node.append(\"title\").text((d) => d.id);\n//     node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || jsonData.length === 0) return;\n\n    // Dynamically extract coordinate keys (dimensions)\n    const coordinateKeys = Object.keys(jsonData[0]).filter(\n      (key) => key !== \"Cluster\" && key !== \"Bead\"\n    );\n\n    // Helper to calculate centroid\n    const calculateCentroid = (points) => {\n      const n = points.length;\n      const sum = points.reduce((acc, point) => {\n        coordinateKeys.forEach((key) => {\n          acc[key] = (acc[key] || 0) + point[key];\n        });\n        return acc;\n      }, {});\n      // Compute average for each dimension\n      Object.keys(sum).forEach((key) => (sum[key] /= n));\n      return sum;\n    };\n    // Assign bit vectors based on coordinate keys (planes)\n    const assignBitVector = (point) => {\n      return coordinateKeys\n        .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n        .join(\"\");\n    };\n    // Parse and process data\n    const clusters = d3.group(jsonData, (d) => d.Cluster);\n    const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n    // Root centroid\n    const rootCentroid = calculateCentroid(jsonData);\n\n    // Cluster centroids\n    const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n      cluster,\n      centroid: calculateCentroid(points),\n    }));\n\n    // Bead centroids\n    const beadCentroids = Array.from(beads, ([key, points]) => {\n      const [cluster, bead] = key.split(\"-\");\n      return {\n        cluster,\n        bead,\n        centroid: calculateCentroid(points),\n        points,\n      };\n    });\n\n    // Build hierarchical links\n    const links = [];\n    const nodes = [\n      { id: \"root\", ...rootCentroid, bitVector: assignBitVector(rootCentroid) }, // Root node\n    ];\n\n    // Add cluster nodes and links\n    clusterCentroids.forEach(({ cluster, centroid }) => {\n      nodes.push({\n        id: `cluster-${cluster}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid),\n      });\n      links.push({ source: \"root\", target: `cluster-${cluster}` });\n    });\n\n    // Add bead nodes and links\n    beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n      nodes.push({\n        id: `bead-${cluster}-${bead}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid),\n      });\n      links.push({\n        source: `cluster-${cluster}`,\n        target: `bead-${cluster}-${bead}`,\n      });\n\n      // Add individual points and links\n      points.forEach((point, index) => {\n        const pointId = `point-${cluster}-${bead}-${index}`;\n        nodes.push({\n          id: pointId,\n          ...point,\n          bitVector: assignBitVector(point),\n        });\n        links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n      });\n    });\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n    const svg = d3\n      .select(graphRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Calculate the number of quadrants based on the number of dimensions\n    const numDimensions = coordinateKeys.length;\n    const numQuadrants = 2 ** numDimensions;\n\n    // Calculate initial positions based on bit vectors\n    nodes.forEach((node) => {\n      if (node.bitVector) {\n        // Convert the bit vector to a decimal number\n        const quadrantIndex = parseInt(node.bitVector, 2);\n\n        // Calculate quadrant size and starting position\n        const numRows = Math.ceil(Math.sqrt(numQuadrants));\n        const numCols = Math.ceil(numQuadrants / numRows);\n        const quadrantWidth = (width - margin.left - margin.right) / numCols;\n        const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n\n        const row = Math.floor(quadrantIndex / numCols);\n        const col = quadrantIndex % numCols;\n\n        const x = col * quadrantWidth + quadrantWidth / 2 + margin.left;\n        const y = row * quadrantHeight + quadrantHeight / 2 + margin.top;\n        node.x = x;\n        node.y = y;\n      }\n    });\n\n    // Draw grid lines\n    const numRows = Math.ceil(Math.sqrt(numQuadrants));\n    const numCols = Math.ceil(numQuadrants / numRows);\n    const quadrantWidth = (width - margin.left - margin.right) / numCols;\n    const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n\n    const grid = svg.append(\"g\").attr(\"class\", \"grid\");\n\n    // Draw vertical lines\n    for (let i = 0; i <= numCols; i++) {\n      grid\n        .append(\"line\")\n        .attr(\"x1\", margin.left + i * quadrantWidth)\n        .attr(\"y1\", margin.top)\n        .attr(\"x2\", margin.left + i * quadrantWidth)\n        .attr(\"y2\", height - margin.bottom)\n        .attr(\"stroke\", \"#ddd\")\n        .attr(\"stroke-width\", 1);\n    }\n\n    // Draw horizontal lines\n    for (let i = 0; i <= numRows; i++) {\n      grid\n        .append(\"line\")\n        .attr(\"x1\", margin.left)\n        .attr(\"y1\", margin.top + i * quadrantHeight)\n        .attr(\"x2\", width - margin.right)\n        .attr(\"y2\", margin.top + i * quadrantHeight)\n        .attr(\"stroke\", \"#ddd\")\n        .attr(\"stroke-width\", 1);\n    }\n\n    // Draw links\n    const link = svg\n      .append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .attr(\"x1\", (d) => d.source.x)\n      .attr(\"y1\", (d) => d.source.y)\n      .attr(\"x2\", (d) => d.target.x)\n      .attr(\"y2\", (d) => d.target.y)\n      .attr(\"stroke\", \"#aaa\")\n      .attr(\"stroke-width\", 2);\n\n    // Draw nodes\n    const node = svg\n      .append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 5)\n      .attr(\"cx\", (d) => d.x)\n      .attr(\"cy\", (d) => d.y)\n      .attr(\"fill\", (d) => {\n        if (d.id === \"root\") return \"red\";\n        if (d.id.startsWith(\"cluster\")) return \"blue\";\n        if (d.id.startsWith(\"bead\")) return \"green\";\n        return \"gray\";\n      })\n\n      .on(\"mouseover\", (event, d) => {\n        const coordinates = {};\n        coordinateKeys.forEach((key) => {\n          coordinates[key] = d[key];\n        });\n\n        setHoveredCoordinates({\n          ...coordinates,\n          id: d.id,\n          bitVector: d.bitVector,\n        });\n      })\n      .call(\n        d3\n          .drag()\n          .on(\"start\", (event) => {\n            event.subject.fx = event.subject.x;\n            event.subject.fy = event.subject.y;\n          })\n          .on(\"drag\", (event) => {\n            event.subject.fx = event.x;\n            event.subject.fy = event.y;\n          })\n          .on(\"end\", (event) => {\n            event.subject.fx = null;\n            event.subject.fy = null;\n          })\n      );\n\n    // Add tooltips\n    node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n};\n\nexport default HierarchicalGraph;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}