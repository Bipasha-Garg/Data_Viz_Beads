{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility,\n  width,\n  height\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const margin = 20;\n    const maxRadius = Math.min(width || 800, height || 800) / 2 - margin;\n    const g = svg.attr(\"width\", width || 800).attr(\"height\", height || 800).append(\"g\").attr(\"transform\", `translate(${(width || 800) / 2}, ${(height || 800) / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const calculateProportionalAngles = () => {\n      if (pointsData.length === 0) {\n        console.error(\"No points data available\");\n        return {\n          ringAngles: [],\n          sectorMap: new Map()\n        };\n      }\n      const lastRing = pointsData[pointsData.length - 1];\n      const lastRingPoints = lastRing.points || [];\n      const sectorsCount = Math.max(1, Math.round(2 ** lastRing.dimensions));\n      const sectorCounts = new Map();\n      for (let i = 0; i < sectorsCount; i++) {\n        sectorCounts.set(i, 0);\n      }\n      lastRingPoints.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2) || 0, sectorsCount - 1);\n        sectorCounts.set(sectorIndex, (sectorCounts.get(sectorIndex) || 0) + 1);\n      });\n      const totalAngle = 2 * Math.PI;\n      const minAngle = Math.PI / 180;\n      const totalPoints = Math.max(1, lastRingPoints.length);\n      const remainingAngle = totalAngle - sectorsCount * minAngle;\n      const sectorAnglesMap = new Map();\n      let currentAngle = Math.PI / 2;\n      sectorCounts.forEach((count, sector) => {\n        const angle = count > 0 ? minAngle + count / totalPoints * remainingAngle : minAngle;\n        sectorAnglesMap.set(sector, {\n          startAngle: currentAngle,\n          endAngle: currentAngle + angle,\n          angleWidth: angle\n        });\n        currentAngle += angle;\n      });\n      const ringAngles = [];\n      for (let i = 0; i < pointsData.length; i++) {\n        const sectorCount = Math.max(1, Math.round(2 ** (i + 1)));\n        const angles = [];\n        let angleStart = Math.PI / 2;\n        if (i === pointsData.length - 1) {\n          // Outer ring uses the calculated angles directly\n          for (let j = 0; j < sectorCount; j++) {\n            const angleData = sectorAnglesMap.get(j) || {\n              angleWidth: minAngle\n            };\n            angles.push(angleData.angleWidth);\n          }\n        } else {\n          // Inner rings aggregate from outer ring\n          for (let j = 0; j < sectorCount; j++) {\n            var _sectorAnglesMap$get, _sectorAnglesMap$get2;\n            const childSector1 = j * 2;\n            const childSector2 = j * 2 + 1;\n            const angle1 = ((_sectorAnglesMap$get = sectorAnglesMap.get(childSector1)) === null || _sectorAnglesMap$get === void 0 ? void 0 : _sectorAnglesMap$get.angleWidth) || minAngle;\n            const angle2 = ((_sectorAnglesMap$get2 = sectorAnglesMap.get(childSector2)) === null || _sectorAnglesMap$get2 === void 0 ? void 0 : _sectorAnglesMap$get2.angleWidth) || minAngle;\n            angles.push(angle1 + angle2);\n          }\n        }\n        ringAngles.push(angles);\n      }\n      return {\n        ringAngles,\n        sectorMap: sectorAnglesMap\n      };\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const anglePerSector = 2 * Math.PI / sectors;\n        let currentAngle = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + anglePerSector;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, Array(sectors).fill(anglePerSector));\n      });\n    };\n    const renderProportionalView = () => {\n      const {\n        ringAngles\n      } = calculateProportionalAngles();\n      if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || arr.length === 0)) {\n        console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n        renderNormalView();\n        return;\n      }\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        let currentAngle = Math.PI / 2;\n        ringAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n      });\n    };\n    const renderPoints = (index, innerRadius, outerRadius, angles) => {\n      let currentAngle = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2) || 0, angles.length - 1);\n        const startAngle = currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0);\n        const angleWidth = angles[bitVectorIndex];\n        const centerAngle = startAngle + angleWidth / 2;\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: pointsData[index].key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            Point_IDs: pointIds,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: height || \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","width","height","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateProportionalAngles","ringAngles","sectorMap","Map","lastRing","lastRingPoints","sectorsCount","max","round","sectorCounts","set","forEach","point","pointData","entries","filter","bitVector","coord","join","parseInt","get","totalAngle","PI","minAngle","totalPoints","remainingAngle","sectorAnglesMap","currentAngle","count","sector","angle","startAngle","endAngle","angleWidth","sectorCount","angles","angleStart","j","angleData","push","_sectorAnglesMap$get","_sectorAnglesMap$get2","childSector1","childSector2","angle1","angle2","renderNormalView","innerRadius","outerRadius","sectors","anglePerSector","arc","text","renderPoints","fill","renderProportionalView","some","arr","bitVectorIndex","slice","reduce","centerAngle","minRadius","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","on","event","pointIds","associatedLabels","labelText","html","toFixed","Point_IDs","pageY","pageX","positions","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility, width, height }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const margin = 20;\n    const maxRadius = Math.min(width || 800, height || 800) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width || 800)\n      .attr(\"height\", height || 800)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${(width || 800) / 2}, ${(height || 800) / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    const calculateProportionalAngles = () => {\n      if (pointsData.length === 0) {\n        console.error(\"No points data available\");\n        return { ringAngles: [], sectorMap: new Map() };\n      }\n\n      const lastRing = pointsData[pointsData.length - 1];\n      const lastRingPoints = lastRing.points || [];\n      const sectorsCount = Math.max(1, Math.round(2 ** lastRing.dimensions));\n\n      const sectorCounts = new Map();\n      for (let i = 0; i < sectorsCount; i++) {\n        sectorCounts.set(i, 0);\n      }\n\n      lastRingPoints.forEach((point) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2) || 0, sectorsCount - 1);\n        sectorCounts.set(sectorIndex, (sectorCounts.get(sectorIndex) || 0) + 1);\n      });\n\n      const totalAngle = 2 * Math.PI;\n      const minAngle = Math.PI / 180;\n      const totalPoints = Math.max(1, lastRingPoints.length);\n      const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n      const sectorAnglesMap = new Map();\n      let currentAngle = Math.PI / 2;\n\n      sectorCounts.forEach((count, sector) => {\n        const angle = count > 0\n          ? minAngle + (count / totalPoints) * remainingAngle\n          : minAngle;\n        sectorAnglesMap.set(sector, {\n          startAngle: currentAngle,\n          endAngle: currentAngle + angle,\n          angleWidth: angle\n        });\n        currentAngle += angle;\n      });\n\n      const ringAngles = [];\n      for (let i = 0; i < pointsData.length; i++) {\n        const sectorCount = Math.max(1, Math.round(2 ** (i + 1)));\n        const angles = [];\n        let angleStart = Math.PI / 2;\n\n        if (i === pointsData.length - 1) {\n          // Outer ring uses the calculated angles directly\n          for (let j = 0; j < sectorCount; j++) {\n            const angleData = sectorAnglesMap.get(j) || { angleWidth: minAngle };\n            angles.push(angleData.angleWidth);\n          }\n        } else {\n          // Inner rings aggregate from outer ring\n          for (let j = 0; j < sectorCount; j++) {\n            const childSector1 = j * 2;\n            const childSector2 = j * 2 + 1;\n            const angle1 = sectorAnglesMap.get(childSector1)?.angleWidth || minAngle;\n            const angle2 = sectorAnglesMap.get(childSector2)?.angleWidth || minAngle;\n            angles.push(angle1 + angle2);\n          }\n        }\n        ringAngles.push(angles);\n      }\n\n      return { ringAngles, sectorMap: sectorAnglesMap };\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const anglePerSector = (2 * Math.PI) / sectors;\n\n        let currentAngle = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + anglePerSector;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, Array(sectors).fill(anglePerSector));\n      });\n    };\n\n    const renderProportionalView = () => {\n      const { ringAngles } = calculateProportionalAngles();\n\n      if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || arr.length === 0)) {\n        console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n        renderNormalView();\n        return;\n      }\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        let currentAngle = Math.PI / 2;\n\n        ringAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n      });\n    };\n\n    const renderPoints = (index, innerRadius, outerRadius, angles) => {\n      let currentAngle = Math.PI / 2;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2) || 0, angles.length - 1);\n\n        const startAngle = currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0);\n        const angleWidth = angles[bitVectorIndex];\n        const centerAngle = startAngle + angleWidth / 2;\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, Point_IDs: pointIds, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode, width, height]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: height || \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}