{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const pointPositions = {};\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getSectorColor = (index, sectorIndex) => {\n      const lastBit = sectorIndex % 2 === 1 ? \"blue\" : \"red\";\n      return d3.hsl(lastBit === \"blue\" ? 240 : 0, 1, (index + 1) / 10);\n    };\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      //   const colorScale = d3\n      //     .scaleOrdinal()\n      //     .range([\"#FFD700\",\n      // \"#FF69B4\",\n      // \"#33B5E5\",\n      // \"#32CD32\",\n      // \"#FF4500\",\n      // \"#8A2BE2\",\n      // \"#00CED1\",\n      // \"#DC143C\",\n      // \"#1E90FF\",\n      // \"#FF8C00\",\n      // \"#ADFF2F\",\n      // \"#C71585\",\n      // \"#20B2AA\",\n      // \"#8B4513\",\n      // \"#7B68EE\",\n      // ]);\n      //   const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const nextAngle = 2 * Math.PI * (i + 1) / sectors;\n        const color = getSectorColor(index, i);\n      }\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n      }\n      subspace.points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const totalPoints = subspace.points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: subspace.key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`);\n          setHoveredCoordinates(point);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", \"red\").attr(\"stroke-width\", 0.3).on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"800px\",\n      height: \"800px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","pointPositions","tooltip","style","getSectorColor","index","sectorIndex","lastBit","hsl","forEach","subspace","innerRadius","outerRadius","sectors","i","angle","PI","nextAngle","color","subspaceColor","x1","cos","y1","sin","x2","y2","point","pointData","entries","filter","bitVector","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","centerAngle","totalPoints","clusterFactor","overlapRadius","x","y","Point_ID","id","push","on","event","pointIds","html","toFixed","pageY","pageX","pointId","positions","zoom","transform","call","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const pointPositions = {}; \n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n    const getSectorColor = (index, sectorIndex) => {\n      const lastBit = sectorIndex % 2 === 1 ? \"blue\" : \"red\";\n      return d3.hsl(lastBit === \"blue\" ? 240 : 0, 1, (index + 1) / 10);\n    };\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n    //   const colorScale = d3\n    //     .scaleOrdinal()\n    //     .range([\"#FFD700\",\n    // \"#FF69B4\",\n    // \"#33B5E5\",\n    // \"#32CD32\",\n    // \"#FF4500\",\n    // \"#8A2BE2\",\n    // \"#00CED1\",\n    // \"#DC143C\",\n    // \"#1E90FF\",\n    // \"#FF8C00\",\n    // \"#ADFF2F\",\n    // \"#C71585\",\n    // \"#20B2AA\",\n    // \"#8B4513\",\n    // \"#7B68EE\",\n    // ]);\n      //   const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n      \n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const nextAngle = (2 * Math.PI * (i + 1)) / sectors;\n        const color = getSectorColor(index, i);\n      }\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 0.25)\n        .style(\"pointer-events\", \"none\");\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", x2)\n          .attr(\"y1\", y2)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.25)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      subspace.points.forEach((point,i) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n       \n       \n       \n        const centerAngle = (angleStart + angleEnd) / 2;\n       \n\n        const totalPoints = subspace.points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n                  2\n                )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n              );\n            setHoveredCoordinates(point);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 0.3)\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    \n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}