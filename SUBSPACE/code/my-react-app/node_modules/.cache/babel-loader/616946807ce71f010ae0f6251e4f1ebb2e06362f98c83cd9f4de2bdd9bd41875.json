{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import HierarchicalGraph from \"./JsonDisplay\";\n\n// const App = () => {\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"\");\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hoveredCoordinates, setHoveredCoordinates] = useState(null);\n//   const [labelsData, setLabelsData] = useState(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n//   const legendRef = useRef(null); // Initialize legendRef\n\n//   useEffect(() => {\n//     if (labelsData && legendRef.current) {\n//       // Clear any existing SVG content in the legend container\n//       d3.select(legendRef.current).select(\"svg\").remove();\n\n//       const labelEntries = Object.keys(labelsData.labels || {});\n//       const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelEntries);\n\n//       // Create an SVG element for the legend\n//       const legend = d3.select(legendRef.current)\n//         .append(\"svg\")\n//         .attr(\"width\", 200)\n//         .attr(\"height\", labelEntries.length * 25 + 20);\n\n//       // Add rectangles for each label\n//       legend.selectAll(\"rect\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"rect\")\n//         .attr(\"x\", 0)\n//         .attr(\"y\", (d, i) => i * 25)\n//         .attr(\"width\", 20)\n//         .attr(\"height\", 20)\n//         .attr(\"fill\", d => colorScale(d));\n\n//       // Add text for each label\n//       legend.selectAll(\"text\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"text\")\n//         .attr(\"x\", 30)\n//         .attr(\"y\", (d, i) => i * 25 + 15)\n//         .text(d => d)\n//         .attr(\"font-size\", \"12px\")\n//         .attr(\"alignment-baseline\", \"middle\");\n//     }\n//   }, [labelsData]); // Re-run this effect when labelsData changes\n\n//   const handleFileSelect = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setSelectedFile(file);\n//       setFileName(file.name);\n//       setError(null);\n//     }\n//   };\n\n//   const handleUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) {\n//       setError(\"Please select a file first\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!uploadResponse.ok) {\n//         throw new Error(\"Upload failed\");\n//       }\n\n//       const result = await uploadResponse.json();\n//       console.log(\"Upload successful:\", result);\n\n//       const jsonResponse = await fetch(\n//         `http://127.0.0.1:5000/uploads/${result.json_filename}`\n//       );\n//       const processedData = await jsonResponse.json();\n\n//       const labelsResponse = await fetch(\n//         `http://127.0.0.1:5000/uploads/labels_file.json`\n//       );\n//       const processedLabelsData = await labelsResponse.json();\n\n//       setJsonData(processedData);\n//       setLabelsData(processedLabelsData);\n\n//       // Initialize ring visibility\n//       const subspaces = Object.keys(processedData);\n//       subspaces.sort((a, b) => a.length - b.length);\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({\n//       ...prev,\n//       [key]: !prev[key],\n//     }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData || {});\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n\n//   return (\n//     <div className=\"h-screen bg-gray-100 p-4 sm:p-6 flex flex-col sm:flex-row\">\n//       {/* Left Dashboard */}\n//       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg mb-4 sm:mb-0 sm:mr-4\">\n//         <h1 className=\"text-xl font-bold mb-4\">File Upload</h1>\n//         <div className=\"mb-4\">\n//           <input\n//             type=\"file\"\n//             accept=\".csv\"\n//             onChange={handleFileSelect}\n//             className=\"mb-2 w-full\"\n//             disabled={isLoading}\n//           />\n//           {fileName && (\n//             <div className=\"mt-2 p-2 bg-blue-50 rounded\">\n//               Selected file: <span className=\"font-semibold\">{fileName}</span>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           type=\"button\"\n//           onClick={handleUpload}\n//           disabled={!selectedFile || isLoading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded w-full\"\n//         >\n//           {isLoading ? \"Processing...\" : \"Upload\"}\n//         </button>\n//         {error && <div className=\"mt-2 text-red-500\">{error}</div>}\n\n//         <div className=\"mt-6\">\n//           <h2 className=\"text-xl font-bold mb-4\">Subspace Rings</h2>\n//           <button\n//             onClick={toggleAllRingsVisibility}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded w-full mb-4\"\n//           >\n//             {Object.values(ringVisibility).every((v) => v)\n//               ? \"Collapse All Rings\"\n//               : \"Expand All Rings\"}\n//           </button>\n//           {Object.keys(jsonData || {}).map((key) => (\n//             <div key={key} className=\"mb-2\">\n//               <button\n//                 onClick={() => toggleRingVisibility(key)}\n//                 className=\"w-full p-2 text-left rounded\"\n//                 style={{\n//                   backgroundColor: ringVisibility[key] ? \"#fca5a5\" : \"lightgray\",\n//                   border: \"1px solid #ccc\",\n//                 }}\n//               >\n//                 {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//               </button>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Visualization Area */}\n//       <div className=\"flex-1 flex flex-col bg-white shadow rounded-lg p-4 mb-4 sm:mb-0 sm:mr-4\">\n//         <h2 className=\"text-2xl font-bold mb-4\">Visualization</h2>\n//         <div className=\"flex-1 flex justify-center items-center\">\n//           {jsonData && (\n//             <HierarchicalGraph\n//               jsonData={jsonData}\n//               labelsData={labelsData}\n//               setHoveredCoordinates={setHoveredCoordinates}\n//               ringVisibility={ringVisibility}\n//             />\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Right Dashboard */}\n//       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg\">\n\n//         <h2 className=\"text-xl font-bold mb-4\">Point Info</h2>\n\n//         {/* Labels Legend */}\n//         <div ref={legendRef} className=\"mt-4\"></div>\n//         {hoveredCoordinates && (\n//           <div className=\"p-2 bg-green-50 rounded text-lg\">\n//             <strong>Hovered Node:</strong>\n//             <div>ID: {hoveredCoordinates.Point_IDs}</div>\n//             {Object.keys(hoveredCoordinates)\n//               .filter((key) => key !== \"id\")\n//               .map((key) => (\n//                 <div key={key}>\n//                   <strong>{key}:</strong>{\" \"}\n//                   {hoveredCoordinates[key].toFixed\n//                     ? hoveredCoordinates[key].toFixed(2)\n//                     : hoveredCoordinates[key]}\n//                 </div>\n//               ))}\n//           </div>\n//         )}\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\\","map":{"version":3,"names":[],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/App.js"],"sourcesContent":["  // import React, { useState, useEffect, useRef } from \"react\";\n  // import * as d3 from \"d3\";\n  // import HierarchicalGraph from \"./JsonDisplay\";\n\n  // const App = () => {\n  //   const [selectedFile, setSelectedFile] = useState(null);\n  //   const [fileName, setFileName] = useState(\"\");\n  //   const [jsonData, setJsonData] = useState(null);\n  //   const [error, setError] = useState(null);\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [hoveredCoordinates, setHoveredCoordinates] = useState(null);\n  //   const [labelsData, setLabelsData] = useState(null);\n  //   const [ringVisibility, setRingVisibility] = useState({});\n  //   const legendRef = useRef(null); // Initialize legendRef\n\n  //   useEffect(() => {\n  //     if (labelsData && legendRef.current) {\n  //       // Clear any existing SVG content in the legend container\n  //       d3.select(legendRef.current).select(\"svg\").remove();\n\n  //       const labelEntries = Object.keys(labelsData.labels || {});\n  //       const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelEntries);\n\n  //       // Create an SVG element for the legend\n  //       const legend = d3.select(legendRef.current)\n  //         .append(\"svg\")\n  //         .attr(\"width\", 200)\n  //         .attr(\"height\", labelEntries.length * 25 + 20);\n\n  //       // Add rectangles for each label\n  //       legend.selectAll(\"rect\")\n  //         .data(labelEntries)\n  //         .enter()\n  //         .append(\"rect\")\n  //         .attr(\"x\", 0)\n  //         .attr(\"y\", (d, i) => i * 25)\n  //         .attr(\"width\", 20)\n  //         .attr(\"height\", 20)\n  //         .attr(\"fill\", d => colorScale(d));\n\n  //       // Add text for each label\n  //       legend.selectAll(\"text\")\n  //         .data(labelEntries)\n  //         .enter()\n  //         .append(\"text\")\n  //         .attr(\"x\", 30)\n  //         .attr(\"y\", (d, i) => i * 25 + 15)\n  //         .text(d => d)\n  //         .attr(\"font-size\", \"12px\")\n  //         .attr(\"alignment-baseline\", \"middle\");\n  //     }\n  //   }, [labelsData]); // Re-run this effect when labelsData changes\n\n  //   const handleFileSelect = (e) => {\n  //     const file = e.target.files[0];\n  //     if (file) {\n  //       setSelectedFile(file);\n  //       setFileName(file.name);\n  //       setError(null);\n  //     }\n  //   };\n\n  //   const handleUpload = async (e) => {\n  //     e.preventDefault();\n  //     if (!selectedFile) {\n  //       setError(\"Please select a file first\");\n  //       return;\n  //     }\n\n  //     setIsLoading(true);\n  //     const formData = new FormData();\n  //     formData.append(\"file\", selectedFile);\n\n  //     try {\n  //       const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n  //         method: \"POST\",\n  //         body: formData,\n  //       });\n\n  //       if (!uploadResponse.ok) {\n  //         throw new Error(\"Upload failed\");\n  //       }\n\n  //       const result = await uploadResponse.json();\n  //       console.log(\"Upload successful:\", result);\n\n  //       const jsonResponse = await fetch(\n  //         `http://127.0.0.1:5000/uploads/${result.json_filename}`\n  //       );\n  //       const processedData = await jsonResponse.json();\n\n  //       const labelsResponse = await fetch(\n  //         `http://127.0.0.1:5000/uploads/labels_file.json`\n  //       );\n  //       const processedLabelsData = await labelsResponse.json();\n\n  //       setJsonData(processedData);\n  //       setLabelsData(processedLabelsData);\n\n  //       // Initialize ring visibility\n  //       const subspaces = Object.keys(processedData);\n  //       subspaces.sort((a, b) => a.length - b.length);\n  //       const initialVisibility = subspaces.reduce((acc, key) => {\n  //         acc[key] = true;\n  //         return acc;\n  //       }, {});\n  //       setRingVisibility(initialVisibility);\n  //     } catch (err) {\n  //       setError(err.message);\n  //     } finally {\n  //       setIsLoading(false);\n  //     }\n  //   };\n\n  //   const toggleRingVisibility = (key) => {\n  //     setRingVisibility((prev) => ({\n  //       ...prev,\n  //       [key]: !prev[key],\n  //     }));\n  //   };\n\n  //   const toggleAllRingsVisibility = () => {\n  //     const subspaces = Object.keys(jsonData || {});\n  //     subspaces.sort((a, b) => a.length - b.length);\n\n  //     const newVisibility = subspaces.reduce((acc, key, index) => {\n  //       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n  //       return acc;\n  //     }, {});\n  //     setRingVisibility(newVisibility);\n  //   };\n\n  //   return (\n  //     <div className=\"h-screen bg-gray-100 p-4 sm:p-6 flex flex-col sm:flex-row\">\n  //       {/* Left Dashboard */}\n  //       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg mb-4 sm:mb-0 sm:mr-4\">\n  //         <h1 className=\"text-xl font-bold mb-4\">File Upload</h1>\n  //         <div className=\"mb-4\">\n  //           <input\n  //             type=\"file\"\n  //             accept=\".csv\"\n  //             onChange={handleFileSelect}\n  //             className=\"mb-2 w-full\"\n  //             disabled={isLoading}\n  //           />\n  //           {fileName && (\n  //             <div className=\"mt-2 p-2 bg-blue-50 rounded\">\n  //               Selected file: <span className=\"font-semibold\">{fileName}</span>\n  //             </div>\n  //           )}\n  //         </div>\n  //         <button\n  //           type=\"button\"\n  //           onClick={handleUpload}\n  //           disabled={!selectedFile || isLoading}\n  //           className=\"bg-blue-500 text-white px-4 py-2 rounded w-full\"\n  //         >\n  //           {isLoading ? \"Processing...\" : \"Upload\"}\n  //         </button>\n  //         {error && <div className=\"mt-2 text-red-500\">{error}</div>}\n\n  //         <div className=\"mt-6\">\n  //           <h2 className=\"text-xl font-bold mb-4\">Subspace Rings</h2>\n  //           <button\n  //             onClick={toggleAllRingsVisibility}\n  //             className=\"bg-blue-500 text-white px-4 py-2 rounded w-full mb-4\"\n  //           >\n  //             {Object.values(ringVisibility).every((v) => v)\n  //               ? \"Collapse All Rings\"\n  //               : \"Expand All Rings\"}\n  //           </button>\n  //           {Object.keys(jsonData || {}).map((key) => (\n  //             <div key={key} className=\"mb-2\">\n  //               <button\n  //                 onClick={() => toggleRingVisibility(key)}\n  //                 className=\"w-full p-2 text-left rounded\"\n  //                 style={{\n  //                   backgroundColor: ringVisibility[key] ? \"#fca5a5\" : \"lightgray\",\n  //                   border: \"1px solid #ccc\",\n  //                 }}\n  //               >\n  //                 {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n  //               </button>\n  //             </div>\n  //           ))}\n  //         </div>\n  //       </div>\n\n  //       {/* Visualization Area */}\n  //       <div className=\"flex-1 flex flex-col bg-white shadow rounded-lg p-4 mb-4 sm:mb-0 sm:mr-4\">\n  //         <h2 className=\"text-2xl font-bold mb-4\">Visualization</h2>\n  //         <div className=\"flex-1 flex justify-center items-center\">\n  //           {jsonData && (\n  //             <HierarchicalGraph\n  //               jsonData={jsonData}\n  //               labelsData={labelsData}\n  //               setHoveredCoordinates={setHoveredCoordinates}\n  //               ringVisibility={ringVisibility}\n  //             />\n  //           )}\n  //         </div>\n  //       </div>\n\n  //       {/* Right Dashboard */}\n  //       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg\">\n          \n  //         <h2 className=\"text-xl font-bold mb-4\">Point Info</h2>\n\n  //         {/* Labels Legend */}\n  //         <div ref={legendRef} className=\"mt-4\"></div>\n  //         {hoveredCoordinates && (\n  //           <div className=\"p-2 bg-green-50 rounded text-lg\">\n  //             <strong>Hovered Node:</strong>\n  //             <div>ID: {hoveredCoordinates.Point_IDs}</div>\n  //             {Object.keys(hoveredCoordinates)\n  //               .filter((key) => key !== \"id\")\n  //               .map((key) => (\n  //                 <div key={key}>\n  //                   <strong>{key}:</strong>{\" \"}\n  //                   {hoveredCoordinates[key].toFixed\n  //                     ? hoveredCoordinates[key].toFixed(2)\n  //                     : hoveredCoordinates[key]}\n  //                 </div>\n  //               ))}\n  //           </div>\n  //         )}\n\n  //       </div>\n  //     </div>\n  //   );\n  // };\n\n// export default App;\\\n  "],"mappings":"AAAE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}