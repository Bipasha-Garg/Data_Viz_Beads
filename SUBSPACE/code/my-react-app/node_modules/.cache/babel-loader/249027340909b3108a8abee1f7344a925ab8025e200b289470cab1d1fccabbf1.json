{"ast":null,"code":"var _jsxFileName = \"/home/divyansh/misc/GRAPH/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n\n// const JsonDisplay = ({ jsonFilename }) => {\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchJson = async () => {\n//       try {\n//         // Adjust the fetch URL depending on where the JSON file is located\n//         const response = await fetch(`/public/${jsonFilename}`);\n//         if (!response.ok) {\n//           throw new Error(`Failed to fetch ${jsonFilename}`);\n//         }\n//         const data = await response.json();\n//         setJsonData(data);\n//       } catch (err) {\n//         console.error(\"Error fetching JSON:\", err);\n//         setError(err.message);\n//       }\n//     };\n\n//     fetchJson();\n//   }, [jsonFilename]);\n\n//   return (\n//     <div className=\"bg-white shadow-lg rounded-lg p-6 mt-4 w-full max-w-3xl\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-blue-800 text-center\">\n//         Processed JSON File\n//       </h2>\n//       {error ? (\n//         <p className=\"text-red-500\">{error}</p>\n//       ) : jsonData ? (\n//         <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto text-sm\">\n//           {JSON.stringify(jsonData, null, 2)}\n//         </pre>\n//       ) : (\n//         <p className=\"text-gray-500 text-sm\">Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JsonDisplay;\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JsonDisplay = ({\n  jsonFilename\n}) => {\n  _s();\n  const [jsonData, setJsonData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchJson = async () => {\n      if (!jsonFilename) {\n        setError(\"No JSON filename provided\");\n        return;\n      }\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/public/${jsonFilename}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch ${jsonFilename}`);\n        }\n        const data = await response.json();\n        setJsonData(data);\n        setError(null);\n      } catch (err) {\n        console.error(\"Error fetching JSON:\", err);\n        setError(err.message);\n      }\n    };\n    fetchJson();\n  }, [jsonFilename]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow-lg rounded-lg p-6 mt-4 w-full max-w-3xl\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4 text-blue-800 text-center\",\n      children: \"Processed JSON File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : jsonData ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"bg-gray-100 p-4 rounded-lg overflow-auto text-sm\",\n      children: JSON.stringify(jsonData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-500 text-sm\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(JsonDisplay, \"nIzsJgtFFOmnQ6T3TRcv41JWAoI=\");\n_c = JsonDisplay;\nexport default JsonDisplay;\nvar _c;\n$RefreshReg$(_c, \"JsonDisplay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","JsonDisplay","jsonFilename","_s","jsonData","setJsonData","error","setError","fetchJson","response","fetch","ok","Error","data","json","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/divyansh/misc/GRAPH/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// const JsonDisplay = ({ jsonFilename }) => {\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchJson = async () => {\n//       try {\n//         // Adjust the fetch URL depending on where the JSON file is located\n//         const response = await fetch(`/public/${jsonFilename}`);\n//         if (!response.ok) {\n//           throw new Error(`Failed to fetch ${jsonFilename}`);\n//         }\n//         const data = await response.json();\n//         setJsonData(data);\n//       } catch (err) {\n//         console.error(\"Error fetching JSON:\", err);\n//         setError(err.message);\n//       }\n//     };\n\n//     fetchJson();\n//   }, [jsonFilename]);\n\n//   return (\n//     <div className=\"bg-white shadow-lg rounded-lg p-6 mt-4 w-full max-w-3xl\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-blue-800 text-center\">\n//         Processed JSON File\n//       </h2>\n//       {error ? (\n//         <p className=\"text-red-500\">{error}</p>\n//       ) : jsonData ? (\n//         <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto text-sm\">\n//           {JSON.stringify(jsonData, null, 2)}\n//         </pre>\n//       ) : (\n//         <p className=\"text-gray-500 text-sm\">Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JsonDisplay;\n\nimport React, { useEffect, useState } from \"react\";\n\nconst JsonDisplay = ({ jsonFilename }) => {\n  const [jsonData, setJsonData] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchJson = async () => {\n      if (!jsonFilename) {\n        setError(\"No JSON filename provided\");\n        return;\n      }\n  \n      try {\n        const response = await fetch(`http://127.0.0.1:5000/public/${jsonFilename}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch ${jsonFilename}`);\n        }\n        const data = await response.json();\n        setJsonData(data);\n        setError(null);\n      } catch (err) {\n        console.error(\"Error fetching JSON:\", err);\n        setError(err.message);\n      }\n    };\n  \n    fetchJson();\n  }, [jsonFilename]);\n\n\n  return (\n    <div className=\"bg-white shadow-lg rounded-lg p-6 mt-4 w-full max-w-3xl\">\n      <h2 className=\"text-2xl font-bold mb-4 text-blue-800 text-center\">\n        Processed JSON File\n      </h2>\n      {error ? (\n        <p className=\"text-red-500\">{error}</p>\n      ) : jsonData ? (\n        <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto text-sm\">\n          {JSON.stringify(jsonData, null, 2)}\n        </pre>\n      ) : (\n        <p className=\"text-gray-500 text-sm\">Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default JsonDisplay;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI,CAACN,YAAY,EAAE;QACjBK,QAAQ,CAAC,2BAA2B,CAAC;QACrC;MACF;MAEA,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgCR,YAAY,EAAE,CAAC;QAC5E,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmBV,YAAY,EAAE,CAAC;QACpD;QACA,MAAMW,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCT,WAAW,CAACQ,IAAI,CAAC;QACjBN,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACZC,OAAO,CAACV,KAAK,CAAC,sBAAsB,EAAES,GAAG,CAAC;QAC1CR,QAAQ,CAACQ,GAAG,CAACE,OAAO,CAAC;MACvB;IACF,CAAC;IAEDT,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;EAGlB,oBACEF,OAAA;IAAKkB,SAAS,EAAC,yDAAyD;IAAAC,QAAA,gBACtEnB,OAAA;MAAIkB,SAAS,EAAC,mDAAmD;MAAAC,QAAA,EAAC;IAElE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACJjB,KAAK,gBACJN,OAAA;MAAGkB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAEb;IAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GACrCnB,QAAQ,gBACVJ,OAAA;MAAKkB,SAAS,EAAC,kDAAkD;MAAAC,QAAA,EAC9DK,IAAI,CAACC,SAAS,CAACrB,QAAQ,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,gBAENvB,OAAA;MAAGkB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnD;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CA7CIF,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AA+CjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}