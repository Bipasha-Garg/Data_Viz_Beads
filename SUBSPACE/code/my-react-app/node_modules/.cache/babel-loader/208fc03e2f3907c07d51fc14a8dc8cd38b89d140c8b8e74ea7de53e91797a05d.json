{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Tooltip container\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index+1); // Number of sectors based on subspace dimensions\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       // Draw the outer circle representing the subspace\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2)\n//         .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n//       // Draw the radial lines dividing the sectors\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1)\n//           .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n//       }\n\n//       // Place points inside the subspace with bit vectors\n//       subspace.points.forEach((point) => {\n//         // Exclude Point_ID from bit vector calculation if present\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n\n//         // Generate bit vector for all coordinates excluding Point_ID\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0)) // 1 if positive, 0 if negative\n//           .join(\"\"); // Combine into a bit vector string\n\n//         // Calculate inner and outer radius for placement\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         // Calculate the angle for the sector based on the bit vector\n//         const bitVectorIndex = parseInt(bitVector, 2); // Convert bit vector to a decimal number (sector index)\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         // Generate a random angle within the sector's angular range\n//         const randomAngle =\n//           angleStart + Math.random() * (angleEnd - angleStart);\n\n//         // Position based on the calculated angle and random radius\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Create a circle for each point and make sure they are on top\n//         const pointElement = g\n//           .append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\") // Make points interactive\n//           .on(\"mouseover\", (event) => {\n//             tooltip.style(\"visibility\", \"visible\").html(`\n//                 <strong>Bit Vector:</strong> ${bitVector}<br>\n//                 <strong>Coordinates:</strong> (${pointData\n//                   .map(([key, coord]) => `${key}: ${coord}`)\n//                   .join(\", \")})\n//               `);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//           });\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <>\n//       <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n//     </>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip container\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Group points by Point_ID\n    const pointsById = new Map();\n    pointsData.forEach((subspace, index) => {\n      subspace.points.forEach(point => {\n        if (!pointsById.has(point.Point_ID)) {\n          pointsById.set(point.Point_ID, []);\n        }\n        pointsById.get(point.Point_ID).push({\n          ...point,\n          subspaceIndex: index\n        });\n      });\n    });\n\n    // Draw connections between points with the same Point_ID\n    pointsById.forEach(points => {\n      if (points.length > 1) {\n        for (let i = 0; i < points.length - 1; i++) {\n          const point1 = points[i];\n          const point2 = points[i + 1];\n          const x1 = getPointX(point1);\n          const y1 = getPointY(point1);\n          const x2 = getPointX(point2);\n          const y2 = getPointY(point2);\n          g.append(\"line\").attr(\"x1\", x1).attr(\"y1\", y1).attr(\"x2\", x2).attr(\"y2\", y2).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"2,2\"); // Optional: Add dashed lines for better visibility\n        }\n      }\n    });\n\n    // Helper functions to calculate point positions\n    const getPointX = point => {\n      const subspaceIndex = point.subspaceIndex;\n      const innerRadius = subspaceIndex / subspaces.length * maxRadius;\n      const outerRadius = (subspaceIndex + 1) / subspaces.length * maxRadius;\n      const randomRadius = innerRadius + Math.random() * (outerRadius - innerRadius);\n      const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n      const sectors = 2 ** (subspaceIndex + 1);\n      const bitVectorIndex = parseInt(bitVector, 2);\n      const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n      const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n      const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n      return randomRadius * Math.cos(randomAngle);\n    };\n    const getPointY = point => {\n      const subspaceIndex = point.subspaceIndex;\n      const innerRadius = subspaceIndex / subspaces.length * maxRadius;\n      const outerRadius = (subspaceIndex + 1) / subspaces.length * maxRadius;\n      const randomRadius = innerRadius + Math.random() * (outerRadius - innerRadius);\n      const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n      const sectors = 2 ** (subspaceIndex + 1);\n      const bitVectorIndex = parseInt(bitVector, 2);\n      const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n      const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n      const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n      return randomRadius * Math.sin(randomAngle);\n    };\n\n    // Draw subspaces and points\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1); // Number of sectors based on subspace dimensions\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      // Draw the outer circle representing the subspace\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2).style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n      // Draw the radial lines dividing the sectors\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n      }\n\n      // Place points inside the subspace with bit vectors\n      subspace.points.forEach(point => {\n        const x = getPointX({\n          ...point,\n          subspaceIndex: index\n        });\n        const y = getPointY({\n          ...point,\n          subspaceIndex: index\n        });\n\n        // Create a circle for each point and make sure they are on top\n        const pointElement = g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\") // Make points interactive\n        .on(\"mouseover\", event => {\n          const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          tooltip.style(\"visibility\", \"visible\").html(`\n                <strong>Bit Vector:</strong> ${bitVector}<br>\n                <strong>Coordinates:</strong> (${Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([key, coord]) => `${key}: ${coord}`).join(\", \")})\n              `);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","tooltip","style","pointsById","Map","forEach","subspace","index","point","has","Point_ID","set","get","push","subspaceIndex","i","point1","point2","x1","getPointX","y1","getPointY","x2","y2","innerRadius","outerRadius","randomRadius","random","bitVector","entries","filter","coord","join","sectors","bitVectorIndex","parseInt","angleStart","PI","angleEnd","randomAngle","cos","sin","colorScale","scaleOrdinal","range","subspaceColor","angle","x","y","pointElement","on","event","html","pageY","pageX","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Tooltip container\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index+1); // Number of sectors based on subspace dimensions\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       // Draw the outer circle representing the subspace\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2)\n//         .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n//       // Draw the radial lines dividing the sectors\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1)\n//           .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n//       }\n\n//       // Place points inside the subspace with bit vectors\n//       subspace.points.forEach((point) => {\n//         // Exclude Point_ID from bit vector calculation if present\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n\n//         // Generate bit vector for all coordinates excluding Point_ID\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0)) // 1 if positive, 0 if negative\n//           .join(\"\"); // Combine into a bit vector string\n\n//         // Calculate inner and outer radius for placement\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         // Calculate the angle for the sector based on the bit vector\n//         const bitVectorIndex = parseInt(bitVector, 2); // Convert bit vector to a decimal number (sector index)\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         // Generate a random angle within the sector's angular range\n//         const randomAngle =\n//           angleStart + Math.random() * (angleEnd - angleStart);\n\n//         // Position based on the calculated angle and random radius\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Create a circle for each point and make sure they are on top\n//         const pointElement = g\n//           .append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\") // Make points interactive\n//           .on(\"mouseover\", (event) => {\n//             tooltip.style(\"visibility\", \"visible\").html(`\n//                 <strong>Bit Vector:</strong> ${bitVector}<br>\n//                 <strong>Coordinates:</strong> (${pointData\n//                   .map(([key, coord]) => `${key}: ${coord}`)\n//                   .join(\", \")})\n//               `);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//           });\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <>\n//       <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n//     </>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip container\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    // Group points by Point_ID\n    const pointsById = new Map();\n    pointsData.forEach((subspace, index) => {\n      subspace.points.forEach((point) => {\n        if (!pointsById.has(point.Point_ID)) {\n          pointsById.set(point.Point_ID, []);\n        }\n        pointsById.get(point.Point_ID).push({ ...point, subspaceIndex: index });\n      });\n    });\n\n    // Draw connections between points with the same Point_ID\n    pointsById.forEach((points) => {\n      if (points.length > 1) {\n        for (let i = 0; i < points.length - 1; i++) {\n          const point1 = points[i];\n          const point2 = points[i + 1];\n\n          const x1 = getPointX(point1);\n          const y1 = getPointY(point1);\n          const x2 = getPointX(point2);\n          const y2 = getPointY(point2);\n\n          g.append(\"line\")\n            .attr(\"x1\", x1)\n            .attr(\"y1\", y1)\n            .attr(\"x2\", x2)\n            .attr(\"y2\", y2)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\", \"2,2\"); // Optional: Add dashed lines for better visibility\n        }\n      }\n    });\n\n    // Helper functions to calculate point positions\n    const getPointX = (point) => {\n      const subspaceIndex = point.subspaceIndex;\n      const innerRadius = (subspaceIndex / subspaces.length) * maxRadius;\n      const outerRadius = ((subspaceIndex + 1) / subspaces.length) * maxRadius;\n      const randomRadius =\n        innerRadius + Math.random() * (outerRadius - innerRadius);\n\n      const bitVector = Object.entries(point)\n        .filter(([key]) => key !== \"Point_ID\")\n        .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n        .join(\"\");\n\n      const sectors = 2 ** (subspaceIndex + 1);\n      const bitVectorIndex = parseInt(bitVector, 2);\n      const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n      const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n      const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n\n      return randomRadius * Math.cos(randomAngle);\n    };\n\n    const getPointY = (point) => {\n      const subspaceIndex = point.subspaceIndex;\n      const innerRadius = (subspaceIndex / subspaces.length) * maxRadius;\n      const outerRadius = ((subspaceIndex + 1) / subspaces.length) * maxRadius;\n      const randomRadius =\n        innerRadius + Math.random() * (outerRadius - innerRadius);\n\n      const bitVector = Object.entries(point)\n        .filter(([key]) => key !== \"Point_ID\")\n        .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n        .join(\"\");\n\n      const sectors = 2 ** (subspaceIndex + 1);\n      const bitVectorIndex = parseInt(bitVector, 2);\n      const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n      const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n      const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n\n      return randomRadius * Math.sin(randomAngle);\n    };\n\n    // Draw subspaces and points\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1); // Number of sectors based on subspace dimensions\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      // Draw the outer circle representing the subspace\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2)\n        .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n      // Draw the radial lines dividing the sectors\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1)\n          .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n      }\n\n      // Place points inside the subspace with bit vectors\n      subspace.points.forEach((point) => {\n        const x = getPointX({ ...point, subspaceIndex: index });\n        const y = getPointY({ ...point, subspaceIndex: index });\n\n        // Create a circle for each point and make sure they are on top\n        const pointElement = g\n          .append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\") // Make points interactive\n          .on(\"mouseover\", (event) => {\n            const bitVector = Object.entries(point)\n              .filter(([key]) => key !== \"Point_ID\")\n              .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n              .join(\"\");\n\n            tooltip.style(\"visibility\", \"visible\").html(`\n                <strong>Bit Vector:</strong> ${bitVector}<br>\n                <strong>Coordinates:</strong> (${Object.entries(point)\n                  .filter(([key]) => key !== \"Point_ID\")\n                  .map(([key, coord]) => `${key}: ${coord}`)\n                  .join(\", \")})\n              `);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      });\n    });\n  }, [jsonData]);\n\n  return (\n    <>\n      <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n    </>\n  );\n};\n\nexport default HierarchicalGraph;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}