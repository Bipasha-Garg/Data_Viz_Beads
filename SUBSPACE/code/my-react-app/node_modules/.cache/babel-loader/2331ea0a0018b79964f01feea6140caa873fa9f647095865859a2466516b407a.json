{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     console.log(subspaces.length);\n\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length, \n// // //       subspaceId: key, \n// // //     }));\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     const width = 1200;\n// // //     const height = 1200;\n// // //     const margin = 20;\n\n// // //     svg.selectAll(\"*\").remove(); \n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     pointsData.forEach((subspace, index) => {\n// // //       const radius = maxRadius * ((index + 1) / subspaces.length);\n// // //       const sectors = 2 ** (index +1); \n// // //       console.log(sectors);\n\n// // //       const colorScale = d3\n// // //         .scaleOrdinal()\n// // //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); \n\n// // //       const subspaceColor = colorScale(\n// // //         subspace.dimensions % colorScale.range().length\n// // //       );\n\n// // //       g.append(\"circle\")\n// // //         .attr(\"r\", radius)\n// // //         .attr(\"stroke\", \"black\") \n// // //         .attr(\"fill\", subspaceColor)\n// // //         .attr(\"fill-opacity\", 0.2) \n// // //         .attr(\"stroke-width\", 2); \n\n// // //       if (subspace.dimensions > 0) {\n\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const angle = (2 * Math.PI * i) / sectors;\n// // //           const x1 = radius * Math.cos(angle);\n// // //           const y1 = radius * Math.sin(angle);\n// // //           g.append(\"line\")\n// // //             .attr(\"x1\", 0)\n// // //             .attr(\"y1\", 0)\n// // //             .attr(\"x2\", x1)\n// // //             .attr(\"y2\", y1)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 1);\n\n// // //           const labelX = (radius + 10) * Math.cos(angle); \n// // //           const labelY = (radius + 10) * Math.sin(angle);\n\n// // //           g.append(\"text\")\n// // //             .attr(\"x\", labelX)\n// // //             .attr(\"y\", labelY + 5) \n// // //             .attr(\"text-anchor\", \"middle\")\n// // //             .attr(\"dominant-baseline\", \"middle\")\n// // //             .style(\"font-size\", \"10px\")\n// // //             .style(\"fill\", \"black\");\n// // //         }\n// // //       }\n\n// // //       const sectorRadius = radius;\n\n// // //       subspace.points.forEach((point) => {\n// // //         const bitPattern = point.Point_ID.toString(2).padStart(\n// // //           subspace.dimensions,\n// // //           \"0\"\n// // //         );\n// // //         const sectorIndex = parseInt(bitPattern, 2);\n// // //         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n// // //         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n// // //         const minRadius = sectorRadius * 0.2;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (sectorRadius - minRadius);\n// // //         const randomAngle =\n// // //           sectorAngleStart +\n// // //           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n// // //         const x = randomRadius * Math.cos(randomAngle);\n// // //         const y = randomRadius * Math.sin(randomAngle);\n\n// // //         if (Math.sqrt(x * x + y * y) <= radius) {\n// // //           const circle = g\n// // //             .append(\"circle\")\n// // //             .attr(\"cx\", x)\n// // //             .attr(\"cy\", y)\n// // //             .attr(\"r\", 4)\n// // //             .attr(\"fill\", \"black\")\n// // //             .attr(\"stroke\", \"white\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .append(\"title\")\n// // //             .text(\n// // //               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n// // //             );\n\n// // //           circle\n// // //             .on(\"mouseover\", function () {\n// // //               d3.select(this).attr(\"fill\", \"red\");\n// // //             })\n// // //             .on(\"mouseout\", function () {\n// // //               d3.select(this).attr(\"fill\", \"black\");\n// // //             });\n// // //         } else {\n// // //           console.warn(\n// // //             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n// // //           ); \n// // //         }\n// // //       });\n// // //     });\n// // //   }, [jsonData]);\n\n// // //   return <svg ref={graphRef} style={{ width: \"1200px\", height: \"1200px\" }}></svg>;\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     console.log(\"Number of subspaces:\", subspaces.length);\n\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     const width = 600;\n// // //     const height = 600;\n// // //     const margin = 20;\n\n// // //     svg.selectAll(\"*\").remove();\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     pointsData.forEach((subspace, index) => {\n// // //       const radius = maxRadius * ((index + 1) / subspaces.length);\n// // //       const sectors = 2 ** (index + 1);\n\n// // //       const colorScale = d3\n// // //         .scaleOrdinal()\n// // //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n\n// // //       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n// // //       g.append(\"circle\")\n// // //         .attr(\"r\", radius)\n// // //         .attr(\"stroke\", \"black\")\n// // //         .attr(\"fill\", subspaceColor)\n// // //         .attr(\"fill-opacity\", 0.2)\n// // //         .attr(\"stroke-width\", 2);\n\n// // //       if (index + 1 > 0) {\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const angle = (2 * Math.PI * i) / sectors;\n// // //           const x1 = radius * Math.cos(angle);\n// // //           const y1 = radius * Math.sin(angle);\n// // //           g.append(\"line\")\n// // //             .attr(\"x1\", 0)\n// // //             .attr(\"y1\", 0)\n// // //             .attr(\"x2\", x1)\n// // //             .attr(\"y2\", y1)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 1);\n\n// // //           const labelX = (radius + 10) * Math.cos(angle);\n// // //           const labelY = (radius + 10) * Math.sin(angle);\n\n// // //           g.append(\"text\")\n// // //             .attr(\"x\", labelX)\n// // //             .attr(\"y\", labelY + 5)\n// // //             .attr(\"text-anchor\", \"middle\")\n// // //             .attr(\"dominant-baseline\", \"middle\")\n// // //             .style(\"font-size\", \"10px\")\n// // //             .style(\"fill\", \"black\");\n// // //         }\n// // //       }\n\n// // //       const sectorRadius = radius;\n\n// // //       subspace.points.forEach((point) => {\n// // //         const bitPattern = point.Point_ID.toString(2).padStart(index + 1, \"0\");\n// // //         const sectorIndex = parseInt(bitPattern, 2);\n// // //         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n// // //         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n// // //         const minRadius = sectorRadius * 0.2;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (sectorRadius - minRadius);\n// // //         const randomAngle =\n// // //           sectorAngleStart +\n// // //           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n// // //         const x = randomRadius * Math.cos(randomAngle);\n// // //         const y = randomRadius * Math.sin(randomAngle);\n\n// // //         if (Math.sqrt(x * x + y * y) <= radius) {\n// // //           const circle = g\n// // //             .append(\"circle\")\n// // //             .attr(\"cx\", x)\n// // //             .attr(\"cy\", y)\n// // //             .attr(\"r\", 4)\n// // //             .attr(\"fill\", \"black\")\n// // //             .attr(\"stroke\", \"white\")\n// // //             .attr(\"stroke-width\", 0.5);\n\n// // //           circle\n// // //             .append(\"title\")\n// // //             .text(\n// // //               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n// // //             );\n\n// // //           circle\n// // //             .on(\"mouseover\", function (event) {\n// // //               d3.select(this).attr(\"fill\", \"red\");\n// // //               g.append(\"text\")\n// // //                 .attr(\"id\", \"tooltip\")\n// // //                 .attr(\"x\", x + 10)\n// // //                 .attr(\"y\", y - 10)\n// // //                 .attr(\"text-anchor\", \"middle\")\n// // //                 .attr(\"dominant-baseline\", \"middle\")\n// // //                 .style(\"font-size\", \"12px\")\n// // //                 .style(\"fill\", \"black\")\n// // //                 .text(bitPattern);\n// // //             })\n// // //             .on(\"mouseout\", function () {\n// // //               d3.select(this).attr(\"fill\", \"black\");\n// // //               g.select(\"#tooltip\").remove();\n// // //             });\n// // //         } else {\n// // //           console.warn(\n// // //             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n// // //           );\n// // //         }\n// // //       });\n// // //     });\n// // //   }, [jsonData]);\n\n// // //   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n\n// //     const svg = d3.select(graphRef.current);\n// //     const width = 600;\n// //     const height = 600;\n// //     const margin = 20;\n\n// //     svg.selectAll(\"*\").remove();\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     pointsData.forEach((subspace, index) => {\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const colorScale = d3\n// //         .scaleOrdinal()\n// //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n// //       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n// //       g.append(\"circle\")\n// //         .attr(\"r\", outerRadius)\n// //         .attr(\"stroke\", \"black\")\n// //         .attr(\"fill\", subspaceColor)\n// //         .attr(\"fill-opacity\", 0.2)\n// //         .attr(\"stroke-width\", 2);\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", 0)\n// //           .attr(\"y1\", 0)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 1);\n// //       }\n\n// //       subspace.points.forEach((point) => {\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n// //         const randomAngle = Math.random() * 2 * Math.PI;\n// //         const x = randomRadius * Math.cos(randomAngle);\n// //         const y = randomRadius * Math.sin(randomAngle);\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 4)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5);\n// //       });\n// //     });\n// //   }, [jsonData]);\n\n// //   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       // Draw the outer circle representing the subspace\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2);\n\n//       // Draw the radial lines dividing the sector\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1);\n//       }\n\n//       // Place points inside the subspace\n//       subspace.points.forEach((point) => {\n//         // Randomly place points within the subspace's radial range\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         // Randomly choose an angle within the subspace's sector\n//         const sectorAngleStart = (2 * Math.PI * index) / subspaces.length;\n//         const sectorAngleEnd = (2 * Math.PI * (index + 1)) / subspaces.length;\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Draw the point inside the subspace\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5);\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip container\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      // Draw the outer circle representing the subspace\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2).style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n      // Draw the radial lines dividing the sector\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n      }\n\n      // Place points inside the subspace with bit vectors\n      subspace.points.forEach(point => {\n        // Generate bit vector based on coordinate values\n        const xBit = point[0] >= 0 ? 1 : 0; // For the x-coordinate\n        const yBit = point[1] >= 0 ? 1 : 0; // For the y-coordinate\n        const bitVector = `${xBit}${yBit}`; // Combine bits\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n        // Randomly choose an angle within the subspace's sector\n        const sectorAngleStart = 2 * Math.PI * index / subspaces.length;\n        const sectorAngleEnd = 2 * Math.PI * (index + 1) / subspaces.length;\n        const randomAngle = sectorAngleStart + Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n        // Use the bit vector to adjust position\n        let x = randomRadius * Math.cos(randomAngle);\n        let y = randomRadius * Math.sin(randomAngle);\n\n        // Adjust x, y coordinates based on bit vector (quadrants)\n        if (xBit === 0) x = -Math.abs(x); // Negative x\n        if (yBit === 0) y = -Math.abs(y); // Negative y\n\n        // Create a circle for each point and make sure they are on top\n        const pointElement = g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\") // Make points interactive\n        .on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`\n                <strong>Bit Vector:</strong> ${bitVector}<br>\n                <strong>Coordinates:</strong> (x: ${x.toFixed(2)}, y: ${y.toFixed(2)})\n              `);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"600px\",\n        height: \"600px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","tooltip","style","forEach","subspace","index","innerRadius","outerRadius","sectors","colorScale","scaleOrdinal","range","subspaceColor","i","angle","PI","x1","cos","y1","sin","point","xBit","yBit","bitVector","minRadius","randomRadius","random","sectorAngleStart","sectorAngleEnd","randomAngle","x","y","abs","pointElement","on","event","html","toFixed","pageY","pageX","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     console.log(subspaces.length);\n    \n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length, \n// // //       subspaceId: key, \n// // //     }));\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     const width = 1200;\n// // //     const height = 1200;\n// // //     const margin = 20;\n\n// // //     svg.selectAll(\"*\").remove(); \n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    \n// // //     pointsData.forEach((subspace, index) => {\n// // //       const radius = maxRadius * ((index + 1) / subspaces.length);\n// // //       const sectors = 2 ** (index +1); \n// // //       console.log(sectors);\n      \n// // //       const colorScale = d3\n// // //         .scaleOrdinal()\n// // //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); \n      \n// // //       const subspaceColor = colorScale(\n// // //         subspace.dimensions % colorScale.range().length\n// // //       );\n      \n// // //       g.append(\"circle\")\n// // //         .attr(\"r\", radius)\n// // //         .attr(\"stroke\", \"black\") \n// // //         .attr(\"fill\", subspaceColor)\n// // //         .attr(\"fill-opacity\", 0.2) \n// // //         .attr(\"stroke-width\", 2); \n      \n// // //       if (subspace.dimensions > 0) {\n        \n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const angle = (2 * Math.PI * i) / sectors;\n// // //           const x1 = radius * Math.cos(angle);\n// // //           const y1 = radius * Math.sin(angle);\n// // //           g.append(\"line\")\n// // //             .attr(\"x1\", 0)\n// // //             .attr(\"y1\", 0)\n// // //             .attr(\"x2\", x1)\n// // //             .attr(\"y2\", y1)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 1);\n          \n// // //           const labelX = (radius + 10) * Math.cos(angle); \n// // //           const labelY = (radius + 10) * Math.sin(angle);\n\n// // //           g.append(\"text\")\n// // //             .attr(\"x\", labelX)\n// // //             .attr(\"y\", labelY + 5) \n// // //             .attr(\"text-anchor\", \"middle\")\n// // //             .attr(\"dominant-baseline\", \"middle\")\n// // //             .style(\"font-size\", \"10px\")\n// // //             .style(\"fill\", \"black\");\n// // //         }\n// // //       }\n\n// // //       const sectorRadius = radius;\n\n// // //       subspace.points.forEach((point) => {\n// // //         const bitPattern = point.Point_ID.toString(2).padStart(\n// // //           subspace.dimensions,\n// // //           \"0\"\n// // //         );\n// // //         const sectorIndex = parseInt(bitPattern, 2);\n// // //         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n// // //         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n// // //         const minRadius = sectorRadius * 0.2;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (sectorRadius - minRadius);\n// // //         const randomAngle =\n// // //           sectorAngleStart +\n// // //           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n// // //         const x = randomRadius * Math.cos(randomAngle);\n// // //         const y = randomRadius * Math.sin(randomAngle);\n\n// // //         if (Math.sqrt(x * x + y * y) <= radius) {\n// // //           const circle = g\n// // //             .append(\"circle\")\n// // //             .attr(\"cx\", x)\n// // //             .attr(\"cy\", y)\n// // //             .attr(\"r\", 4)\n// // //             .attr(\"fill\", \"black\")\n// // //             .attr(\"stroke\", \"white\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .append(\"title\")\n// // //             .text(\n// // //               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n// // //             );\n\n          \n// // //           circle\n// // //             .on(\"mouseover\", function () {\n// // //               d3.select(this).attr(\"fill\", \"red\");\n// // //             })\n// // //             .on(\"mouseout\", function () {\n// // //               d3.select(this).attr(\"fill\", \"black\");\n// // //             });\n// // //         } else {\n// // //           console.warn(\n// // //             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n// // //           ); \n// // //         }\n// // //       });\n// // //     });\n// // //   }, [jsonData]);\n\n// // //   return <svg ref={graphRef} style={{ width: \"1200px\", height: \"1200px\" }}></svg>;\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     console.log(\"Number of subspaces:\", subspaces.length);\n\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     const width = 600;\n// // //     const height = 600;\n// // //     const margin = 20;\n\n// // //     svg.selectAll(\"*\").remove();\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     pointsData.forEach((subspace, index) => {\n// // //       const radius = maxRadius * ((index + 1) / subspaces.length);\n// // //       const sectors = 2 ** (index + 1);\n\n// // //       const colorScale = d3\n// // //         .scaleOrdinal()\n// // //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n\n// // //       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n// // //       g.append(\"circle\")\n// // //         .attr(\"r\", radius)\n// // //         .attr(\"stroke\", \"black\")\n// // //         .attr(\"fill\", subspaceColor)\n// // //         .attr(\"fill-opacity\", 0.2)\n// // //         .attr(\"stroke-width\", 2);\n\n// // //       if (index + 1 > 0) {\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const angle = (2 * Math.PI * i) / sectors;\n// // //           const x1 = radius * Math.cos(angle);\n// // //           const y1 = radius * Math.sin(angle);\n// // //           g.append(\"line\")\n// // //             .attr(\"x1\", 0)\n// // //             .attr(\"y1\", 0)\n// // //             .attr(\"x2\", x1)\n// // //             .attr(\"y2\", y1)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 1);\n\n// // //           const labelX = (radius + 10) * Math.cos(angle);\n// // //           const labelY = (radius + 10) * Math.sin(angle);\n\n// // //           g.append(\"text\")\n// // //             .attr(\"x\", labelX)\n// // //             .attr(\"y\", labelY + 5)\n// // //             .attr(\"text-anchor\", \"middle\")\n// // //             .attr(\"dominant-baseline\", \"middle\")\n// // //             .style(\"font-size\", \"10px\")\n// // //             .style(\"fill\", \"black\");\n// // //         }\n// // //       }\n\n// // //       const sectorRadius = radius;\n\n// // //       subspace.points.forEach((point) => {\n// // //         const bitPattern = point.Point_ID.toString(2).padStart(index + 1, \"0\");\n// // //         const sectorIndex = parseInt(bitPattern, 2);\n// // //         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n// // //         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n// // //         const minRadius = sectorRadius * 0.2;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (sectorRadius - minRadius);\n// // //         const randomAngle =\n// // //           sectorAngleStart +\n// // //           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n// // //         const x = randomRadius * Math.cos(randomAngle);\n// // //         const y = randomRadius * Math.sin(randomAngle);\n\n// // //         if (Math.sqrt(x * x + y * y) <= radius) {\n// // //           const circle = g\n// // //             .append(\"circle\")\n// // //             .attr(\"cx\", x)\n// // //             .attr(\"cy\", y)\n// // //             .attr(\"r\", 4)\n// // //             .attr(\"fill\", \"black\")\n// // //             .attr(\"stroke\", \"white\")\n// // //             .attr(\"stroke-width\", 0.5);\n\n// // //           circle\n// // //             .append(\"title\")\n// // //             .text(\n// // //               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n// // //             );\n\n// // //           circle\n// // //             .on(\"mouseover\", function (event) {\n// // //               d3.select(this).attr(\"fill\", \"red\");\n// // //               g.append(\"text\")\n// // //                 .attr(\"id\", \"tooltip\")\n// // //                 .attr(\"x\", x + 10)\n// // //                 .attr(\"y\", y - 10)\n// // //                 .attr(\"text-anchor\", \"middle\")\n// // //                 .attr(\"dominant-baseline\", \"middle\")\n// // //                 .style(\"font-size\", \"12px\")\n// // //                 .style(\"fill\", \"black\")\n// // //                 .text(bitPattern);\n// // //             })\n// // //             .on(\"mouseout\", function () {\n// // //               d3.select(this).attr(\"fill\", \"black\");\n// // //               g.select(\"#tooltip\").remove();\n// // //             });\n// // //         } else {\n// // //           console.warn(\n// // //             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n// // //           );\n// // //         }\n// // //       });\n// // //     });\n// // //   }, [jsonData]);\n\n// // //   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n\n// //     const svg = d3.select(graphRef.current);\n// //     const width = 600;\n// //     const height = 600;\n// //     const margin = 20;\n\n// //     svg.selectAll(\"*\").remove();\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     pointsData.forEach((subspace, index) => {\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const colorScale = d3\n// //         .scaleOrdinal()\n// //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n// //       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n// //       g.append(\"circle\")\n// //         .attr(\"r\", outerRadius)\n// //         .attr(\"stroke\", \"black\")\n// //         .attr(\"fill\", subspaceColor)\n// //         .attr(\"fill-opacity\", 0.2)\n// //         .attr(\"stroke-width\", 2);\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", 0)\n// //           .attr(\"y1\", 0)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 1);\n// //       }\n \n        \n// //       subspace.points.forEach((point) => {\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n// //         const randomAngle = Math.random() * 2 * Math.PI;\n// //         const x = randomRadius * Math.cos(randomAngle);\n// //         const y = randomRadius * Math.sin(randomAngle);\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 4)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5);\n// //       });\n// //     });\n// //   }, [jsonData]);\n\n// //   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       // Draw the outer circle representing the subspace\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2);\n\n//       // Draw the radial lines dividing the sector\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1);\n//       }\n\n//       // Place points inside the subspace\n//       subspace.points.forEach((point) => {\n//         // Randomly place points within the subspace's radial range\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         // Randomly choose an angle within the subspace's sector\n//         const sectorAngleStart = (2 * Math.PI * index) / subspaces.length;\n//         const sectorAngleEnd = (2 * Math.PI * (index + 1)) / subspaces.length;\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Draw the point inside the subspace\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5);\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip container\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      // Draw the outer circle representing the subspace\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2)\n        .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n      // Draw the radial lines dividing the sector\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1)\n          .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n      }\n\n      // Place points inside the subspace with bit vectors\n      subspace.points.forEach((point) => {\n        // Generate bit vector based on coordinate values\n        const xBit = point[0] >= 0 ? 1 : 0; // For the x-coordinate\n        const yBit = point[1] >= 0 ? 1 : 0; // For the y-coordinate\n        const bitVector = `${xBit}${yBit}`; // Combine bits\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        // Randomly choose an angle within the subspace's sector\n        const sectorAngleStart = (2 * Math.PI * index) / subspaces.length;\n        const sectorAngleEnd = (2 * Math.PI * (index + 1)) / subspaces.length;\n        const randomAngle =\n          sectorAngleStart +\n          Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n        // Use the bit vector to adjust position\n        let x = randomRadius * Math.cos(randomAngle);\n        let y = randomRadius * Math.sin(randomAngle);\n\n        // Adjust x, y coordinates based on bit vector (quadrants)\n        if (xBit === 0) x = -Math.abs(x); // Negative x\n        if (yBit === 0) y = -Math.abs(y); // Negative y\n\n        // Create a circle for each point and make sure they are on top\n        const pointElement = g\n          .append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\") // Make points interactive\n          .on(\"mouseover\", (event) => {\n            tooltip.style(\"visibility\", \"visible\").html(`\n                <strong>Bit Vector:</strong> ${bitVector}<br>\n                <strong>Coordinates:</strong> (x: ${x.toFixed(\n                  2\n                )}, y: ${y.toFixed(2)})\n              `);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      });\n    });\n  }, [jsonData]);\n\n  return (\n    <>\n      <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>\n    </>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;IAErD,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}