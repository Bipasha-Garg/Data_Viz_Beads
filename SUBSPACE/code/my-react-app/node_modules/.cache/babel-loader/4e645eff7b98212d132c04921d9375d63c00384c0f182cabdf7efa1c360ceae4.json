{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {}; \n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \n//     \"#FF69B4\", \n//     \"#33B5E5\", \n//     \"#32CD32\", \n//     \"#FF4500\", \n//     \"#8A2BE2\", \n//     \"#00CED1\", \n//     \"#DC143C\", \n//     \"#1E90FF\", \n//     \"#FF8C00\", \n//     \"#ADFF2F\", \n//     \"#C71585\", \n//     \"#20B2AA\", \n//     \"#8B4513\", \n//     \"#7B68EE\", \n//     ]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 0.25)\n//         .style(\"pointer-events\", \"none\");\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point,i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData).sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const width = 800,\n      height = 800,\n      margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const pointPositions = {};\n\n    // Updated color function\n    const getSectorColor = (index, sectorIndex) => {\n      // Use blue for sectors ending with 0, red for sectors ending with 1\n      return sectorIndex % 2 === 0 ? \"blue\" : \"red\";\n    };\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 0.25);\n      }\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        g.append(\"line\").attr(\"x1\", outerRadius * Math.cos(angle)).attr(\"y1\", outerRadius * Math.sin(angle)).attr(\"x2\", innerRadius * Math.cos(angle)).attr(\"y2\", innerRadius * Math.sin(angle)).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25);\n      }\n      subspace.points.forEach((point, i) => {\n        const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const centerAngle = 2 * Math.PI * bitVectorIndex / sectors;\n        const overlapRadius = innerRadius + (outerRadius - innerRadius) * (i % subspace.points.length) / subspace.points.length;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) pointPositions[id] = [];\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: subspace.key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${point.Point_ID.join(\", \")}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`);\n          setHoveredCoordinates(point);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", \"red\").attr(\"stroke-width\", 0.3);\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"800px\",\n      height: \"800px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","width","height","margin","maxRadius","Math","min","svg","select","current","selectAll","remove","g","attr","append","tooltip","style","pointPositions","getSectorColor","index","sectorIndex","forEach","subspace","innerRadius","outerRadius","sectors","i","angle","PI","cos","sin","point","bitVector","entries","filter","_","coord","join","bitVectorIndex","parseInt","centerAngle","overlapRadius","x","y","Point_ID","id","push","on","event","html","toFixed","pageY","pageX","pointId","positions","zoom","transform","call","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {}; \n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \n//     \"#FF69B4\", \n//     \"#33B5E5\", \n//     \"#32CD32\", \n//     \"#FF4500\", \n//     \"#8A2BE2\", \n//     \"#00CED1\", \n//     \"#DC143C\", \n//     \"#1E90FF\", \n//     \"#FF8C00\", \n//     \"#ADFF2F\", \n//     \"#C71585\", \n//     \"#20B2AA\", \n//     \"#8B4513\", \n//     \"#7B68EE\", \n//     ]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 0.25)\n//         .style(\"pointer-events\", \"none\");\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point,i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n       \n       \n       \n//         const centerAngle = (angleStart + angleEnd) / 2;\n       \n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n    \n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData).sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const width = 800,\n      height = 800,\n      margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const pointPositions = {};\n\n    // Updated color function\n    const getSectorColor = (index, sectorIndex) => {\n      // Use blue for sectors ending with 0, red for sectors ending with 1\n      return sectorIndex % 2 === 0 ? \"blue\" : \"red\";\n    };\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"circle\")\n          .attr(\"r\", outerRadius)\n          .attr(\"stroke\", \"black\")\n          .attr(\"fill\", getSectorColor(index, i))\n          .attr(\"fill-opacity\", 0.2)\n          .attr(\"stroke-width\", 0.25);\n      }\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        g.append(\"line\")\n          .attr(\"x1\", outerRadius * Math.cos(angle))\n          .attr(\"y1\", outerRadius * Math.sin(angle))\n          .attr(\"x2\", innerRadius * Math.cos(angle))\n          .attr(\"y2\", innerRadius * Math.sin(angle))\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.25);\n      }\n\n      subspace.points.forEach((point, i) => {\n        const bitVector = Object.entries(point)\n          .filter(([key]) => key !== \"Point_ID\")\n          .map(([_, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const centerAngle = (2 * Math.PI * bitVectorIndex) / sectors;\n\n        const overlapRadius =\n          innerRadius +\n          ((outerRadius - innerRadius) * (i % subspace.points.length)) /\n            subspace.points.length;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) pointPositions[id] = [];\n          pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .on(\"mouseover\", (event) => {\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${point.Point_ID.join(\n                  \", \"\n                )}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(\n                  2\n                )})<br>Subspace: ${subspace.key}`\n              );\n            setHoveredCoordinates(point);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", `${event.pageY + 10}px`)\n              .style(\"left\", `${event.pageX + 10}px`);\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 0.3);\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAsB,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAII,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,CAACM,MAAM,KAAK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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}