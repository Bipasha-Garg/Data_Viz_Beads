{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\");\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//       //   g.append(\"text\")\n//       //     .attr(\"transform\", (d) => {\n//       //       const midAngle = (startAngle + endAngle) / 2;\n//       //       const textRadius = (innerRadius + outerRadius) / 2;\n//       //       const x = textRadius * Math.cos(Math.PI / 2 - midAngle);\n//       //       const y = textRadius * Math.sin(Math.PI / 2 - midAngle);\n//       //       let angleDeg = ((midAngle - Math.PI / 2) * 180) / Math.PI;\n//       //       let rotation = (angleDeg > 90 && angleDeg < 270) ? 0 : 0;\n//       //       return `translate(${x}, ${y}) rotate(${rotation})`;\n//       //     })\n//       //     .attr(\"text-anchor\", \"middle\")\n//       //     .attr(\"alignment-baseline\", \"middle\")\n//       //     .attr(\"font-size\", \"14px\")\n//       //     .attr(\"fill\", \"black\")\n//       //     .attr(\"font-weight\", \"normal\")\n//       //     .text(\n//       //       i\n//       //         .toString(2)\n//       //         .padStart(index + 1, \"0\")\n//       //         .replace(/0/g, \"*\")\n//       //         .replace(/1/g, \"0\")\n//       //         .replace(/\\*/g, \"1\")\n//       //     );\n//       }\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                   )\n//                 })\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n//               highlightedElements = { line, circles, originalColor };\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n//             });\n//         }\n//       }\n//     });\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n//     return () => {\n//       tooltip.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // const calculateProportionalAngles = () => {\n    //   console.log(\"Starting calculateProportionalAngles...\");\n    //   console.log(\"pointsData:\", pointsData);\n\n    //   if (pointsData.length === 0) {\n    //     console.error(\"No points data available\");\n    //     return [];\n    //   }\n\n    //   const lastRing = pointsData[pointsData.length - 1];\n    //   const lastRingPoints = lastRing.points || [];\n    //   const sectorsCount = Math.max(1, 2 ** lastRing.dimensions);\n\n    //   console.log(\"Last ring:\", lastRing);\n    //   console.log(\"Last ring points length:\", lastRingPoints.length);\n    //   console.log(\"Sectors count:\", sectorsCount);\n\n    //   // Fallback for empty or invalid last ring\n    //   if (lastRingPoints.length === 0 || !Number.isFinite(sectorsCount)) {\n    //     console.warn(\"Invalid last ring data, using equal angles\");\n    //     return pointsData.map((_, i) => {\n    //       const sectorCount = Math.max(1, 2 ** (i + 1));\n    //       console.log(`Ring ${i} sector count: ${sectorCount}`);\n    //       return Array(sectorCount).fill(2 * Math.PI / sectorCount);\n    //     });\n    //   }\n\n    //   const pointCounts = new Array(sectorsCount).fill(0);\n    //   console.log(\"Initialized pointCounts:\", pointCounts);\n\n    //   lastRingPoints.forEach((point, idx) => {\n    //     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    //     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    //     const sectorIndex = parseInt(bitVector, 2);\n    //     if (sectorIndex >= 0 && sectorIndex < sectorsCount) {\n    //       pointCounts[sectorIndex]++;\n    //     } else {\n    //       console.warn(`Point ${idx}: Invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n    //     }\n    //   });\n\n    //   console.log(\"Point counts per sector:\", pointCounts);\n\n    //   const minAngle = Math.PI / 180; // 1 degree minimum\n    //   const totalAngle = 2 * Math.PI;\n    //   const totalNonEmptyPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n    //   const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n    //   console.log(\"Total non-empty points:\", totalNonEmptyPoints);\n    //   console.log(\"Remaining angle:\", remainingAngle);\n\n    //   const sectorAngles = pointCounts.map((count, idx) => {\n    //     const angle = count > 0\n    //       ? minAngle + (count / totalNonEmptyPoints) * remainingAngle\n    //       : minAngle;\n    //     console.log(`Sector ${idx} angle: ${angle}`);\n    //     return angle;\n    //   });\n\n    //   console.log(\"Sector angles:\", sectorAngles);\n\n    //   // Propagate angles to inner rings\n    //   const ringAngles = [sectorAngles];\n    //   for (let i = pointsData.length - 2; i >= 0; i--) {\n    //     const prevAngles = ringAngles[0];\n    //     const sectorCount = Math.max(1, 2 ** (i + 1));\n    //     const currAngles = new Array(sectorCount);\n    //     console.log(`Propagating to ring ${i}, expected sectors: ${sectorCount}`);\n\n    //     for (let j = 0; j < sectorCount; j++) {\n    //       const angle1 = prevAngles[j * 2] || 0;\n    //       const angle2 = prevAngles[j * 2 + 1] || 0;\n    //       currAngles[j] = angle1 + angle2;\n    //       console.log(`Ring ${i}, sector ${j}: ${currAngles[j]} (from ${angle1} + ${angle2})`);\n    //     }\n    //     ringAngles.unshift(currAngles);\n    //   }\n\n    //   console.log(\"Final ring angles:\", ringAngles);\n    //   return ringAngles;\n    // };\n    const calculateProportionalAngles = () => {\n      console.log(\"Starting calculateProportionalAngles...\");\n      console.log(\"pointsData:\", pointsData);\n      if (pointsData.length === 0) {\n        console.error(\"No points data available\");\n        return {\n          ringAngles: [],\n          sectorMap: new Map()\n        };\n      }\n      const lastRing = pointsData[pointsData.length - 1];\n      const lastRingPoints = lastRing.points || [];\n      const sectorsCount = Math.max(1, Math.round(2 ** lastRing.dimensions));\n      console.log(\"Last ring:\", lastRing);\n      console.log(\"Sectors count:\", sectorsCount);\n\n      // Create a map for sector counts in the outer ring\n      const sectorCounts = new Map();\n      for (let i = 0; i < sectorsCount; i++) {\n        sectorCounts.set(i, 0);\n      }\n\n      // Count points per sector\n      lastRingPoints.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2) || 0, sectorsCount - 1);\n        sectorCounts.set(sectorIndex, (sectorCounts.get(sectorIndex) || 0) + 1);\n      });\n      console.log(\"Sector counts:\", Array.from(sectorCounts.entries()));\n\n      // Calculate proportional angles for outer ring\n      const totalAngle = 2 * Math.PI;\n      const minAngle = Math.PI / 180; // 1 degree minimum\n      const totalPoints = Math.max(1, lastRingPoints.length);\n      const remainingAngle = totalAngle - sectorsCount * minAngle;\n      const sectorAnglesMap = new Map();\n      let currentAngle = Math.PI / 2; // Start at top\n\n      sectorCounts.forEach((count, sector) => {\n        const angle = count > 0 ? minAngle + count / totalPoints * remainingAngle : minAngle;\n        sectorAnglesMap.set(sector, {\n          startAngle: currentAngle,\n          endAngle: currentAngle + angle,\n          angleWidth: angle\n        });\n        currentAngle += angle;\n      });\n      console.log(\"Outer ring sector angles:\", Array.from(sectorAnglesMap.entries()));\n\n      // Propagate angles to inner rings\n      const ringAngles = [];\n      for (let i = 0; i < pointsData.length; i++) {\n        const sectorCount = Math.max(1, Math.round(2 ** (i + 1)));\n        const angles = new Array(sectorCount).fill(0);\n        ringAngles.push(angles);\n      }\n\n      // Set outer ring angles\n      const outerRingIndex = pointsData.length - 1;\n      sectorAnglesMap.forEach((angleData, sector) => {\n        ringAngles[outerRingIndex][sector] = angleData.angleWidth;\n      });\n\n      // Propagate inward\n      for (let i = outerRingIndex - 1; i >= 0; i--) {\n        const currSectorCount = ringAngles[i].length;\n        for (let j = 0; j < currSectorCount; j++) {\n          const child1 = ringAngles[i + 1][j * 2] || 0;\n          const child2 = ringAngles[i + 1][j * 2 + 1] || 0;\n          ringAngles[i][j] = child1 + child2;\n        }\n      }\n      console.log(\"Ring angles:\", ringAngles);\n      return {\n        ringAngles,\n        sectorMap: sectorAnglesMap\n      };\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    // const renderProportionalView = () => {\n    //   const ringAngles = calculateProportionalAngles();\n    //   console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n    //   if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n    //     console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n    //     renderNormalView();\n    //     return;\n    //   }\n\n    //   subspaces.forEach((key, index) => {\n    //     if (!ringVisibility[key]) return;\n    //     const innerRadius = (index / subspaces.length) * maxRadius;\n    //     const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n    //     let currentAngle = Math.PI / 2;\n\n    //     ringAngles[index].forEach((angle, i) => {\n    //       const startAngle = currentAngle;\n    //       const endAngle = currentAngle + angle;\n\n    //       g.append(\"path\")\n    //         .attr(\"d\", d3.arc()\n    //           .innerRadius(innerRadius)\n    //           .outerRadius(outerRadius)\n    //           .startAngle(startAngle)\n    //           .endAngle(endAngle)\n    //         )\n    //         .attr(\"fill\", getSectorColor(index, i))\n    //         .attr(\"fill-opacity\", 0.3)\n    //         .attr(\"stroke\", \"black\")\n    //         .attr(\"stroke-width\", 0.5)\n    //         .style(\"cursor\", \"pointer\");\n\n    //       currentAngle = endAngle;\n    //     });\n\n    //     g.append(\"text\")\n    //       .attr(\"x\", 0)\n    //       .attr(\"y\", -outerRadius - 5)\n    //       .attr(\"text-anchor\", \"middle\")\n    //       .attr(\"font-size\", \"16px\")\n    //       .attr(\"fill\", \"red\")\n    //       .attr(\"font-weight\", \"bold\")\n    //       .text(ringLabels[index]);\n\n    //     renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n    //   });\n    // };\n\n    // const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n    //   const isProportional = viewMode === \"proportional\";\n    //   const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n    //   const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n    //   let currentAngle = Math.PI / 2;\n    //   pointsData[index].points.forEach((point, i) => {\n    //     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    //     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    //     const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n    //     const startAngle = isProportional ?\n    //       currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n    //       (2 * Math.PI * bitVectorIndex) / sectors;\n    //     const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n    //     const centerAngle = startAngle + angleWidth / 2;\n\n    //     const minRadius = innerRadius;\n    //     const maxRadius = outerRadius;\n    //     const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n    //     const totalPoints = pointsData[index].points.length;\n    //     const clusterFactor = 0.86;\n    //     const overlapRadius =\n    //       innerRadius +\n    //       (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n    //       totalPoints;\n    //     const x = overlapRadius * Math.cos(centerAngle);\n    //     const y = overlapRadius * Math.sin(centerAngle);\n\n    //     point.Point_ID.forEach((id) => {\n    //       if (!pointPositions[id]) {\n    //         pointPositions[id] = [];\n    //       }\n    //       pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n    //     });\n\n    //     g.append(\"circle\")\n    //       .attr(\"cx\", x)\n    //       .attr(\"cy\", y)\n    //       .attr(\"r\", 3)\n    //       .attr(\"fill\", \"black\")\n    //       .attr(\"stroke\", \"white\")\n    //       .attr(\"stroke-width\", 0.5)\n    //       .style(\"pointer-events\", \"visible\")\n    //       .on(\"mouseover\", (event) => {\n    //         const pointIds = point.Point_ID.join(\", \");\n    //         let associatedLabels = [];\n    //         if (labelsData && labelsData.labels) {\n    //           Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n    //             if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n    //               associatedLabels.push(label);\n    //             }\n    //           });\n    //         }\n    //         const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n    //         tooltip\n    //           .style(\"visibility\", \"visible\")\n    //           .html(\n    //             `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n    //           );\n    //         setHoveredCoordinates({ ...point, label: labelText });\n    //       })\n    //       .on(\"mousemove\", (event) => {\n    //         tooltip\n    //           .style(\"top\", event.pageY + 10 + \"px\")\n    //           .style(\"left\", event.pageX + 10 + \"px\");\n    //       })\n    //       .on(\"mouseout\", () => {\n    //         tooltip.style(\"visibility\", \"hidden\");\n    //         setHoveredCoordinates(null);\n    //       });\n    //   });\n    // };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 749,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateProportionalAngles","log","ringAngles","sectorMap","Map","lastRing","lastRingPoints","sectorsCount","max","round","sectorCounts","set","forEach","point","pointData","entries","filter","bitVector","coord","join","parseInt","get","from","totalAngle","PI","minAngle","totalPoints","remainingAngle","sectorAnglesMap","currentAngle","count","sector","angle","startAngle","endAngle","angleWidth","sectorCount","angles","fill","push","outerRingIndex","angleData","currSectorCount","j","child1","child2","renderNormalView","innerRadius","outerRadius","sectors","rotationOffset","arc","text","renderPoints","renderProportionalView","positions","line","x","y","on","event","html","pageY","pageX","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\");\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//       //   g.append(\"text\")\n//       //     .attr(\"transform\", (d) => {\n//       //       const midAngle = (startAngle + endAngle) / 2;\n//       //       const textRadius = (innerRadius + outerRadius) / 2;\n//       //       const x = textRadius * Math.cos(Math.PI / 2 - midAngle);\n//       //       const y = textRadius * Math.sin(Math.PI / 2 - midAngle);\n//       //       let angleDeg = ((midAngle - Math.PI / 2) * 180) / Math.PI;\n//       //       let rotation = (angleDeg > 90 && angleDeg < 270) ? 0 : 0;\n//       //       return `translate(${x}, ${y}) rotate(${rotation})`;\n//       //     })\n//       //     .attr(\"text-anchor\", \"middle\")\n//       //     .attr(\"alignment-baseline\", \"middle\")\n//       //     .attr(\"font-size\", \"14px\")\n//       //     .attr(\"fill\", \"black\")\n//       //     .attr(\"font-weight\", \"normal\")\n//       //     .text(\n//       //       i\n//       //         .toString(2)\n//       //         .padStart(index + 1, \"0\")\n//       //         .replace(/0/g, \"*\")\n//       //         .replace(/1/g, \"0\")\n//       //         .replace(/\\*/g, \"1\")\n//       //     );\n//       }\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                   )\n//                 })\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n//               highlightedElements = { line, circles, originalColor };\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n//             });\n//         }\n//       }\n//     });\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n//     return () => {\n//       tooltip.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // const calculateProportionalAngles = () => {\n    //   console.log(\"Starting calculateProportionalAngles...\");\n    //   console.log(\"pointsData:\", pointsData);\n\n    //   if (pointsData.length === 0) {\n    //     console.error(\"No points data available\");\n    //     return [];\n    //   }\n\n    //   const lastRing = pointsData[pointsData.length - 1];\n    //   const lastRingPoints = lastRing.points || [];\n    //   const sectorsCount = Math.max(1, 2 ** lastRing.dimensions);\n\n    //   console.log(\"Last ring:\", lastRing);\n    //   console.log(\"Last ring points length:\", lastRingPoints.length);\n    //   console.log(\"Sectors count:\", sectorsCount);\n\n    //   // Fallback for empty or invalid last ring\n    //   if (lastRingPoints.length === 0 || !Number.isFinite(sectorsCount)) {\n    //     console.warn(\"Invalid last ring data, using equal angles\");\n    //     return pointsData.map((_, i) => {\n    //       const sectorCount = Math.max(1, 2 ** (i + 1));\n    //       console.log(`Ring ${i} sector count: ${sectorCount}`);\n    //       return Array(sectorCount).fill(2 * Math.PI / sectorCount);\n    //     });\n    //   }\n\n    //   const pointCounts = new Array(sectorsCount).fill(0);\n    //   console.log(\"Initialized pointCounts:\", pointCounts);\n\n    //   lastRingPoints.forEach((point, idx) => {\n    //     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    //     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    //     const sectorIndex = parseInt(bitVector, 2);\n    //     if (sectorIndex >= 0 && sectorIndex < sectorsCount) {\n    //       pointCounts[sectorIndex]++;\n    //     } else {\n    //       console.warn(`Point ${idx}: Invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n    //     }\n    //   });\n\n    //   console.log(\"Point counts per sector:\", pointCounts);\n\n    //   const minAngle = Math.PI / 180; // 1 degree minimum\n    //   const totalAngle = 2 * Math.PI;\n    //   const totalNonEmptyPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n    //   const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n    //   console.log(\"Total non-empty points:\", totalNonEmptyPoints);\n    //   console.log(\"Remaining angle:\", remainingAngle);\n\n    //   const sectorAngles = pointCounts.map((count, idx) => {\n    //     const angle = count > 0\n    //       ? minAngle + (count / totalNonEmptyPoints) * remainingAngle\n    //       : minAngle;\n    //     console.log(`Sector ${idx} angle: ${angle}`);\n    //     return angle;\n    //   });\n\n    //   console.log(\"Sector angles:\", sectorAngles);\n\n    //   // Propagate angles to inner rings\n    //   const ringAngles = [sectorAngles];\n    //   for (let i = pointsData.length - 2; i >= 0; i--) {\n    //     const prevAngles = ringAngles[0];\n    //     const sectorCount = Math.max(1, 2 ** (i + 1));\n    //     const currAngles = new Array(sectorCount);\n    //     console.log(`Propagating to ring ${i}, expected sectors: ${sectorCount}`);\n\n    //     for (let j = 0; j < sectorCount; j++) {\n    //       const angle1 = prevAngles[j * 2] || 0;\n    //       const angle2 = prevAngles[j * 2 + 1] || 0;\n    //       currAngles[j] = angle1 + angle2;\n    //       console.log(`Ring ${i}, sector ${j}: ${currAngles[j]} (from ${angle1} + ${angle2})`);\n    //     }\n    //     ringAngles.unshift(currAngles);\n    //   }\n\n    //   console.log(\"Final ring angles:\", ringAngles);\n    //   return ringAngles;\n    // };\n    const calculateProportionalAngles = () => {\n      console.log(\"Starting calculateProportionalAngles...\");\n      console.log(\"pointsData:\", pointsData);\n\n      if (pointsData.length === 0) {\n        console.error(\"No points data available\");\n        return { ringAngles: [], sectorMap: new Map() };\n      }\n\n      const lastRing = pointsData[pointsData.length - 1];\n      const lastRingPoints = lastRing.points || [];\n      const sectorsCount = Math.max(1, Math.round(2 ** lastRing.dimensions));\n\n      console.log(\"Last ring:\", lastRing);\n      console.log(\"Sectors count:\", sectorsCount);\n\n      // Create a map for sector counts in the outer ring\n      const sectorCounts = new Map();\n      for (let i = 0; i < sectorsCount; i++) {\n        sectorCounts.set(i, 0);\n      }\n\n      // Count points per sector\n      lastRingPoints.forEach((point) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2) || 0, sectorsCount - 1);\n        sectorCounts.set(sectorIndex, (sectorCounts.get(sectorIndex) || 0) + 1);\n      });\n\n      console.log(\"Sector counts:\", Array.from(sectorCounts.entries()));\n\n      // Calculate proportional angles for outer ring\n      const totalAngle = 2 * Math.PI;\n      const minAngle = Math.PI / 180; // 1 degree minimum\n      const totalPoints = Math.max(1, lastRingPoints.length);\n      const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n      const sectorAnglesMap = new Map();\n      let currentAngle = Math.PI / 2; // Start at top\n\n      sectorCounts.forEach((count, sector) => {\n        const angle = count > 0\n          ? minAngle + (count / totalPoints) * remainingAngle\n          : minAngle;\n        sectorAnglesMap.set(sector, {\n          startAngle: currentAngle,\n          endAngle: currentAngle + angle,\n          angleWidth: angle\n        });\n        currentAngle += angle;\n      });\n\n      console.log(\"Outer ring sector angles:\", Array.from(sectorAnglesMap.entries()));\n\n      // Propagate angles to inner rings\n      const ringAngles = [];\n      for (let i = 0; i < pointsData.length; i++) {\n        const sectorCount = Math.max(1, Math.round(2 ** (i + 1)));\n        const angles = new Array(sectorCount).fill(0);\n        ringAngles.push(angles);\n      }\n\n      // Set outer ring angles\n      const outerRingIndex = pointsData.length - 1;\n      sectorAnglesMap.forEach((angleData, sector) => {\n        ringAngles[outerRingIndex][sector] = angleData.angleWidth;\n      });\n\n      // Propagate inward\n      for (let i = outerRingIndex - 1; i >= 0; i--) {\n        const currSectorCount = ringAngles[i].length;\n        for (let j = 0; j < currSectorCount; j++) {\n          const child1 = ringAngles[i + 1][j * 2] || 0;\n          const child2 = ringAngles[i + 1][j * 2 + 1] || 0;\n          ringAngles[i][j] = child1 + child2;\n        }\n      }\n\n      console.log(\"Ring angles:\", ringAngles);\n      return { ringAngles, sectorMap: sectorAnglesMap };\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          g.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", -outerRadius - 5)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"16px\")\n            .attr(\"fill\", \"red\")\n            .attr(\"font-weight\", \"bold\")\n            .text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    // const renderProportionalView = () => {\n    //   const ringAngles = calculateProportionalAngles();\n    //   console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n    //   if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n    //     console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n    //     renderNormalView();\n    //     return;\n    //   }\n\n    //   subspaces.forEach((key, index) => {\n    //     if (!ringVisibility[key]) return;\n    //     const innerRadius = (index / subspaces.length) * maxRadius;\n    //     const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n    //     let currentAngle = Math.PI / 2;\n\n    //     ringAngles[index].forEach((angle, i) => {\n    //       const startAngle = currentAngle;\n    //       const endAngle = currentAngle + angle;\n\n    //       g.append(\"path\")\n    //         .attr(\"d\", d3.arc()\n    //           .innerRadius(innerRadius)\n    //           .outerRadius(outerRadius)\n    //           .startAngle(startAngle)\n    //           .endAngle(endAngle)\n    //         )\n    //         .attr(\"fill\", getSectorColor(index, i))\n    //         .attr(\"fill-opacity\", 0.3)\n    //         .attr(\"stroke\", \"black\")\n    //         .attr(\"stroke-width\", 0.5)\n    //         .style(\"cursor\", \"pointer\");\n\n    //       currentAngle = endAngle;\n    //     });\n\n    //     g.append(\"text\")\n    //       .attr(\"x\", 0)\n    //       .attr(\"y\", -outerRadius - 5)\n    //       .attr(\"text-anchor\", \"middle\")\n    //       .attr(\"font-size\", \"16px\")\n    //       .attr(\"fill\", \"red\")\n    //       .attr(\"font-weight\", \"bold\")\n    //       .text(ringLabels[index]);\n\n    //     renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n    //   });\n    // };\n\n    // const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n    //   const isProportional = viewMode === \"proportional\";\n    //   const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n    //   const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n    //   let currentAngle = Math.PI / 2;\n    //   pointsData[index].points.forEach((point, i) => {\n    //     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    //     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    //     const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n    //     const startAngle = isProportional ?\n    //       currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n    //       (2 * Math.PI * bitVectorIndex) / sectors;\n    //     const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n    //     const centerAngle = startAngle + angleWidth / 2;\n\n    //     const minRadius = innerRadius;\n    //     const maxRadius = outerRadius;\n    //     const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n    //     const totalPoints = pointsData[index].points.length;\n    //     const clusterFactor = 0.86;\n    //     const overlapRadius =\n    //       innerRadius +\n    //       (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n    //       totalPoints;\n    //     const x = overlapRadius * Math.cos(centerAngle);\n    //     const y = overlapRadius * Math.sin(centerAngle);\n\n    //     point.Point_ID.forEach((id) => {\n    //       if (!pointPositions[id]) {\n    //         pointPositions[id] = [];\n    //       }\n    //       pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n    //     });\n\n    //     g.append(\"circle\")\n    //       .attr(\"cx\", x)\n    //       .attr(\"cy\", y)\n    //       .attr(\"r\", 3)\n    //       .attr(\"fill\", \"black\")\n    //       .attr(\"stroke\", \"white\")\n    //       .attr(\"stroke-width\", 0.5)\n    //       .style(\"pointer-events\", \"visible\")\n    //       .on(\"mouseover\", (event) => {\n    //         const pointIds = point.Point_ID.join(\", \");\n    //         let associatedLabels = [];\n    //         if (labelsData && labelsData.labels) {\n    //           Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n    //             if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n    //               associatedLabels.push(label);\n    //             }\n    //           });\n    //         }\n    //         const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n    //         tooltip\n    //           .style(\"visibility\", \"visible\")\n    //           .html(\n    //             `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n    //           );\n    //         setHoveredCoordinates({ ...point, label: labelText });\n    //       })\n    //       .on(\"mousemove\", (event) => {\n    //         tooltip\n    //           .style(\"top\", event.pageY + 10 + \"px\")\n    //           .style(\"left\", event.pageX + 10 + \"px\");\n    //       })\n    //       .on(\"mouseout\", () => {\n    //         tooltip.style(\"visibility\", \"hidden\");\n    //         setHoveredCoordinates(null);\n    //       });\n    //   });\n    // };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappingszB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,QAAQ,CAAC;EAElDF,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIQ,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM,KAAK,CAAC,EAAE;MACnFC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEZ,QAAQ,CAAC;MACrD;IACF;IAEA,IAAI,CAACC,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MACjDU,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEX,UAAU,CAAC;MAChD;IACF;IAEA,MAAMY,GAAG,GAAGjB,EAAE,CAACkB,MAAM,CAACT,QAAQ,CAACU,OAAO,CAAC;IACvCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAE3B,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,KAAK,EAAEC,MAAM,CAAC,GAAG,CAAC,GAAGC,MAAM;IAEtD,MAAMI,CAAC,GAAGX,GAAG,CACVY,IAAI,CAAC,OAAO,EAAEP,KAAK,CAAC,CACpBO,IAAI,CAAC,QAAQ,EAAEN,MAAM,CAAC,CACtBO,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAaP,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;IAE9D,MAAMQ,OAAO,GAAG/B,EAAE,CACfkB,MAAM,CAAC,MAAM,CAAC,CACdY,MAAM,CAAC,KAAK,CAAC,CACbD,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBG,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAC7BA,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC7BA,KAAK,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAC/CA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CACvBA,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CACvBA,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAC7BA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC;IAE7B,MAAMC,aAAa,GAAIC,OAAO,IAAK;MACjC,IAAI,CAAC7B,UAAU,IAAI,CAACA,UAAU,CAAC8B,MAAM,EAAE,OAAO,MAAM;MACpD,KAAK,MAAMC,KAAK,IAAIxB,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC8B,MAAM,CAAC,EAAE;QAClD,MAAME,SAAS,GAAGhC,UAAU,CAAC8B,MAAM,CAACC,KAAK,CAAC;QAC1C,IAAIE,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACG,QAAQ,CAACC,MAAM,CAACP,OAAO,CAAC,CAAC,EAAE;UACnE,OAAOQ,UAAU,CAACN,KAAK,CAAC;QAC1B;MACF;MACA,OAAO,MAAM;IACf,CAAC;IAED,MAAMM,UAAU,GAAG1C,EAAE,CAAC2C,YAAY,CAAC3C,EAAE,CAAC4C,gBAAgB,CAAC,CAACC,MAAM,CAACjC,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC8B,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;IACpG,MAAMW,YAAY,GAAIC,KAAK,IAAK;MAC9B,MAAMC,UAAU,GAAGpC,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM;MAC/C,MAAMmC,aAAa,GAAGjD,EAAE,CAACkD,eAAe,CAAClD,EAAE,CAACmD,iBAAiB,CAAC,CAACN,MAAM,CAAC,CAACG,UAAU,EAAE,CAAC,CAAC,CAAC;MACtF,OAAOhD,EAAE,CAACoD,KAAK,CAACH,aAAa,CAACF,KAAK,CAAC,CAAC;IACvC,CAAC;IACD,MAAMM,cAAc,GAAGA,CAACN,KAAK,EAAEO,WAAW,KAAK;MAC7C,MAAMC,SAAS,GAAGvD,EAAE,CAACwD,GAAG,CAACV,YAAY,CAACC,KAAK,CAAC,CAAC;MAC7C,MAAMU,UAAU,GAAGH,WAAW,GAAG,CAAC,KAAK,CAAC;MACxC,OAAOtD,EAAE,CAACwD,GAAG,CAACD,SAAS,CAACG,CAAC,EAAEH,SAAS,CAACI,CAAC,EAAEF,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC9E,CAAC;IAED,MAAMC,SAAS,GAAGjD,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC;IACvCyD,SAAS,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACjD,MAAM,GAAGkD,CAAC,CAAClD,MAAM,CAAC;IAC7C,MAAMmD,UAAU,GAAGJ,SAAS,CAACK,GAAG,CAAEC,GAAG,KAAM;MACzCA,GAAG;MACHC,MAAM,EAAEhE,QAAQ,CAAC+D,GAAG,CAAC,IAAI,EAAE;MAC3BE,UAAU,EAAEF,GAAG,CAACrD,MAAM;MACtBwD,UAAU,EAAEH;IACd,CAAC,CAAC,CAAC;IACH,MAAMI,UAAU,GAAGV,SAAS,CAACK,GAAG,CAAC,CAACM,CAAC,EAAEC,CAAC,KAAKC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGF,CAAC,CAAC,CAAC;IACvE,MAAMG,cAAc,GAAG,CAAC,CAAC;;IAEzB;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA,MAAMC,2BAA2B,GAAGA,CAAA,KAAM;MACxC9D,OAAO,CAAC+D,GAAG,CAAC,yCAAyC,CAAC;MACtD/D,OAAO,CAAC+D,GAAG,CAAC,aAAa,EAAEb,UAAU,CAAC;MAEtC,IAAIA,UAAU,CAACnD,MAAM,KAAK,CAAC,EAAE;QAC3BC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;QACzC,OAAO;UAAE+D,UAAU,EAAE,EAAE;UAAEC,SAAS,EAAE,IAAIC,GAAG,CAAC;QAAE,CAAC;MACjD;MAEA,MAAMC,QAAQ,GAAGjB,UAAU,CAACA,UAAU,CAACnD,MAAM,GAAG,CAAC,CAAC;MAClD,MAAMqE,cAAc,GAAGD,QAAQ,CAACd,MAAM,IAAI,EAAE;MAC5C,MAAMgB,YAAY,GAAG1D,IAAI,CAAC2D,GAAG,CAAC,CAAC,EAAE3D,IAAI,CAAC4D,KAAK,CAAC,CAAC,IAAIJ,QAAQ,CAACb,UAAU,CAAC,CAAC;MAEtEtD,OAAO,CAAC+D,GAAG,CAAC,YAAY,EAAEI,QAAQ,CAAC;MACnCnE,OAAO,CAAC+D,GAAG,CAAC,gBAAgB,EAAEM,YAAY,CAAC;;MAE3C;MACA,MAAMG,YAAY,GAAG,IAAIN,GAAG,CAAC,CAAC;MAC9B,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,YAAY,EAAEX,CAAC,EAAE,EAAE;QACrCc,YAAY,CAACC,GAAG,CAACf,CAAC,EAAE,CAAC,CAAC;MACxB;;MAEA;MACAU,cAAc,CAACM,OAAO,CAAEC,KAAK,IAAK;QAChC,MAAMC,SAAS,GAAG/E,MAAM,CAACgF,OAAO,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC1B,GAAG,CAAC,KAAKA,GAAG,KAAK,UAAU,CAAC;QAC7E,MAAM2B,SAAS,GAAGH,SAAS,CAACzB,GAAG,CAAC,CAAC,CAACM,CAAC,EAAEuB,KAAK,CAAC,KAAMA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;QAC9E,MAAM1C,WAAW,GAAG5B,IAAI,CAACC,GAAG,CAACsE,QAAQ,CAACH,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,EAAEV,YAAY,GAAG,CAAC,CAAC;QAC3EG,YAAY,CAACC,GAAG,CAAClC,WAAW,EAAE,CAACiC,YAAY,CAACW,GAAG,CAAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MACzE,CAAC,CAAC;MAEFvC,OAAO,CAAC+D,GAAG,CAAC,gBAAgB,EAAExC,KAAK,CAAC6D,IAAI,CAACZ,YAAY,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC;;MAEjE;MACA,MAAMQ,UAAU,GAAG,CAAC,GAAG1E,IAAI,CAAC2E,EAAE;MAC9B,MAAMC,QAAQ,GAAG5E,IAAI,CAAC2E,EAAE,GAAG,GAAG,CAAC,CAAC;MAChC,MAAME,WAAW,GAAG7E,IAAI,CAAC2D,GAAG,CAAC,CAAC,EAAEF,cAAc,CAACrE,MAAM,CAAC;MACtD,MAAM0F,cAAc,GAAGJ,UAAU,GAAIhB,YAAY,GAAGkB,QAAS;MAE7D,MAAMG,eAAe,GAAG,IAAIxB,GAAG,CAAC,CAAC;MACjC,IAAIyB,YAAY,GAAGhF,IAAI,CAAC2E,EAAE,GAAG,CAAC,CAAC,CAAC;;MAEhCd,YAAY,CAACE,OAAO,CAAC,CAACkB,KAAK,EAAEC,MAAM,KAAK;QACtC,MAAMC,KAAK,GAAGF,KAAK,GAAG,CAAC,GACnBL,QAAQ,GAAIK,KAAK,GAAGJ,WAAW,GAAIC,cAAc,GACjDF,QAAQ;QACZG,eAAe,CAACjB,GAAG,CAACoB,MAAM,EAAE;UAC1BE,UAAU,EAAEJ,YAAY;UACxBK,QAAQ,EAAEL,YAAY,GAAGG,KAAK;UAC9BG,UAAU,EAAEH;QACd,CAAC,CAAC;QACFH,YAAY,IAAIG,KAAK;MACvB,CAAC,CAAC;MAEF9F,OAAO,CAAC+D,GAAG,CAAC,2BAA2B,EAAExC,KAAK,CAAC6D,IAAI,CAACM,eAAe,CAACb,OAAO,CAAC,CAAC,CAAC,CAAC;;MAE/E;MACA,MAAMb,UAAU,GAAG,EAAE;MACrB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,UAAU,CAACnD,MAAM,EAAE2D,CAAC,EAAE,EAAE;QAC1C,MAAMwC,WAAW,GAAGvF,IAAI,CAAC2D,GAAG,CAAC,CAAC,EAAE3D,IAAI,CAAC4D,KAAK,CAAC,CAAC,KAAKb,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzD,MAAMyC,MAAM,GAAG,IAAI5E,KAAK,CAAC2E,WAAW,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;QAC7CpC,UAAU,CAACqC,IAAI,CAACF,MAAM,CAAC;MACzB;;MAEA;MACA,MAAMG,cAAc,GAAGpD,UAAU,CAACnD,MAAM,GAAG,CAAC;MAC5C2F,eAAe,CAAChB,OAAO,CAAC,CAAC6B,SAAS,EAAEV,MAAM,KAAK;QAC7C7B,UAAU,CAACsC,cAAc,CAAC,CAACT,MAAM,CAAC,GAAGU,SAAS,CAACN,UAAU;MAC3D,CAAC,CAAC;;MAEF;MACA,KAAK,IAAIvC,CAAC,GAAG4C,cAAc,GAAG,CAAC,EAAE5C,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC5C,MAAM8C,eAAe,GAAGxC,UAAU,CAACN,CAAC,CAAC,CAAC3D,MAAM;QAC5C,KAAK,IAAI0G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,eAAe,EAAEC,CAAC,EAAE,EAAE;UACxC,MAAMC,MAAM,GAAG1C,UAAU,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC+C,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;UAC5C,MAAME,MAAM,GAAG3C,UAAU,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC+C,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;UAChDzC,UAAU,CAACN,CAAC,CAAC,CAAC+C,CAAC,CAAC,GAAGC,MAAM,GAAGC,MAAM;QACpC;MACF;MAEA3G,OAAO,CAAC+D,GAAG,CAAC,cAAc,EAAEC,UAAU,CAAC;MACvC,OAAO;QAAEA,UAAU;QAAEC,SAAS,EAAEyB;MAAgB,CAAC;IACnD,CAAC;IAED,MAAMkB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B9D,SAAS,CAAC4B,OAAO,CAAC,CAACtB,GAAG,EAAEpB,KAAK,KAAK;QAChC,IAAI,CAACxC,cAAc,CAAC4D,GAAG,CAAC,EAAE;QAC1B,MAAMyD,WAAW,GAAI7E,KAAK,GAAGc,SAAS,CAAC/C,MAAM,GAAIW,SAAS;QAC1D,MAAMoG,WAAW,GAAI,CAAC9E,KAAK,GAAG,CAAC,IAAIc,SAAS,CAAC/C,MAAM,GAAIW,SAAS;QAChE,MAAMqG,OAAO,GAAG,CAAC,KAAK/E,KAAK,GAAG,CAAC,CAAC;QAChC,MAAMgF,cAAc,GAAGrG,IAAI,CAAC2E,EAAE,GAAG,CAAC;QAElC,KAAK,IAAI5B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqD,OAAO,EAAErD,CAAC,EAAE,EAAE;UAChC,MAAMqC,UAAU,GAAI,CAAC,GAAGpF,IAAI,CAAC2E,EAAE,GAAG5B,CAAC,GAAIqD,OAAO,GAAGC,cAAc;UAC/D,MAAMhB,QAAQ,GAAI,CAAC,GAAGrF,IAAI,CAAC2E,EAAE,IAAI5B,CAAC,GAAG,CAAC,CAAC,GAAIqD,OAAO,GAAGC,cAAc;UAEnEnG,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAE7B,EAAE,CAACgI,GAAG,CAAC,CAAC,CAChBJ,WAAW,CAACA,WAAW,CAAC,CACxBC,WAAW,CAACA,WAAW,CAAC,CACxBf,UAAU,CAACA,UAAU,CAAC,CACtBC,QAAQ,CAACA,QAAQ,CACpB,CAAC,CACAlF,IAAI,CAAC,MAAM,EAAEwB,cAAc,CAACN,KAAK,EAAE0B,CAAC,CAAC,CAAC,CACtC5C,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBG,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;UAE7BJ,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,CAACgG,WAAW,GAAG,CAAC,CAAC,CAC3BhG,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CACnBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3BoG,IAAI,CAAC1D,UAAU,CAACxB,KAAK,CAAC,CAAC;QAC5B;QACAmF,YAAY,CAACnF,KAAK,EAAE6E,WAAW,EAAEC,WAAW,EAAEC,OAAO,CAAC;MACxD,CAAC,CAAC;IACJ,CAAC;;IAED;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAIpH,QAAQ,KAAK,QAAQ,EAAE;MACzBiH,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACLQ,sBAAsB,CAAC,CAAC;IAC1B;IAEAvH,MAAM,CAACgF,OAAO,CAAChB,cAAc,CAAC,CAACa,OAAO,CAAC,CAAC,CAACvD,OAAO,EAAEkG,SAAS,CAAC,KAAK;MAC/D,IAAIA,SAAS,CAACtH,MAAM,GAAG,CAAC,EAAE;QACxB,KAAK,IAAI2D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2D,SAAS,CAACtH,MAAM,GAAG,CAAC,EAAE2D,CAAC,EAAE,EAAE;UAC7C,MAAM4D,IAAI,GAAGzG,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CAC1BD,IAAI,CAAC,IAAI,EAAEuG,SAAS,CAAC3D,CAAC,CAAC,CAAC6D,CAAC,CAAC,CAC1BzG,IAAI,CAAC,IAAI,EAAEuG,SAAS,CAAC3D,CAAC,CAAC,CAAC8D,CAAC,CAAC,CAC1B1G,IAAI,CAAC,IAAI,EAAEuG,SAAS,CAAC3D,CAAC,GAAG,CAAC,CAAC,CAAC6D,CAAC,CAAC,CAC9BzG,IAAI,CAAC,IAAI,EAAEuG,SAAS,CAAC3D,CAAC,GAAG,CAAC,CAAC,CAAC8D,CAAC,CAAC,CAC9B1G,IAAI,CAAC,QAAQ,EAAEI,aAAa,CAACC,OAAO,CAAC,CAAC,CACtCL,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAC3BG,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAC1BwG,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;YAC1B1G,OAAO,CACJC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9B0G,IAAI,CAAC,wBAAwBxG,OAAO,EAAE,CAAC;UAC5C,CAAC,CAAC,CACDsG,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;YAC1B1G,OAAO,CACJC,KAAK,CAAC,KAAK,EAAEyG,KAAK,CAACE,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrC3G,KAAK,CAAC,MAAM,EAAEyG,KAAK,CAACG,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;UAC3C,CAAC,CAAC,CACDJ,EAAE,CAAC,UAAU,EAAE,MAAM;YACpBzG,OAAO,CAACC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;UACvC,CAAC,CAAC;QACN;MACF;IACF,CAAC,CAAC;IAEF,MAAM6G,IAAI,GAAG7I,EAAE,CAAC6I,IAAI,CAAC,CAAC,CAACL,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MAC3C7G,CAAC,CAACC,IAAI,CAAC,WAAW,EAAE4G,KAAK,CAACK,SAAS,CAAC;IACtC,CAAC,CAAC;IACF7H,GAAG,CAAC8H,IAAI,CAACF,IAAI,CAAC;IAEd,OAAO,MAAM;MACX9G,OAAO,CAACV,MAAM,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAACjB,QAAQ,EAAEC,UAAU,EAAEE,cAAc,EAAED,qBAAqB,EAAEI,QAAQ,CAAC,CAAC;EAE3E,oBACER,OAAA;IAAK8B,KAAK,EAAE;MAAEV,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAyH,QAAA,gBAC5C9I,OAAA;MAAK8B,KAAK,EAAE;QAAEiH,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,gBACnC9I,OAAA;QACEgJ,OAAO,EAAEA,CAAA,KAAMvI,WAAW,CAAC,QAAQ,CAAE;QACrCqB,KAAK,EAAE;UACLmH,WAAW,EAAE,MAAM;UACnBC,OAAO,EAAE,UAAU;UACnBC,eAAe,EAAE3I,QAAQ,KAAK,QAAQ,GAAG,SAAS,GAAG,SAAS;UAC9D0C,KAAK,EAAE1C,QAAQ,KAAK,QAAQ,GAAG,OAAO,GAAG;QAC3C,CAAE;QAAAsI,QAAA,EACH;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTvJ,OAAA;QACEgJ,OAAO,EAAEA,CAAA,KAAMvI,WAAW,CAAC,cAAc,CAAE;QAC3CqB,KAAK,EAAE;UACLoH,OAAO,EAAE,UAAU;UACnBC,eAAe,EAAE3I,QAAQ,KAAK,cAAc,GAAG,SAAS,GAAG,SAAS;UACpE0C,KAAK,EAAE1C,QAAQ,KAAK,cAAc,GAAG,OAAO,GAAG;QACjD,CAAE;QAAAsI,QAAA,EACH;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNvJ,OAAA;MAAKwJ,GAAG,EAAEjJ,QAAS;MAACuB,KAAK,EAAE;QAAEV,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAA+H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEV,CAAC;AAACjJ,EAAA,CA1dIL,iBAAiB;AAAAwJ,EAAA,GAAjBxJ,iBAAiB;AA4dvB,eAAeA,iBAAiB;AAAC,IAAAwJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}