{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n\n//   useEffect(() => {\n//     if (jsonData && Object.keys(jsonData).length > 0) {\n//       const subspaces = Object.keys(jsonData);\n//       subspaces.sort((a, b) => a.length - b.length);\n\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     }\n//   }, [jsonData]);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({\n//       ...prev,\n//       [key]: !prev[key],\n//     }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         alignItems: \"flex-start\",\n//         width: \"100%\",\n//       }}\n//     >\n//       <div style={{ flexGrow: 1, minWidth: \"800px\" }}>\n//         <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//       </div>\n\n//       <div style={{ minWidth: \"250px\", marginLeft: \"50px\" }}>\n//         <button onClick={toggleAllRingsVisibility}>\n//           {Object.values(ringVisibility).every((v) => v)\n//             ? \"Collapse All\"\n//             : \"Expand All\"}\n//         </button>\n//         {Object.keys(jsonData || {}).map((key) => (\n//           <div key={key} style={{ margin: \"5px 0\" }}>\n//             <button\n//               onClick={() => toggleRingVisibility(key)}\n//               style={{\n//                 width: \"50%\",\n//                 padding: \"6px\",\n//                 fontSize: \"14px\",\n//                 cursor: \"pointer\",\n//                 backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n//                 border: \"1px solid #ccc\",\n//                 borderRadius: \"4px\",\n//                 whiteSpace: \"normal\",\n//                 wordBreak: \"break-word\",\n//                 overflowWrap: \"break-word\",\n//                 textAlign: \"left\",\n//               }}\n//             >\n//               {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n  const [sectorVisibility, setSectorVisibility] = useState({});\n  useEffect(() => {\n    if (jsonData && Object.keys(jsonData).length > 0) {\n      const subspaces = Object.keys(jsonData);\n      subspaces.sort((a, b) => a.length - b.length);\n      const initialVisibility = subspaces.reduce((acc, key) => {\n        acc[key] = true;\n        return acc;\n      }, {});\n      setRingVisibility(initialVisibility);\n    }\n  }, [jsonData]);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const points = jsonData[key];\n      const sectors = 2 ** (index + 1);\n      const filteredSectors = Array.from({\n        length: sectors\n      }, (_, i) => i).filter(i => points.some(p => (p.Point_ID || []).some(id => id % sectors === i)));\n      const totalSectors = filteredSectors.length;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      filteredSectors.forEach((sectorIndex, i) => {\n        const startAngle = 2 * Math.PI * i / totalSectors;\n        const endAngle = 2 * Math.PI * (i + 1) / totalSectors;\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", d3.schemeCategory10[i % 10]).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n      });\n    });\n  }, [jsonData, labelsData, ringVisibility]);\n  const toggleRingVisibility = key => {\n    setRingVisibility(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"flex-start\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        minWidth: \"800px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: graphRef,\n        style: {\n          width: \"100%\",\n          height: \"800px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minWidth: \"250px\",\n        marginLeft: \"50px\"\n      },\n      children: Object.keys(jsonData || {}).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"5px 0\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleRingVisibility(key),\n          style: {\n            width: \"100%\",\n            padding: \"6px\",\n            fontSize: \"14px\",\n            cursor: \"pointer\",\n            backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\"\n          },\n          children: ringVisibility[key] ? `- ${key}` : `+ ${key}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"9BA1IstHvq/9x2pkF02SmirHCwY=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","_s","graphRef","ringVisibility","setRingVisibility","sectorVisibility","setSectorVisibility","Object","keys","length","subspaces","sort","a","b","initialVisibility","reduce","acc","key","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","forEach","index","points","sectors","filteredSectors","Array","from","_","i","filter","some","p","Point_ID","id","totalSectors","innerRadius","outerRadius","sectorIndex","startAngle","PI","endAngle","arc","schemeCategory10","toggleRingVisibility","prev","style","display","justifyContent","alignItems","children","flexGrow","minWidth","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","map","onClick","padding","fontSize","cursor","backgroundColor","border","borderRadius","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n\n\n//   useEffect(() => {\n//     if (jsonData && Object.keys(jsonData).length > 0) {\n//       const subspaces = Object.keys(jsonData);\n//       subspaces.sort((a, b) => a.length - b.length);\n\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     }\n//   }, [jsonData]);\n\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({\n//       ...prev,\n//       [key]: !prev[key],\n//     }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         alignItems: \"flex-start\",\n//         width: \"100%\",\n//       }}\n//     >\n//       <div style={{ flexGrow: 1, minWidth: \"800px\" }}>\n//         <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//       </div>\n\n//       <div style={{ minWidth: \"250px\", marginLeft: \"50px\" }}>\n//         <button onClick={toggleAllRingsVisibility}>\n//           {Object.values(ringVisibility).every((v) => v)\n//             ? \"Collapse All\"\n//             : \"Expand All\"}\n//         </button>\n//         {Object.keys(jsonData || {}).map((key) => (\n//           <div key={key} style={{ margin: \"5px 0\" }}>\n//             <button\n//               onClick={() => toggleRingVisibility(key)}\n//               style={{\n//                 width: \"50%\",\n//                 padding: \"6px\",\n//                 fontSize: \"14px\",\n//                 cursor: \"pointer\",\n//                 backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n//                 border: \"1px solid #ccc\",\n//                 borderRadius: \"4px\",\n//                 whiteSpace: \"normal\",\n//                 wordBreak: \"break-word\",\n//                 overflowWrap: \"break-word\",\n//                 textAlign: \"left\",\n//               }}\n//             >\n//               {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n  const [sectorVisibility, setSectorVisibility] = useState({});\n\n  useEffect(() => {\n    if (jsonData && Object.keys(jsonData).length > 0) {\n      const subspaces = Object.keys(jsonData);\n      subspaces.sort((a, b) => a.length - b.length);\n\n      const initialVisibility = subspaces.reduce((acc, key) => {\n        acc[key] = true;\n        return acc;\n      }, {});\n      setRingVisibility(initialVisibility);\n    }\n  }, [jsonData]);\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n\n      const points = jsonData[key];\n      const sectors = 2 ** (index + 1);\n      const filteredSectors = Array.from({ length: sectors }, (_, i) => i).filter(\n        (i) => points.some((p) => (p.Point_ID || []).some((id) => (id % sectors) === i))\n      );\n      const totalSectors = filteredSectors.length;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n      filteredSectors.forEach((sectorIndex, i) => {\n        const startAngle = (2 * Math.PI * i) / totalSectors;\n        const endAngle = (2 * Math.PI * (i + 1)) / totalSectors;\n\n        g.append(\"path\")\n          .attr(\"d\", d3.arc()\n            .innerRadius(innerRadius)\n            .outerRadius(outerRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle)\n          )\n          .attr(\"fill\", d3.schemeCategory10[i % 10])\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5);\n      });\n    });\n  }, [jsonData, labelsData, ringVisibility]);\n\n  const toggleRingVisibility = (key) => {\n    setRingVisibility((prev) => ({ ...prev, [key]: !prev[key] }));\n  };\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"flex-start\", width: \"100%\" }}>\n      <div style={{ flexGrow: 1, minWidth: \"800px\" }}>\n        <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n      </div>\n      <div style={{ minWidth: \"250px\", marginLeft: \"50px\" }}>\n        {Object.keys(jsonData || {}).map((key) => (\n          <div key={key} style={{ margin: \"5px 0\" }}>\n            <button\n              onClick={() => toggleRingVisibility(key)}\n              style={{\n                width: \"100%\",\n                padding: \"6px\",\n                fontSize: \"14px\",\n                cursor: \"pointer\",\n                backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n                border: \"1px solid #ccc\",\n                borderRadius: \"4px\",\n              }}\n            >\n              {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}