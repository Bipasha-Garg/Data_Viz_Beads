{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import HierarchicalGraph from \"./JsonDisplay\";\n\n// const App = () => {\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"\");\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hoveredCoordinates, setHoveredCoordinates] = useState(null);\n//   const [labelsData, setLabelsData] = useState(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n//   const legendRef = useRef(null); // Initialize legendRef\n\n//   useEffect(() => {\n//     if (labelsData && legendRef.current) {\n//       // Clear any existing SVG content in the legend container\n//       d3.select(legendRef.current).select(\"svg\").remove();\n\n//       const labelEntries = Object.keys(labelsData.labels || {});\n//       const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelEntries);\n\n//       // Create an SVG element for the legend\n//       const legend = d3.select(legendRef.current)\n//         .append(\"svg\")\n//         .attr(\"width\", 200)\n//         .attr(\"height\", labelEntries.length * 25 + 20);\n\n//       // Add rectangles for each label\n//       legend.selectAll(\"rect\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"rect\")\n//         .attr(\"x\", 0)\n//         .attr(\"y\", (d, i) => i * 25)\n//         .attr(\"width\", 20)\n//         .attr(\"height\", 20)\n//         .attr(\"fill\", d => colorScale(d));\n\n//       // Add text for each label\n//       legend.selectAll(\"text\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"text\")\n//         .attr(\"x\", 30)\n//         .attr(\"y\", (d, i) => i * 25 + 15)\n//         .text(d => d)\n//         .attr(\"font-size\", \"12px\")\n//         .attr(\"alignment-baseline\", \"middle\");\n//     }\n//   }, [labelsData]); // Re-run this effect when labelsData changes\n\n//   const handleFileSelect = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setSelectedFile(file);\n//       setFileName(file.name);\n//       setError(null);\n//     }\n//   };\n\n//   const handleUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) {\n//       setError(\"Please select a file first\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!uploadResponse.ok) {\n//         throw new Error(\"Upload failed\");\n//       }\n\n//       const result = await uploadResponse.json();\n//       console.log(\"Upload successful:\", result);\n\n//       const jsonResponse = await fetch(\n//         `http://127.0.0.1:5000/uploads/${result.json_filename}`\n//       );\n//       const processedData = await jsonResponse.json();\n\n//       const labelsResponse = await fetch(\n//         `http://127.0.0.1:5000/uploads/labels_file.json`\n//       );\n//       const processedLabelsData = await labelsResponse.json();\n\n//       setJsonData(processedData);\n//       setLabelsData(processedLabelsData);\n\n//       // Initialize ring visibility\n//       const subspaces = Object.keys(processedData);\n//       subspaces.sort((a, b) => a.length - b.length);\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({\n//       ...prev,\n//       [key]: !prev[key],\n//     }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData || {});\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n\n//   return (\n//     <div className=\"h-screen bg-gray-100 p-4 sm:p-6 flex flex-col sm:flex-row\">\n//       {/* Left Dashboard */}\n//       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg mb-4 sm:mb-0 sm:mr-4\">\n//         <h1 className=\"text-xl font-bold mb-4\">File Upload</h1>\n//         <div className=\"mb-4\">\n//           <input\n//             type=\"file\"\n//             accept=\".csv\"\n//             onChange={handleFileSelect}\n//             className=\"mb-2 w-full\"\n//             disabled={isLoading}\n//           />\n//           {fileName && (\n//             <div className=\"mt-2 p-2 bg-blue-50 rounded\">\n//               Selected file: <span className=\"font-semibold\">{fileName}</span>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           type=\"button\"\n//           onClick={handleUpload}\n//           disabled={!selectedFile || isLoading}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded w-full\"\n//         >\n//           {isLoading ? \"Processing...\" : \"Upload\"}\n//         </button>\n//         {error && <div className=\"mt-2 text-red-500\">{error}</div>}\n\n//         <div className=\"mt-6\">\n//           <h2 className=\"text-xl font-bold mb-4\">Subspace Rings</h2>\n//           <button\n//             onClick={toggleAllRingsVisibility}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded w-full mb-4\"\n//           >\n//             {Object.values(ringVisibility).every((v) => v)\n//               ? \"Collapse All Rings\"\n//               : \"Expand All Rings\"}\n//           </button>\n//           {Object.keys(jsonData || {}).map((key) => (\n//             <div key={key} className=\"mb-2\">\n//               <button\n//                 onClick={() => toggleRingVisibility(key)}\n//                 className=\"w-full p-2 text-left rounded\"\n//                 style={{\n//                   backgroundColor: ringVisibility[key] ? \"#fca5a5\" : \"lightgray\",\n//                   border: \"1px solid #ccc\",\n//                 }}\n//               >\n//                 {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//               </button>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Visualization Area */}\n//       <div className=\"flex-1 flex flex-col bg-white shadow rounded-lg p-4 mb-4 sm:mb-0 sm:mr-4\">\n//         <h2 className=\"text-2xl font-bold mb-4\">Visualization</h2>\n//         <div className=\"flex-1 flex justify-center items-center\">\n//           {jsonData && (\n//             <HierarchicalGraph\n//               jsonData={jsonData}\n//               labelsData={labelsData}\n//               setHoveredCoordinates={setHoveredCoordinates}\n//               ringVisibility={ringVisibility}\n//             />\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Right Dashboard */}\n//       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg\">\n\n//         <h2 className=\"text-xl font-bold mb-4\">Point Info</h2>\n\n//         {/* Labels Legend */}\n//         <div ref={legendRef} className=\"mt-4\"></div>\n//         {hoveredCoordinates && (\n//           <div className=\"p-2 bg-green-50 rounded text-lg\">\n//             <strong>Hovered Node:</strong>\n//             <div>ID: {hoveredCoordinates.Point_IDs}</div>\n//             {Object.keys(hoveredCoordinates)\n//               .filter((key) => key !== \"id\")\n//               .map((key) => (\n//                 <div key={key}>\n//                   <strong>{key}:</strong>{\" \"}\n//                   {hoveredCoordinates[key].toFixed\n//                     ? hoveredCoordinates[key].toFixed(2)\n//                     : hoveredCoordinates[key]}\n//                 </div>\n//               ))}\n//           </div>\n//         )}\n\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport HierarchicalGraph from \"./JsonDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileName, setFileName] = useState(\"\");\n  const [jsonData, setJsonData] = useState(null);\n  const [labelsData, setLabelsData] = useState(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n  const legendRef = useRef(null);\n  const [subspaceLegend, setSubspaceLegend] = useState({});\n  useEffect(() => {\n    if (legendRef.current) {\n      d3.select(legendRef.current).select(\"svg\").remove();\n      const subspaces = Object.entries(subspaceLegend);\n      const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(subspaces.map(([key]) => key));\n      const legend = d3.select(legendRef.current).append(\"svg\").attr(\"width\", 200).attr(\"height\", subspaces.length * 25 + 20);\n      legend.selectAll(\"rect\").data(subspaces).enter().append(\"rect\").attr(\"x\", 0).attr(\"y\", (d, i) => i * 25).attr(\"width\", 20).attr(\"height\", 20).attr(\"fill\", d => colorScale(d[0]));\n      legend.selectAll(\"text\").data(subspaces).enter().append(\"text\").attr(\"x\", 30).attr(\"y\", (d, i) => i * 25 + 15).text(d => `${d[1]}: ${d[0]}`).attr(\"font-size\", \"12px\").attr(\"alignment-baseline\", \"middle\");\n    }\n  }, [subspaceLegend]);\n  const handleFileSelect = e => {\n    const file = e.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n      setFileName(file.name);\n    }\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a file first\");\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", selectedFile);\n      const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!uploadResponse.ok) throw new Error(\"Upload failed\");\n      const result = await uploadResponse.json();\n      const jsonResponse = await fetch(`http://127.0.0.1:5000/uploads/${result.json_filename}`);\n      const processedData = await jsonResponse.json();\n      const labelsResponse = await fetch(`http://127.0.0.1:5000/uploads/labels_file.json`);\n      const processedLabelsData = await labelsResponse.json();\n      setJsonData(processedData);\n      setLabelsData(processedLabelsData);\n      const subspaces = Object.keys(processedData);\n      subspaces.sort((a, b) => a.length - b.length);\n      const initialVisibility = subspaces.reduce((acc, key) => ({\n        ...acc,\n        [key]: true\n      }), {});\n      setRingVisibility(initialVisibility);\n    } catch (err) {\n      console.error(\"Error uploading file:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen bg-gray-100 flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/4 p-4 bg-white shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold\",\n        children: \"Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-2 p-2 bg-blue-500 text-white rounded\",\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4\",\n      children: jsonData && /*#__PURE__*/_jsxDEV(HierarchicalGraph, {\n        jsonData: jsonData,\n        labelsData: labelsData,\n        ringVisibility: ringVisibility,\n        subspaceLegend: subspaceLegend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/4 p-4 bg-white shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-bold\",\n        children: \"Subspace Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: legendRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"bP4Vm9xBStFnGE2hxq8dlrHLXrs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","HierarchicalGraph","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","fileName","setFileName","jsonData","setJsonData","labelsData","setLabelsData","ringVisibility","setRingVisibility","legendRef","subspaceLegend","setSubspaceLegend","current","select","remove","subspaces","Object","entries","colorScale","scaleOrdinal","schemeCategory10","domain","map","key","legend","append","attr","length","selectAll","data","enter","d","i","text","handleFileSelect","e","file","target","files","name","handleUpload","preventDefault","alert","formData","FormData","uploadResponse","fetch","method","body","ok","Error","result","json","jsonResponse","json_filename","processedData","labelsResponse","processedLabelsData","keys","sort","a","b","initialVisibility","reduce","acc","err","console","error","className","children","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/App.js"],"sourcesContent":["  // import React, { useState, useEffect, useRef } from \"react\";\n  // import * as d3 from \"d3\";\n  // import HierarchicalGraph from \"./JsonDisplay\";\n\n  // const App = () => {\n  //   const [selectedFile, setSelectedFile] = useState(null);\n  //   const [fileName, setFileName] = useState(\"\");\n  //   const [jsonData, setJsonData] = useState(null);\n  //   const [error, setError] = useState(null);\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [hoveredCoordinates, setHoveredCoordinates] = useState(null);\n  //   const [labelsData, setLabelsData] = useState(null);\n  //   const [ringVisibility, setRingVisibility] = useState({});\n  //   const legendRef = useRef(null); // Initialize legendRef\n\n  //   useEffect(() => {\n  //     if (labelsData && legendRef.current) {\n  //       // Clear any existing SVG content in the legend container\n  //       d3.select(legendRef.current).select(\"svg\").remove();\n\n  //       const labelEntries = Object.keys(labelsData.labels || {});\n  //       const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelEntries);\n\n  //       // Create an SVG element for the legend\n  //       const legend = d3.select(legendRef.current)\n  //         .append(\"svg\")\n  //         .attr(\"width\", 200)\n  //         .attr(\"height\", labelEntries.length * 25 + 20);\n\n  //       // Add rectangles for each label\n  //       legend.selectAll(\"rect\")\n  //         .data(labelEntries)\n  //         .enter()\n  //         .append(\"rect\")\n  //         .attr(\"x\", 0)\n  //         .attr(\"y\", (d, i) => i * 25)\n  //         .attr(\"width\", 20)\n  //         .attr(\"height\", 20)\n  //         .attr(\"fill\", d => colorScale(d));\n\n  //       // Add text for each label\n  //       legend.selectAll(\"text\")\n  //         .data(labelEntries)\n  //         .enter()\n  //         .append(\"text\")\n  //         .attr(\"x\", 30)\n  //         .attr(\"y\", (d, i) => i * 25 + 15)\n  //         .text(d => d)\n  //         .attr(\"font-size\", \"12px\")\n  //         .attr(\"alignment-baseline\", \"middle\");\n  //     }\n  //   }, [labelsData]); // Re-run this effect when labelsData changes\n\n  //   const handleFileSelect = (e) => {\n  //     const file = e.target.files[0];\n  //     if (file) {\n  //       setSelectedFile(file);\n  //       setFileName(file.name);\n  //       setError(null);\n  //     }\n  //   };\n\n  //   const handleUpload = async (e) => {\n  //     e.preventDefault();\n  //     if (!selectedFile) {\n  //       setError(\"Please select a file first\");\n  //       return;\n  //     }\n\n  //     setIsLoading(true);\n  //     const formData = new FormData();\n  //     formData.append(\"file\", selectedFile);\n\n  //     try {\n  //       const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n  //         method: \"POST\",\n  //         body: formData,\n  //       });\n\n  //       if (!uploadResponse.ok) {\n  //         throw new Error(\"Upload failed\");\n  //       }\n\n  //       const result = await uploadResponse.json();\n  //       console.log(\"Upload successful:\", result);\n\n  //       const jsonResponse = await fetch(\n  //         `http://127.0.0.1:5000/uploads/${result.json_filename}`\n  //       );\n  //       const processedData = await jsonResponse.json();\n\n  //       const labelsResponse = await fetch(\n  //         `http://127.0.0.1:5000/uploads/labels_file.json`\n  //       );\n  //       const processedLabelsData = await labelsResponse.json();\n\n  //       setJsonData(processedData);\n  //       setLabelsData(processedLabelsData);\n\n  //       // Initialize ring visibility\n  //       const subspaces = Object.keys(processedData);\n  //       subspaces.sort((a, b) => a.length - b.length);\n  //       const initialVisibility = subspaces.reduce((acc, key) => {\n  //         acc[key] = true;\n  //         return acc;\n  //       }, {});\n  //       setRingVisibility(initialVisibility);\n  //     } catch (err) {\n  //       setError(err.message);\n  //     } finally {\n  //       setIsLoading(false);\n  //     }\n  //   };\n\n  //   const toggleRingVisibility = (key) => {\n  //     setRingVisibility((prev) => ({\n  //       ...prev,\n  //       [key]: !prev[key],\n  //     }));\n  //   };\n\n  //   const toggleAllRingsVisibility = () => {\n  //     const subspaces = Object.keys(jsonData || {});\n  //     subspaces.sort((a, b) => a.length - b.length);\n\n  //     const newVisibility = subspaces.reduce((acc, key, index) => {\n  //       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n  //       return acc;\n  //     }, {});\n  //     setRingVisibility(newVisibility);\n  //   };\n\n  //   return (\n  //     <div className=\"h-screen bg-gray-100 p-4 sm:p-6 flex flex-col sm:flex-row\">\n  //       {/* Left Dashboard */}\n  //       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg mb-4 sm:mb-0 sm:mr-4\">\n  //         <h1 className=\"text-xl font-bold mb-4\">File Upload</h1>\n  //         <div className=\"mb-4\">\n  //           <input\n  //             type=\"file\"\n  //             accept=\".csv\"\n  //             onChange={handleFileSelect}\n  //             className=\"mb-2 w-full\"\n  //             disabled={isLoading}\n  //           />\n  //           {fileName && (\n  //             <div className=\"mt-2 p-2 bg-blue-50 rounded\">\n  //               Selected file: <span className=\"font-semibold\">{fileName}</span>\n  //             </div>\n  //           )}\n  //         </div>\n  //         <button\n  //           type=\"button\"\n  //           onClick={handleUpload}\n  //           disabled={!selectedFile || isLoading}\n  //           className=\"bg-blue-500 text-white px-4 py-2 rounded w-full\"\n  //         >\n  //           {isLoading ? \"Processing...\" : \"Upload\"}\n  //         </button>\n  //         {error && <div className=\"mt-2 text-red-500\">{error}</div>}\n\n  //         <div className=\"mt-6\">\n  //           <h2 className=\"text-xl font-bold mb-4\">Subspace Rings</h2>\n  //           <button\n  //             onClick={toggleAllRingsVisibility}\n  //             className=\"bg-blue-500 text-white px-4 py-2 rounded w-full mb-4\"\n  //           >\n  //             {Object.values(ringVisibility).every((v) => v)\n  //               ? \"Collapse All Rings\"\n  //               : \"Expand All Rings\"}\n  //           </button>\n  //           {Object.keys(jsonData || {}).map((key) => (\n  //             <div key={key} className=\"mb-2\">\n  //               <button\n  //                 onClick={() => toggleRingVisibility(key)}\n  //                 className=\"w-full p-2 text-left rounded\"\n  //                 style={{\n  //                   backgroundColor: ringVisibility[key] ? \"#fca5a5\" : \"lightgray\",\n  //                   border: \"1px solid #ccc\",\n  //                 }}\n  //               >\n  //                 {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n  //               </button>\n  //             </div>\n  //           ))}\n  //         </div>\n  //       </div>\n\n  //       {/* Visualization Area */}\n  //       <div className=\"flex-1 flex flex-col bg-white shadow rounded-lg p-4 mb-4 sm:mb-0 sm:mr-4\">\n  //         <h2 className=\"text-2xl font-bold mb-4\">Visualization</h2>\n  //         <div className=\"flex-1 flex justify-center items-center\">\n  //           {jsonData && (\n  //             <HierarchicalGraph\n  //               jsonData={jsonData}\n  //               labelsData={labelsData}\n  //               setHoveredCoordinates={setHoveredCoordinates}\n  //               ringVisibility={ringVisibility}\n  //             />\n  //           )}\n  //         </div>\n  //       </div>\n\n  //       {/* Right Dashboard */}\n  //       <div className=\"w-full sm:w-1/4 p-4 bg-white shadow rounded-lg\">\n          \n  //         <h2 className=\"text-xl font-bold mb-4\">Point Info</h2>\n\n  //         {/* Labels Legend */}\n  //         <div ref={legendRef} className=\"mt-4\"></div>\n  //         {hoveredCoordinates && (\n  //           <div className=\"p-2 bg-green-50 rounded text-lg\">\n  //             <strong>Hovered Node:</strong>\n  //             <div>ID: {hoveredCoordinates.Point_IDs}</div>\n  //             {Object.keys(hoveredCoordinates)\n  //               .filter((key) => key !== \"id\")\n  //               .map((key) => (\n  //                 <div key={key}>\n  //                   <strong>{key}:</strong>{\" \"}\n  //                   {hoveredCoordinates[key].toFixed\n  //                     ? hoveredCoordinates[key].toFixed(2)\n  //                     : hoveredCoordinates[key]}\n  //                 </div>\n  //               ))}\n  //           </div>\n  //         )}\n\n  //       </div>\n  //     </div>\n  //   );\n  // };\n\n// export default App;\n  \nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport HierarchicalGraph from \"./JsonDisplay\";\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileName, setFileName] = useState(\"\");\n  const [jsonData, setJsonData] = useState(null);\n  const [labelsData, setLabelsData] = useState(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n  const legendRef = useRef(null);\n  const [subspaceLegend, setSubspaceLegend] = useState({});\n\n  useEffect(() => {\n    if (legendRef.current) {\n      d3.select(legendRef.current).select(\"svg\").remove();\n\n      const subspaces = Object.entries(subspaceLegend);\n      const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(subspaces.map(([key]) => key));\n\n      const legend = d3.select(legendRef.current)\n        .append(\"svg\")\n        .attr(\"width\", 200)\n        .attr(\"height\", subspaces.length * 25 + 20);\n\n      legend.selectAll(\"rect\")\n        .data(subspaces)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i) => i * 25)\n        .attr(\"width\", 20)\n        .attr(\"height\", 20)\n        .attr(\"fill\", d => colorScale(d[0]));\n\n      legend.selectAll(\"text\")\n        .data(subspaces)\n        .enter()\n        .append(\"text\")\n        .attr(\"x\", 30)\n        .attr(\"y\", (d, i) => i * 25 + 15)\n        .text(d => `${d[1]}: ${d[0]}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"alignment-baseline\", \"middle\");\n    }\n  }, [subspaceLegend]);\n\n  const handleFileSelect = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n      setFileName(file.name);\n    }\n  };\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    if (!selectedFile) {\n      alert(\"Please select a file first\");\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", selectedFile);\n\n      const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!uploadResponse.ok) throw new Error(\"Upload failed\");\n\n      const result = await uploadResponse.json();\n      const jsonResponse = await fetch(`http://127.0.0.1:5000/uploads/${result.json_filename}`);\n      const processedData = await jsonResponse.json();\n\n      const labelsResponse = await fetch(`http://127.0.0.1:5000/uploads/labels_file.json`);\n      const processedLabelsData = await labelsResponse.json();\n\n      setJsonData(processedData);\n      setLabelsData(processedLabelsData);\n\n      const subspaces = Object.keys(processedData);\n      subspaces.sort((a, b) => a.length - b.length);\n      const initialVisibility = subspaces.reduce((acc, key) => ({ ...acc, [key]: true }), {});\n      setRingVisibility(initialVisibility);\n    } catch (err) {\n      console.error(\"Error uploading file:\", err);\n    }\n  };\n\n  return (\n    <div className=\"h-screen bg-gray-100 flex\">\n      <div className=\"w-1/4 p-4 bg-white shadow\">\n        <h2 className=\"text-lg font-bold\">Controls</h2>\n        <input type=\"file\" onChange={handleFileSelect} />\n        <button className=\"mt-2 p-2 bg-blue-500 text-white rounded\" onClick={handleUpload}>\n          Upload\n        </button>\n      </div>\n\n      <div className=\"flex-1 p-4\">\n        {jsonData && (\n          <HierarchicalGraph\n            jsonData={jsonData}\n            labelsData={labelsData}\n            ringVisibility={ringVisibility}\n            subspaceLegend={subspaceLegend}\n          />\n        )}\n      </div>\n\n      <div className=\"w-1/4 p-4 bg-white shadow\">\n        <h2 className=\"text-lg font-bold\">Subspace Legend</h2>\n        <div ref={legendRef}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEF;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,iBAAiB,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}