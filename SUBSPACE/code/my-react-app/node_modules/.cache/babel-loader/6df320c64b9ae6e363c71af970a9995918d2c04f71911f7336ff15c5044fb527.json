{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n\n//   useEffect(() => {\n//     if (jsonData && Object.keys(jsonData).length > 0) {\n//       const subspaces = Object.keys(jsonData);\n//       subspaces.sort((a, b) => a.length - b.length);\n\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     }\n//   }, [jsonData]);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({\n//       ...prev,\n//       [key]: !prev[key],\n//     }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         alignItems: \"flex-start\",\n//         width: \"100%\",\n//       }}\n//     >\n//       <div style={{ flexGrow: 1, minWidth: \"800px\" }}>\n//         <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//       </div>\n\n//       <div style={{ minWidth: \"250px\", marginLeft: \"50px\" }}>\n//         <button onClick={toggleAllRingsVisibility}>\n//           {Object.values(ringVisibility).every((v) => v)\n//             ? \"Collapse All\"\n//             : \"Expand All\"}\n//         </button>\n//         {Object.keys(jsonData || {}).map((key) => (\n//           <div key={key} style={{ margin: \"5px 0\" }}>\n//             <button\n//               onClick={() => toggleRingVisibility(key)}\n//               style={{\n//                 width: \"50%\",\n//                 padding: \"6px\",\n//                 fontSize: \"14px\",\n//                 cursor: \"pointer\",\n//                 backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n//                 border: \"1px solid #ccc\",\n//                 borderRadius: \"4px\",\n//                 whiteSpace: \"normal\",\n//                 wordBreak: \"break-word\",\n//                 overflowWrap: \"break-word\",\n//                 textAlign: \"left\",\n//               }}\n//             >\n//               {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n  const [sectorCollapse, setSectorCollapse] = useState({});\n  useEffect(() => {\n    if (jsonData && Object.keys(jsonData).length > 0) {\n      const subspaces = Object.keys(jsonData);\n      subspaces.sort((a, b) => a.length - b.length);\n      const initialVisibility = subspaces.reduce((acc, key) => {\n        acc[key] = true;\n        return acc;\n      }, {});\n      setRingVisibility(initialVisibility);\n      const initialSectorCollapse = subspaces.reduce((acc, key) => {\n        acc[key] = false;\n        return acc;\n      }, {});\n      setSectorCollapse(initialSectorCollapse);\n    }\n  }, [jsonData]);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const pointPositions = {};\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      const sectorCounts = new Array(sectors).fill(0);\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        sectorCounts[bitVectorIndex]++;\n      });\n      const totalPoints = pointsData[index].points.length;\n      const sectorAngles = sectorCounts.map(count => count === 0 && sectorCollapse[key] ? 0 : 2 * Math.PI * count / totalPoints);\n      let startAngle = rotationOffset;\n      sectorAngles.forEach((angle, i) => {\n        if (angle === 0) return;\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(startAngle + angle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(key);\n        startAngle += angle;\n      });\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const sectorAngle = sectorAngles[bitVectorIndex];\n        if (sectorAngle === 0) return;\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const angleStart = startAngle - sectorAngle;\n        const angleEnd = startAngle;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const totalPointsInSector = sectorCounts[bitVectorIndex];\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector) / totalPointsInSector;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}`);\n          setHoveredCoordinates(point);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, labelsData, ringVisibility, sectorCollapse, setHoveredCoordinates]);\n  const toggleRingVisibility = key => {\n    setRingVisibility(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n  const toggleAllRingsVisibility = () => {\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const newVisibility = subspaces.reduce((acc, key, index) => {\n      acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n      return acc;\n    }, {});\n    setRingVisibility(newVisibility);\n  };\n  const toggleSectorCollapse = key => {\n    setSectorCollapse(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"flex-start\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flexGrow: 1,\n        minWidth: \"800px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: graphRef,\n        style: {\n          width: \"100%\",\n          height: \"800px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        minWidth: \"250px\",\n        marginLeft: \"50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAllRingsVisibility,\n        children: Object.values(ringVisibility).every(v => v) ? \"Collapse All\" : \"Expand All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this), Object.keys(jsonData || {}).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"5px 0\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleRingVisibility(key),\n          style: {\n            width: \"50%\",\n            padding: \"6px\",\n            fontSize: \"14px\",\n            cursor: \"pointer\",\n            backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            whiteSpace: \"normal\",\n            wordBreak: \"break-word\",\n            overflowWrap: \"break-word\",\n            textAlign: \"left\"\n          },\n          children: ringVisibility[key] ? `- ${key}` : `+ ${key}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleSectorCollapse(key),\n          style: {\n            width: \"50%\",\n            padding: \"6px\",\n            fontSize: \"14px\",\n            cursor: \"pointer\",\n            backgroundColor: sectorCollapse[key] ? \"lightgreen\" : \"lightgray\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            whiteSpace: \"normal\",\n            wordBreak: \"break-word\",\n            overflowWrap: \"break-word\",\n            textAlign: \"left\"\n          },\n          children: sectorCollapse[key] ? `Expand Sectors` : `Collapse Sectors`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 598,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"AQqLJ4ExC6TOLTXyooT892YKFt4=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","_s","graphRef","ringVisibility","setRingVisibility","sectorCollapse","setSectorCollapse","Object","keys","length","subspaces","sort","a","b","initialVisibility","reduce","acc","key","initialSectorCollapse","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","pointsData","map","points","dimensions","subspaceId","pointPositions","forEach","innerRadius","outerRadius","sectors","rotationOffset","PI","sectorCounts","fill","point","pointData","entries","filter","bitVector","coord","join","bitVectorIndex","parseInt","totalPoints","sectorAngles","count","startAngle","angle","i","arc","endAngle","text","sectorAngle","minRadius","randomRadius","random","angleStart","angleEnd","centerAngle","totalPointsInSector","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","push","on","event","pointIds","html","toFixed","pageY","pageX","positions","zoom","transform","call","toggleRingVisibility","prev","toggleAllRingsVisibility","newVisibility","toggleSectorCollapse","display","justifyContent","alignItems","children","flexGrow","minWidth","ref","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","onClick","values","every","v","padding","fontSize","cursor","backgroundColor","border","borderRadius","whiteSpace","wordBreak","overflowWrap","textAlign","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n\n\n//   useEffect(() => {\n//     if (jsonData && Object.keys(jsonData).length > 0) {\n//       const subspaces = Object.keys(jsonData);\n//       subspaces.sort((a, b) => a.length - b.length);\n\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     }\n//   }, [jsonData]);\n\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({\n//       ...prev,\n//       [key]: !prev[key],\n//     }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         alignItems: \"flex-start\",\n//         width: \"100%\",\n//       }}\n//     >\n//       <div style={{ flexGrow: 1, minWidth: \"800px\" }}>\n//         <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//       </div>\n\n//       <div style={{ minWidth: \"250px\", marginLeft: \"50px\" }}>\n//         <button onClick={toggleAllRingsVisibility}>\n//           {Object.values(ringVisibility).every((v) => v)\n//             ? \"Collapse All\"\n//             : \"Expand All\"}\n//         </button>\n//         {Object.keys(jsonData || {}).map((key) => (\n//           <div key={key} style={{ margin: \"5px 0\" }}>\n//             <button\n//               onClick={() => toggleRingVisibility(key)}\n//               style={{\n//                 width: \"50%\",\n//                 padding: \"6px\",\n//                 fontSize: \"14px\",\n//                 cursor: \"pointer\",\n//                 backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n//                 border: \"1px solid #ccc\",\n//                 borderRadius: \"4px\",\n//                 whiteSpace: \"normal\",\n//                 wordBreak: \"break-word\",\n//                 overflowWrap: \"break-word\",\n//                 textAlign: \"left\",\n//               }}\n//             >\n//               {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n  const [sectorCollapse, setSectorCollapse] = useState({});\n\n  useEffect(() => {\n    if (jsonData && Object.keys(jsonData).length > 0) {\n      const subspaces = Object.keys(jsonData);\n      subspaces.sort((a, b) => a.length - b.length);\n\n      const initialVisibility = subspaces.reduce((acc, key) => {\n        acc[key] = true;\n        return acc;\n      }, {});\n      setRingVisibility(initialVisibility);\n\n      const initialSectorCollapse = subspaces.reduce((acc, key) => {\n        acc[key] = false;\n        return acc;\n      }, {});\n      setSectorCollapse(initialSectorCollapse);\n    }\n  }, [jsonData]);\n\n  useEffect(() => {\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3\n      .scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const pointPositions = {};\n\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      const sectorCounts = new Array(sectors).fill(0);\n      pointsData[index].points.forEach((point) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        sectorCounts[bitVectorIndex]++;\n      });\n\n      const totalPoints = pointsData[index].points.length;\n      const sectorAngles = sectorCounts.map((count) =>\n        count === 0 && sectorCollapse[key] ? 0 : (2 * Math.PI * count) / totalPoints\n      );\n\n      let startAngle = rotationOffset;\n      sectorAngles.forEach((angle, i) => {\n        if (angle === 0) return;\n\n        g.append(\"path\")\n          .attr(\n            \"d\",\n            d3\n              .arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(startAngle + angle)\n          )\n          .attr(\"fill\", getSectorColor(index, i))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5);\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"font-weight\", \"bold\")\n          .text(key);\n\n        startAngle += angle;\n      });\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const sectorAngle = sectorAngles[bitVectorIndex];\n        if (sectorAngle === 0) return;\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        const angleStart = startAngle - sectorAngle;\n        const angleEnd = startAngle;\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const totalPointsInSector = sectorCounts[bitVectorIndex];\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) /\n          totalPointsInSector;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n                  2\n                )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n              );\n            setHoveredCoordinates(point);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.3)\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n  }, [jsonData, labelsData, ringVisibility, sectorCollapse, setHoveredCoordinates]);\n\n  const toggleRingVisibility = (key) => {\n    setRingVisibility((prev) => ({\n      ...prev,\n      [key]: !prev[key],\n    }));\n  };\n\n  const toggleAllRingsVisibility = () => {\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const newVisibility = subspaces.reduce((acc, key, index) => {\n      acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n      return acc;\n    }, {});\n    setRingVisibility(newVisibility);\n  };\n\n  const toggleSectorCollapse = (key) => {\n    setSectorCollapse((prev) => ({\n      ...prev,\n      [key]: !prev[key],\n    }));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"flex-start\",\n        width: \"100%\",\n      }}\n    >\n      <div style={{ flexGrow: 1, minWidth: \"800px\" }}>\n        <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n      </div>\n\n      <div style={{ minWidth: \"250px\", marginLeft: \"50px\" }}>\n        <button onClick={toggleAllRingsVisibility}>\n          {Object.values(ringVisibility).every((v) => v)\n            ? \"Collapse All\"\n            : \"Expand All\"}\n        </button>\n        {Object.keys(jsonData || {}).map((key) => (\n          <div key={key} style={{ margin: \"5px 0\" }}>\n            <button\n              onClick={() => toggleRingVisibility(key)}\n              style={{\n                width: \"50%\",\n                padding: \"6px\",\n                fontSize: \"14px\",\n                cursor: \"pointer\",\n                backgroundColor: ringVisibility[key] ? \"lightblue\" : \"lightgray\",\n                border: \"1px solid #ccc\",\n                borderRadius: \"4px\",\n                whiteSpace: \"normal\",\n                wordBreak: \"break-word\",\n                overflowWrap: \"break-word\",\n                textAlign: \"left\",\n              }}\n            >\n              {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n            </button>\n            <button\n              onClick={() => toggleSectorCollapse(key)}\n              style={{\n                width: \"50%\",\n                padding: \"6px\",\n                fontSize: \"14px\",\n                cursor: \"pointer\",\n                backgroundColor: sectorCollapse[key] ? \"lightgreen\" : \"lightgray\",\n                border: \"1px solid #ccc\",\n                borderRadius: \"4px\",\n                whiteSpace: \"normal\",\n                wordBreak: \"break-word\",\n                overflowWrap: \"break-word\",\n                textAlign: \"left\",\n              }}\n            >\n              {sectorCollapse[key] ? `Expand Sectors` : `Collapse Sectors`}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}