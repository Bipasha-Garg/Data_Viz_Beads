{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData,labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {};\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 3301 : 0, 1, 0.5);\n//     };\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n\n//       // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n//       const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(subspace.key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//             totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n//         const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n//         const legendData = [\n//           { color: \"yellow\", label: \"Positive Bit\" },\n//           { color: \"pink\", label: \"Negative Bit\" },\n//         ];\n//         legendData.forEach((item, index) => {\n//           legend\n//             .append(\"rect\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", index * 20)\n//             .attr(\"width\", 15)\n//             .attr(\"height\", 15)\n//             .attr(\"fill\", item.color);\n\n//           legend\n//             .append(\"text\")\n//             .attr(\"x\", 20)\n//             .attr(\"y\", index * 20 + 12)\n//             .text(item.label)\n//             .attr(\"font-size\", \"12px\")\n//             .attr(\"alignment-baseline\", \"middle\");\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  console.log(labelsData);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const pointPositions = {};\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Generate unique colors for each label\n    // Define color scale globally to avoid unnecessary re-renders\n\n    // Step 1: Extract unique labels dynamically\n    const labelKeys = Object.keys(labelsData);\n\n    // Step 2: Create a color scale dynamically based on the number of labels\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelKeys);\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\"; // Ensure labelsData is properly structured\n\n      for (const label in labelsData.labels) {\n        if (Array.isArray(labelsData.labels[label]) && labelsData.labels[label].includes(pointId)) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\"; // Default color if no label matches\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 3301 : 0, 1, 0.5);\n    };\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n\n      // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n      const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(2 * Math.PI * i / sectors + rotationOffset).endAngle(2 * Math.PI * (i + 1) / sectors + rotationOffset)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(subspace.key);\n      }\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n      }\n      subspace.points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const totalPoints = subspace.points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: subspace.key\n          });\n        });\n        const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n        const legendData = [{\n          color: \"yellow\",\n          label: \"Positive Bit\"\n        }, {\n          color: \"pink\",\n          label: \"Negative Bit\"\n        }];\n        legendData.forEach((item, index) => {\n          legend.append(\"rect\").attr(\"x\", 0).attr(\"y\", index * 20).attr(\"width\", 15).attr(\"height\", 15).attr(\"fill\", item.color);\n          legend.append(\"text\").attr(\"x\", 20).attr(\"y\", index * 20 + 12).text(item.label).attr(\"font-size\", \"12px\").attr(\"alignment-baseline\", \"middle\");\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`);\n          setHoveredCoordinates(point);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"800px\",\n      height: \"800px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 481,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","_s","graphRef","console","log","Object","keys","length","error","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","pointPositions","tooltip","style","labelKeys","colorScale","scaleOrdinal","schemeCategory10","domain","getLabelColor","pointId","labels","label","Array","isArray","includes","getSectorColor","index","sectorIndex","hsl","forEach","subspace","innerRadius","outerRadius","sectors","rotationOffset","PI","i","arc","startAngle","endAngle","text","angle","x1","cos","y1","sin","x2","y2","point","pointData","entries","filter","bitVector","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","centerAngle","totalPoints","clusterFactor","overlapRadius","x","y","Point_ID","id","push","legend","legendData","color","item","on","event","pointIds","html","toFixed","pageY","pageX","positions","zoom","transform","call","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData,labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {};\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 3301 : 0, 1, 0.5);\n//     };\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n\n//       // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n//       const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(subspace.key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//             totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n//         const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n//         const legendData = [\n//           { color: \"yellow\", label: \"Positive Bit\" },\n//           { color: \"pink\", label: \"Negative Bit\" },\n//         ];\n//         legendData.forEach((item, index) => {\n//           legend\n//             .append(\"rect\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", index * 20)\n//             .attr(\"width\", 15)\n//             .attr(\"height\", 15)\n//             .attr(\"fill\", item.color);\n\n//           legend\n//             .append(\"text\")\n//             .attr(\"x\", 20)\n//             .attr(\"y\", index * 20 + 12)\n//             .text(item.label)\n//             .attr(\"font-size\", \"12px\")\n//             .attr(\"alignment-baseline\", \"middle\");\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n  console.log(labelsData);\n  useEffect(() => {\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const pointPositions = {};\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    // Generate unique colors for each label\n    // Define color scale globally to avoid unnecessary re-renders\n\n    // Step 1: Extract unique labels dynamically\n    const labelKeys = Object.keys(labelsData);\n\n    // Step 2: Create a color scale dynamically based on the number of labels\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelKeys);\n\nconst getLabelColor = (pointId) => {\n  if (!labelsData || !labelsData.labels) return \"gray\"; // Ensure labelsData is properly structured\n\n  for (const label in labelsData.labels) {\n    if (\n      Array.isArray(labelsData.labels[label]) &&\n      labelsData.labels[label].includes(pointId)\n    ) {\n      return colorScale(label);\n    }\n  }\n\n  return \"gray\"; // Default color if no label matches\n};\n\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 3301 : 0, 1, 0.5);\n    };\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n\n      // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n      const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"path\")\n          .attr(\n            \"d\",\n            d3\n              .arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n              .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n          )\n          .attr(\"fill\", getSectorColor(index, i))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5);\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"font-weight\", \"bold\")\n          .text(subspace.key);\n      }\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", x2)\n          .attr(\"y1\", y2)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.25)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      subspace.points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const totalPoints = subspace.points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n            totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n        });\n        const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n        const legendData = [\n          { color: \"yellow\", label: \"Positive Bit\" },\n          { color: \"pink\", label: \"Negative Bit\" },\n        ];\n        legendData.forEach((item, index) => {\n          legend\n            .append(\"rect\")\n            .attr(\"x\", 0)\n            .attr(\"y\", index * 20)\n            .attr(\"width\", 15)\n            .attr(\"height\", 15)\n            .attr(\"fill\", item.color);\n\n          legend\n            .append(\"text\")\n            .attr(\"x\", 20)\n            .attr(\"y\", index * 20 + 12)\n            .text(item.label)\n            .attr(\"font-size\", \"12px\")\n            .attr(\"alignment-baseline\", \"middle\");\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n                  2\n                )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n              );\n            setHoveredCoordinates(point);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.3)\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAsB,CAAC,KAAK;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}