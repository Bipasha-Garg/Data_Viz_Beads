{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n\n//     // Sort subspaces by dimension in *descending* order\n//     subspaces.sort((a, b) => b.length - a.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//       subspaceId: key, // Store the subspace identifier\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the *smallest* square and increase size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n//           // Add sector labels\n//           const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n//           const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//             // .text(\n//             //   subspace.subspaceId +\n//             //     i.toString(2).padStart(subspace.dimensions, \"0\")\n//             // );\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Check if the point lies within this subspace's square.  This is critical\n//         // to prevent points from bleeding into other squares.\n//         if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\");\n//             // .text(\n//             //   `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             // );\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); // Debugging\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\",  }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n\n    // Sort subspaces by dimension in ascending order\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Color palette matching the image\n    const colorMap = {\n      2: \"#FFFF00\",\n      // Yellow for 2D\n      3: \"#FF00FF\",\n      // Magenta for 3D\n      4: \"#00BFFF\" // Light Blue for 4D\n    };\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n      const sectors = 2 ** subspace.dimensions;\n\n      // Draw square with color based on dimensions\n      const subspaceColor = colorMap[subspace.dimensions] || \"#000000\";\n      g.append(\"rect\").attr(\"x\", -squareSize / 2).attr(\"y\", -squareSize / 2).attr(\"width\", squareSize).attr(\"height\", squareSize).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2);\n\n      // Draw triangular sectors\n      if (subspace.dimensions > 0) {\n        const halfSize = squareSize / 2;\n\n        // Triangular sector definitions\n        const sectorPaths = [\n        // Top left triangle\n        {\n          path: `M${-halfSize},${-halfSize} L${0},${0} L${0},${-halfSize}`,\n          label: subspace.dimensions === 1 ? \"0\" : \"00\"\n        },\n        // Top right triangle\n        {\n          path: `M${0},${-halfSize} L${0},${0} L${halfSize},${-halfSize}`,\n          label: subspace.dimensions === 1 ? \"1\" : \"01\"\n        },\n        // Bottom left triangle\n        {\n          path: `M${-halfSize},${0} L${0},${0} L${0},${halfSize}`,\n          label: subspace.dimensions === 1 ? \"\" : \"10\"\n        },\n        // Bottom right triangle\n        {\n          path: `M${0},${0} L${halfSize},${0} L${0},${halfSize}`,\n          label: subspace.dimensions === 1 ? \"\" : \"11\"\n        }];\n        sectorPaths.forEach((sectorPath, idx) => {\n          g.append(\"path\").attr(\"d\", sectorPath.path).attr(\"stroke\", \"black\").attr(\"fill\", \"none\").attr(\"stroke-width\", 1);\n\n          // Add labels for non-empty triangles\n          if (sectorPath.label) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", 0).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").style(\"font-size\", \"12px\").style(\"fill\", \"black\").text(sectorPath.label);\n          }\n        });\n      }\n\n      // Point plotting logic\n      const halfSize = squareSize / 2;\n      subspace.points.forEach(point => {\n        let x, y;\n        if (subspace.dimensions === 1) {\n          // 1D: plot on x-axis, alternating sides\n          const sign = point.Point_ID % 2 === 0 ? -1 : 1;\n          x = sign * (halfSize / 2);\n          y = 0;\n        } else if (subspace.dimensions === 2) {\n          // 2D: map binary pattern to quadrants\n          const bitPattern = point.Point_ID.toString(2).padStart(2, \"0\");\n          switch (bitPattern) {\n            case \"00\":\n              x = -halfSize / 2;\n              y = -halfSize / 2;\n              break;\n            case \"01\":\n              x = halfSize / 2;\n              y = -halfSize / 2;\n              break;\n            case \"10\":\n              x = -halfSize / 2;\n              y = halfSize / 2;\n              break;\n            case \"11\":\n              x = halfSize / 2;\n              y = halfSize / 2;\n              break;\n          }\n        }\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).append(\"title\").text(`ID: ${point.Point_ID}`);\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"600px\",\n      height: \"600px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxSquareSize","Math","min","g","attr","append","colorMap","forEach","subspace","index","squareSize","sectors","subspaceColor","halfSize","sectorPaths","path","label","sectorPath","idx","style","text","point","x","y","sign","Point_ID","bitPattern","toString","padStart","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n\n//     // Sort subspaces by dimension in *descending* order\n//     subspaces.sort((a, b) => b.length - a.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//       subspaceId: key, // Store the subspace identifier\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the *smallest* square and increase size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n\n//           // Add sector labels\n//           const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n//           const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//             // .text(\n//             //   subspace.subspaceId +\n//             //     i.toString(2).padStart(subspace.dimensions, \"0\")\n//             // );\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Check if the point lies within this subspace's square.  This is critical\n//         // to prevent points from bleeding into other squares.\n//         if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\");\n//             // .text(\n//             //   `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             // );\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); // Debugging\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\",  }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n\n    // Sort subspaces by dimension in ascending order\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Color palette matching the image\n    const colorMap = {\n      2: \"#FFFF00\", // Yellow for 2D\n      3: \"#FF00FF\", // Magenta for 3D\n      4: \"#00BFFF\", // Light Blue for 4D\n    };\n\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n      const sectors = 2 ** subspace.dimensions;\n\n      // Draw square with color based on dimensions\n      const subspaceColor = colorMap[subspace.dimensions] || \"#000000\";\n\n      g.append(\"rect\")\n        .attr(\"x\", -squareSize / 2)\n        .attr(\"y\", -squareSize / 2)\n        .attr(\"width\", squareSize)\n        .attr(\"height\", squareSize)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2);\n\n      // Draw triangular sectors\n      if (subspace.dimensions > 0) {\n        const halfSize = squareSize / 2;\n\n        // Triangular sector definitions\n        const sectorPaths = [\n          // Top left triangle\n          {\n            path: `M${-halfSize},${-halfSize} L${0},${0} L${0},${-halfSize}`,\n            label: subspace.dimensions === 1 ? \"0\" : \"00\",\n          },\n          // Top right triangle\n          {\n            path: `M${0},${-halfSize} L${0},${0} L${halfSize},${-halfSize}`,\n            label: subspace.dimensions === 1 ? \"1\" : \"01\",\n          },\n          // Bottom left triangle\n          {\n            path: `M${-halfSize},${0} L${0},${0} L${0},${halfSize}`,\n            label: subspace.dimensions === 1 ? \"\" : \"10\",\n          },\n          // Bottom right triangle\n          {\n            path: `M${0},${0} L${halfSize},${0} L${0},${halfSize}`,\n            label: subspace.dimensions === 1 ? \"\" : \"11\",\n          },\n        ];\n\n        sectorPaths.forEach((sectorPath, idx) => {\n          g.append(\"path\")\n            .attr(\"d\", sectorPath.path)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1);\n\n          // Add labels for non-empty triangles\n          if (sectorPath.label) {\n            g.append(\"text\")\n              .attr(\"x\", 0)\n              .attr(\"y\", 0)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"dominant-baseline\", \"middle\")\n              .style(\"font-size\", \"12px\")\n              .style(\"fill\", \"black\")\n              .text(sectorPath.label);\n          }\n        });\n      }\n\n      // Point plotting logic\n      const halfSize = squareSize / 2;\n      subspace.points.forEach((point) => {\n        let x, y;\n\n        if (subspace.dimensions === 1) {\n          // 1D: plot on x-axis, alternating sides\n          const sign = point.Point_ID % 2 === 0 ? -1 : 1;\n          x = sign * (halfSize / 2);\n          y = 0;\n        } else if (subspace.dimensions === 2) {\n          // 2D: map binary pattern to quadrants\n          const bitPattern = point.Point_ID.toString(2).padStart(2, \"0\");\n          switch (bitPattern) {\n            case \"00\":\n              x = -halfSize / 2;\n              y = -halfSize / 2;\n              break;\n            case \"01\":\n              x = halfSize / 2;\n              y = -halfSize / 2;\n              break;\n            case \"10\":\n              x = -halfSize / 2;\n              y = halfSize / 2;\n              break;\n            case \"11\":\n              x = halfSize / 2;\n              y = halfSize / 2;\n              break;\n          }\n        }\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .append(\"title\")\n          .text(`ID: ${point.Point_ID}`);\n      });\n    });\n  }, [jsonData]);\n\n  return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;IAErD,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC;;IAEvC;IACAM,SAAS,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,MAAM,GAAGI,CAAC,CAACJ,MAAM,CAAC;IAE7C,MAAMK,UAAU,GAAGJ,SAAS,CAACK,GAAG,CAAEC,GAAG,KAAM;MACzCA,GAAG;MACHC,MAAM,EAAEb,QAAQ,CAACY,GAAG,CAAC;MACrBE,UAAU,EAAEF,GAAG,CAACP,MAAM;MACtBU,UAAU,EAAEH;IACd,CAAC,CAAC,CAAC;IAEH,MAAMI,GAAG,GAAGpB,EAAE,CAACqB,MAAM,CAACf,QAAQ,CAACgB,OAAO,CAAC;IACvC,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG,EAAE;IAEjBL,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;;IAE7B,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACP,KAAK,EAAEC,MAAM,CAAC,GAAG,CAAC,GAAGC,MAAM;IAE1D,MAAMM,CAAC,GAAGX,GAAG,CACVY,IAAI,CAAC,OAAO,EAAET,KAAK,CAAC,CACpBS,IAAI,CAAC,QAAQ,EAAER,MAAM,CAAC,CACtBS,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAaT,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;;IAE9D;IACA,MAAMU,QAAQ,GAAG;MACf,CAAC,EAAE,SAAS;MAAE;MACd,CAAC,EAAE,SAAS;MAAE;MACd,CAAC,EAAE,SAAS,CAAE;IAChB,CAAC;IAEDpB,UAAU,CAACqB,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MACtC,MAAMC,UAAU,GAAGV,aAAa,IAAI,CAACS,KAAK,GAAG,CAAC,IAAI3B,SAAS,CAACD,MAAM,CAAC;MACnE,MAAM8B,OAAO,GAAG,CAAC,IAAIH,QAAQ,CAAClB,UAAU;;MAExC;MACA,MAAMsB,aAAa,GAAGN,QAAQ,CAACE,QAAQ,CAAClB,UAAU,CAAC,IAAI,SAAS;MAEhEa,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAE,CAACM,UAAU,GAAG,CAAC,CAAC,CAC1BN,IAAI,CAAC,GAAG,EAAE,CAACM,UAAU,GAAG,CAAC,CAAC,CAC1BN,IAAI,CAAC,OAAO,EAAEM,UAAU,CAAC,CACzBN,IAAI,CAAC,QAAQ,EAAEM,UAAU,CAAC,CAC1BN,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAEQ,aAAa,CAAC,CAC3BR,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;MAE1B;MACA,IAAII,QAAQ,CAAClB,UAAU,GAAG,CAAC,EAAE;QAC3B,MAAMuB,QAAQ,GAAGH,UAAU,GAAG,CAAC;;QAE/B;QACA,MAAMI,WAAW,GAAG;QAClB;QACA;UACEC,IAAI,EAAE,IAAI,CAACF,QAAQ,IAAI,CAACA,QAAQ,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAACA,QAAQ,EAAE;UAChEG,KAAK,EAAER,QAAQ,CAAClB,UAAU,KAAK,CAAC,GAAG,GAAG,GAAG;QAC3C,CAAC;QACD;QACA;UACEyB,IAAI,EAAE,IAAI,CAAC,IAAI,CAACF,QAAQ,KAAK,CAAC,IAAI,CAAC,KAAKA,QAAQ,IAAI,CAACA,QAAQ,EAAE;UAC/DG,KAAK,EAAER,QAAQ,CAAClB,UAAU,KAAK,CAAC,GAAG,GAAG,GAAG;QAC3C,CAAC;QACD;QACA;UACEyB,IAAI,EAAE,IAAI,CAACF,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAIA,QAAQ,EAAE;UACvDG,KAAK,EAAER,QAAQ,CAAClB,UAAU,KAAK,CAAC,GAAG,EAAE,GAAG;QAC1C,CAAC;QACD;QACA;UACEyB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAKF,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAIA,QAAQ,EAAE;UACtDG,KAAK,EAAER,QAAQ,CAAClB,UAAU,KAAK,CAAC,GAAG,EAAE,GAAG;QAC1C,CAAC,CACF;QAEDwB,WAAW,CAACP,OAAO,CAAC,CAACU,UAAU,EAAEC,GAAG,KAAK;UACvCf,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAEa,UAAU,CAACF,IAAI,CAAC,CAC1BX,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;;UAE1B;UACA,IAAIa,UAAU,CAACD,KAAK,EAAE;YACpBb,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CACnCe,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CACtBC,IAAI,CAACH,UAAU,CAACD,KAAK,CAAC;UAC3B;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMH,QAAQ,GAAGH,UAAU,GAAG,CAAC;MAC/BF,QAAQ,CAACnB,MAAM,CAACkB,OAAO,CAAEc,KAAK,IAAK;QACjC,IAAIC,CAAC,EAAEC,CAAC;QAER,IAAIf,QAAQ,CAAClB,UAAU,KAAK,CAAC,EAAE;UAC7B;UACA,MAAMkC,IAAI,GAAGH,KAAK,CAACI,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;UAC9CH,CAAC,GAAGE,IAAI,IAAIX,QAAQ,GAAG,CAAC,CAAC;UACzBU,CAAC,GAAG,CAAC;QACP,CAAC,MAAM,IAAIf,QAAQ,CAAClB,UAAU,KAAK,CAAC,EAAE;UACpC;UACA,MAAMoC,UAAU,GAAGL,KAAK,CAACI,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;UAC9D,QAAQF,UAAU;YAChB,KAAK,IAAI;cACPJ,CAAC,GAAG,CAACT,QAAQ,GAAG,CAAC;cACjBU,CAAC,GAAG,CAACV,QAAQ,GAAG,CAAC;cACjB;YACF,KAAK,IAAI;cACPS,CAAC,GAAGT,QAAQ,GAAG,CAAC;cAChBU,CAAC,GAAG,CAACV,QAAQ,GAAG,CAAC;cACjB;YACF,KAAK,IAAI;cACPS,CAAC,GAAG,CAACT,QAAQ,GAAG,CAAC;cACjBU,CAAC,GAAGV,QAAQ,GAAG,CAAC;cAChB;YACF,KAAK,IAAI;cACPS,CAAC,GAAGT,QAAQ,GAAG,CAAC;cAChBU,CAAC,GAAGV,QAAQ,GAAG,CAAC;cAChB;UACJ;QACF;QAEAV,CAAC,CAACE,MAAM,CAAC,QAAQ,CAAC,CACfD,IAAI,CAAC,IAAI,EAAEkB,CAAC,CAAC,CACblB,IAAI,CAAC,IAAI,EAAEmB,CAAC,CAAC,CACbnB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBC,MAAM,CAAC,OAAO,CAAC,CACfe,IAAI,CAAC,OAAOC,KAAK,CAACI,QAAQ,EAAE,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAACjD,QAAQ,CAAC,CAAC;EAEd,oBAAOF,OAAA;IAAKuD,GAAG,EAAEnD,QAAS;IAACyC,KAAK,EAAE;MAAExB,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC/E,CAAC;AAACxD,EAAA,CAzJIF,iBAAiB;AAAA2D,EAAA,GAAjB3D,iBAAiB;AA2JvB,eAAeA,iBAAiB;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}