{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     console.log(\"Points data:\", pointsData.dimensions);\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = () => {\n//       console.log(\"Starting calculateProportionalAngles...\");\n//       console.log(\"pointsData:\", pointsData);\n\n//       if (pointsData.length === 0) {\n//         console.error(\"No points data available\");\n//         return [];\n//       }\n\n//       const lastRing = pointsData[pointsData.length - 1];\n//       const lastRingPoints = lastRing.points || [];\n//       const sectorsCount = Math.max(1, 2 ** pointsData.dimensions);\n\n//       console.log(\"Last ring:\", lastRing);\n//       console.log(\"Last ring points length:\", lastRingPoints.length);\n//       console.log(\"Sectors count:\", sectorsCount);\n\n//       // Fallback for empty or invalid last ring\n//       if (lastRingPoints.length === 0 || !Number.isFinite(sectorsCount)) {\n//         console.warn(\"Invalid last ring data, using equal angles\");\n//         return pointsData.map((_, i) => {\n//           const sectorCount = Math.max(1, 2 ** (i + 1));\n//           console.log(`Ring ${i} sector count: ${sectorCount}`);\n//           return Array(sectorCount).fill(2 * Math.PI / sectorCount);\n//         });\n//       }\n\n//       const pointCounts = new Array(sectorsCount).fill(0);\n//       console.log(\"Initialized pointCounts:\", pointCounts);\n\n//       lastRingPoints.forEach((point, idx) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectorIndex = parseInt(bitVector, 2);\n//         if (sectorIndex >= 0 && sectorIndex < sectorsCount) {\n//           pointCounts[sectorIndex]++;\n//         } else {\n//           console.warn(`Point ${idx}: Invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n//         }\n//       });\n\n//       console.log(\"Point counts per sector:\", pointCounts);\n\n//       const minAngle = Math.PI / 180; // 1 degree minimum\n//       const totalAngle = 2 * Math.PI;\n//       const totalNonEmptyPoints = Math.max(0, pointCounts.reduce((sum, count) => sum + count, 0));\n//       const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n//       console.log(\"Total non-empty points:\", totalNonEmptyPoints);\n//       console.log(\"Remaining angle:\", remainingAngle);\n\n//       const sectorAngles = pointCounts.map((count, idx) => {\n//         const angle = count > 0\n//           ? (count / totalNonEmptyPoints) * remainingAngle\n//           : minAngle;\n//         console.log(`Sector ${idx} angle: ${angle}`);\n//         return angle;\n//       });\n\n//       console.log(\"Sector angles:\", sectorAngles);\n\n//       // Propagate angles to inner rings\n//       const ringAngles = [sectorAngles];\n//       for (let i = pointsData.length - 2; i >= 0; i--) {\n//         const prevAngles = ringAngles[0];\n//         const sectorCount = Math.max(1, 2 ** (i + 1));\n//         if (!Number.isFinite(sectorCount)) {\n//           console.error(`Invalid sectorCount for ring ${i}: ${sectorCount}`);\n//           return []; \n//         }\n//         console.log(`Ring ${i}, sectorCount: ${sectorCount}, isFinite: ${Number.isFinite(sectorCount)}`);\n\n//         const currAngles = new Array(sectorCount);\n//         console.log(`Propagating to ring ${i}, expected sectors: ${sectorCount}`);\n\n//         for (let j = 0; j < sectorCount; j++) {\n//           const angle1 = prevAngles[j * 2] || 0;\n//           const angle2 = prevAngles[j * 2 + 1] || 0;\n//           currAngles[j] = angle1 + angle2;\n//           console.log(`Ring ${i}, sector ${j}: ${currAngles[j]} (from ${angle1} + ${angle2})`);\n//         }\n//         ringAngles.unshift(currAngles);\n//       }\n\n//       console.log(\"Final ring angles:\", ringAngles);\n//       return ringAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           g.append(\"text\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", -outerRadius - 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"font-size\", \"16px\")\n//             .attr(\"fill\", \"red\")\n//             .attr(\"font-weight\", \"bold\")\n//             .text(ringLabels[index]);\n//         }\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const ringAngles = calculateProportionalAngles();\n//       console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n//       if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n//         console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n//         renderNormalView();\n//         return;\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         let currentAngle = Math.PI / 2 - 90;\n\n//         ringAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const calculateProportionalAngles = () => {\n      console.log(\"Starting calculateProportionalAngles...\");\n      if (pointsData.length === 0) {\n        console.error(\"No points data available\");\n        return [];\n      }\n      const ringAngles = pointsData.map(() => []);\n      pointsData.forEach((ring, index) => {\n        const points = ring.points || [];\n        const sectorCount = 2 ** pointsData.dimensions;\n        const pointCounts = new Array(sectorCount).fill(0);\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          if (sectorIndex >= 0 && sectorIndex < sectorCount) {\n            pointCounts[sectorIndex]++;\n          } else {\n            console.warn(`Point in ring ${index} has invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n          }\n        });\n        console.log(`Ring ${index} point counts:`, pointCounts);\n        const totalPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n        const totalAngle = 2 * Math.PI;\n        const minAngle = Math.PI / 180;\n        const remainingAngle = totalAngle - sectorCount * minAngle;\n        const sectorAngles = pointCounts.map(count => count > 0 ? minAngle + count / totalPoints * remainingAngle : minAngle);\n        ringAngles[index] = sectorAngles;\n        console.log(`Ring ${index} sector angles:`, sectorAngles);\n      });\n      for (let i = ringAngles.length - 2; i >= 0; i--) {\n        const childAngles = ringAngles[i];\n        const parentAngles = ringAngles[i + 1];\n        const childSectorCount = childAngles.length;\n        for (let j = 0; j < childSectorCount; j++) {\n          const parentIndex = j * 2;\n          if (parentIndex + 1 < parentAngles.length) {\n            childAngles[j] = parentAngles[parentIndex] + parentAngles[parentIndex + 1];\n          }\n        }\n      }\n      console.log(\"Final ring angles:\", ringAngles);\n      return ringAngles;\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** pointsData[index].dimensions;\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      const ringAngles = calculateProportionalAngles();\n      console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n      if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n        console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n        renderNormalView();\n        return;\n      }\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        let currentAngle = Math.PI / 2;\n        ringAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n      });\n    };\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n      let currentAngle = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        const startAngle = isProportional ? currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) : 2 * Math.PI * bitVectorIndex / sectors;\n        const angleWidth = isProportional ? angles[bitVectorIndex] : 2 * Math.PI / sectors;\n        const centerAngle = startAngle + angleWidth / 2;\n\n        // Removed unused minRadius and maxRadius, using overlapRadius directly\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: pointsData[index].key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          // Removed unused 'line' variable by chaining directly\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 752,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateProportionalAngles","log","ringAngles","forEach","ring","sectorCount","pointCounts","fill","point","pointData","entries","filter","k","bitVector","coord","join","parseInt","warn","totalPoints","max","reduce","sum","count","totalAngle","PI","minAngle","remainingAngle","sectorAngles","childAngles","parentAngles","childSectorCount","j","parentIndex","renderNormalView","innerRadius","outerRadius","sectors","rotationOffset","startAngle","endAngle","arc","text","renderPoints","renderProportionalView","some","arr","currentAngle","angle","anglesOrSectors","isProportional","angles","bitVectorIndex","slice","angleWidth","centerAngle","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","push","on","event","pointIds","associatedLabels","labelText","html","toFixed","pageY","pageX","positions","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     console.log(\"Points data:\", pointsData.dimensions);\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n\n//     const calculateProportionalAngles = () => {\n//       console.log(\"Starting calculateProportionalAngles...\");\n//       console.log(\"pointsData:\", pointsData);\n\n//       if (pointsData.length === 0) {\n//         console.error(\"No points data available\");\n//         return [];\n//       }\n\n//       const lastRing = pointsData[pointsData.length - 1];\n//       const lastRingPoints = lastRing.points || [];\n//       const sectorsCount = Math.max(1, 2 ** pointsData.dimensions);\n\n//       console.log(\"Last ring:\", lastRing);\n//       console.log(\"Last ring points length:\", lastRingPoints.length);\n//       console.log(\"Sectors count:\", sectorsCount);\n\n//       // Fallback for empty or invalid last ring\n//       if (lastRingPoints.length === 0 || !Number.isFinite(sectorsCount)) {\n//         console.warn(\"Invalid last ring data, using equal angles\");\n//         return pointsData.map((_, i) => {\n//           const sectorCount = Math.max(1, 2 ** (i + 1));\n//           console.log(`Ring ${i} sector count: ${sectorCount}`);\n//           return Array(sectorCount).fill(2 * Math.PI / sectorCount);\n//         });\n//       }\n\n//       const pointCounts = new Array(sectorsCount).fill(0);\n//       console.log(\"Initialized pointCounts:\", pointCounts);\n\n//       lastRingPoints.forEach((point, idx) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectorIndex = parseInt(bitVector, 2);\n//         if (sectorIndex >= 0 && sectorIndex < sectorsCount) {\n//           pointCounts[sectorIndex]++;\n//         } else {\n//           console.warn(`Point ${idx}: Invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n//         }\n//       });\n\n//       console.log(\"Point counts per sector:\", pointCounts);\n\n//       const minAngle = Math.PI / 180; // 1 degree minimum\n//       const totalAngle = 2 * Math.PI;\n//       const totalNonEmptyPoints = Math.max(0, pointCounts.reduce((sum, count) => sum + count, 0));\n//       const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n//       console.log(\"Total non-empty points:\", totalNonEmptyPoints);\n//       console.log(\"Remaining angle:\", remainingAngle);\n\n//       const sectorAngles = pointCounts.map((count, idx) => {\n//         const angle = count > 0\n//           ? (count / totalNonEmptyPoints) * remainingAngle\n//           : minAngle;\n//         console.log(`Sector ${idx} angle: ${angle}`);\n//         return angle;\n//       });\n\n//       console.log(\"Sector angles:\", sectorAngles);\n\n//       // Propagate angles to inner rings\n//       const ringAngles = [sectorAngles];\n//       for (let i = pointsData.length - 2; i >= 0; i--) {\n//         const prevAngles = ringAngles[0];\n//         const sectorCount = Math.max(1, 2 ** (i + 1));\n//         if (!Number.isFinite(sectorCount)) {\n//           console.error(`Invalid sectorCount for ring ${i}: ${sectorCount}`);\n//           return []; \n//         }\n//         console.log(`Ring ${i}, sectorCount: ${sectorCount}, isFinite: ${Number.isFinite(sectorCount)}`);\n       \n//         const currAngles = new Array(sectorCount);\n//         console.log(`Propagating to ring ${i}, expected sectors: ${sectorCount}`);\n\n//         for (let j = 0; j < sectorCount; j++) {\n//           const angle1 = prevAngles[j * 2] || 0;\n//           const angle2 = prevAngles[j * 2 + 1] || 0;\n//           currAngles[j] = angle1 + angle2;\n//           console.log(`Ring ${i}, sector ${j}: ${currAngles[j]} (from ${angle1} + ${angle2})`);\n//         }\n//         ringAngles.unshift(currAngles);\n//       }\n\n//       console.log(\"Final ring angles:\", ringAngles);\n//       return ringAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           g.append(\"text\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", -outerRadius - 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"font-size\", \"16px\")\n//             .attr(\"fill\", \"red\")\n//             .attr(\"font-weight\", \"bold\")\n//             .text(ringLabels[index]);\n//         }\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const ringAngles = calculateProportionalAngles();\n//       console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n//       if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n//         console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n//         renderNormalView();\n//         return;\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         let currentAngle = Math.PI / 2 - 90;\n\n//         ringAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    const calculateProportionalAngles = () => {\n      console.log(\"Starting calculateProportionalAngles...\");\n\n      if (pointsData.length === 0) {\n        console.error(\"No points data available\");\n        return [];\n      }\n\n      const ringAngles = pointsData.map(() => []);\n\n      pointsData.forEach((ring, index) => {\n        const points = ring.points || [];\n        const sectorCount = 2 ** pointsData.dimensions;\n        const pointCounts = new Array(sectorCount).fill(0);\n\n        points.forEach((point) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          if (sectorIndex >= 0 && sectorIndex < sectorCount) {\n            pointCounts[sectorIndex]++;\n          } else {\n            console.warn(`Point in ring ${index} has invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n          }\n        });\n\n        console.log(`Ring ${index} point counts:`, pointCounts);\n\n        const totalPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n        const totalAngle = 2 * Math.PI;\n        const minAngle = Math.PI / 180;\n        const remainingAngle = totalAngle - sectorCount * minAngle;\n\n        const sectorAngles = pointCounts.map((count) =>\n          count > 0 ? minAngle + (count / totalPoints) * remainingAngle : minAngle\n        );\n\n        ringAngles[index] = sectorAngles;\n        console.log(`Ring ${index} sector angles:`, sectorAngles);\n      });\n\n      for (let i = ringAngles.length - 2; i >= 0; i--) {\n        const childAngles = ringAngles[i];\n        const parentAngles = ringAngles[i + 1];\n        const childSectorCount = childAngles.length;\n\n        for (let j = 0; j < childSectorCount; j++) {\n          const parentIndex = j * 2;\n          if (parentIndex + 1 < parentAngles.length) {\n            childAngles[j] = parentAngles[parentIndex] + parentAngles[parentIndex + 1];\n          }\n        }\n      }\n\n      console.log(\"Final ring angles:\", ringAngles);\n      return ringAngles;\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** pointsData[index].dimensions;\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          g.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", -outerRadius - 5)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"16px\")\n            .attr(\"fill\", \"red\")\n            .attr(\"font-weight\", \"bold\")\n            .text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      const ringAngles = calculateProportionalAngles();\n      console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n      if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n        console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n        renderNormalView();\n        return;\n      }\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        let currentAngle = Math.PI / 2;\n\n        ringAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n      });\n    };\n\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n      let currentAngle = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        const startAngle = isProportional\n          ? currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0)\n          : (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n        const centerAngle = startAngle + angleWidth / 2;\n\n        // Removed unused minRadius and maxRadius, using overlapRadius directly\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some((id) => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          // Removed unused 'line' variable by chaining directly\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,QAAQ,CAAC;EAElDF,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIQ,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM,KAAK,CAAC,EAAE;MACnFC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEZ,QAAQ,CAAC;MACrD;IACF;IAEA,IAAI,CAACC,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MACjDU,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}