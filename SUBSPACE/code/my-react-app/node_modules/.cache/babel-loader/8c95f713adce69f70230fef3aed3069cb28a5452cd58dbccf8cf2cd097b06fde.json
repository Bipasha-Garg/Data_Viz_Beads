{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import HierarchicalGraph from \"./JsonDisplay\";\n// // import HierarchicalGraph from \"./GraphBase\";\n// import ScatterPlot from \"./ScatterPlot\";\n// import ParallelCoordinates from \"./ParallelCoordinates\";\n\n// const App = () => {\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"\");\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hoveredCoordinates, setHoveredCoordinates] = useState(null);\n//   const [labelsData, setLabelsData] = useState(null);\n//   const [classificationData, setClassificationData] = useState(null);\n//   const [parallelData, setParallelData] = useState(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n//   const legendRef = useRef(null);\n//   const subspaceLegendRef = useRef(null);\n//   const containerRef = useRef(null);\n\n//   const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n//   useEffect(() => {\n//     const updateDimensions = () => {\n//       if (containerRef.current) {\n//         setDimensions({\n//           width: containerRef.current.offsetWidth,\n//           height: containerRef.current.offsetHeight\n//         });\n//       }\n//     };\n\n//     updateDimensions();\n//     window.addEventListener('resize', updateDimensions);\n//     return () => window.removeEventListener('resize', updateDimensions);\n//   }, []);\n\n//   useEffect(() => {\n//     if (labelsData && legendRef.current) {\n//       d3.select(legendRef.current).select(\"svg\").remove();\n//       const labelEntries = Object.keys(labelsData.labels || {});\n//       const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelEntries);\n//       const legendHeight = Math.min(labelEntries.length * 25 + 20, dimensions.height * 0.3);\n\n//       const legend = d3.select(legendRef.current)\n//         .append(\"svg\")\n//         .attr(\"width\", \"100%\")\n//         .attr(\"height\", legendHeight);\n\n//       const legendGroup = legend.append(\"g\")\n//         .attr(\"transform\", \"translate(10,10)\");\n\n//       legendGroup.selectAll(\"rect\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"rect\")\n//         .attr(\"x\", 0)\n//         .attr(\"y\", (_, i) => i * 25)\n//         .attr(\"width\", 20)\n//         .attr(\"height\", 20)\n//         .attr(\"fill\", d => colorScale(d));\n\n//       legendGroup.selectAll(\"text\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"text\")\n//         .attr(\"x\", 30)\n//         .attr(\"y\", (_, i) => i * 25 + 15)\n//         .text(d => d)\n//         .attr(\"font-size\", \"clamp(10px, 2vw, 12px)\")\n//         .attr(\"alignment-baseline\", \"middle\");\n//     }\n//   }, [labelsData, dimensions]);\n\n//   useEffect(() => {\n//     if (jsonData && subspaceLegendRef.current) {\n//       d3.select(subspaceLegendRef.current).html(\"\");\n//       const subspaces = Object.keys(jsonData || {});\n//       const subspaceLabels = subspaces.map((_, index) => String.fromCharCode(65 + index));\n//       const legendContainer = d3.select(subspaceLegendRef.current)\n//         .append(\"div\")\n//         .attr(\"class\", \"flex flex-col gap-2 w-full overflow-y-auto\")\n//         .style(\"max-height\", \"20vh\");\n\n//       legendContainer.selectAll(\"div\")\n//         .data(subspaces)\n//         .enter()\n//         .append(\"div\")\n//         .attr(\"class\", \"p-2 bg-gray-200 rounded text-sm break-words\")\n//         .text((d, i) => `${subspaceLabels[i]} = ${d}`);\n//     }\n//   }, [jsonData, dimensions]);\n\n//   const handleFileSelect = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setSelectedFile(file);\n//       setFileName(file.name);\n//       setError(null);\n//     }\n//   };\n\n//   const handleUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) {\n//       setError(\"Please select a file first\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!uploadResponse.ok) throw new Error(\"Upload failed\");\n\n//       const result = await uploadResponse.json();\n//       const jsonResponse = await fetch(`http://127.0.0.1:5000/uploads/${result.json_filename}`);\n//       const processedData = await jsonResponse.json();\n\n//       const labelsResponse = await fetch(`http://127.0.0.1:5000/uploads/labels_file.json`);\n//       const processedLabelsData = await labelsResponse.json();\n\n//       const classificationResponse = await fetch(`http://127.0.0.1:5000/uploads/classification.json`);\n//       const classificationData = await classificationResponse.json();\n\n//       const parallelResponse = await fetch(`http://127.0.0.1:5000/uploads/parallel.json`);\n//       const parallelData = await parallelResponse.json();\n\n//       setJsonData(processedData);\n//       setLabelsData(processedLabelsData);\n//       setClassificationData(classificationData);\n//       setParallelData(parallelData);\n\n//       const subspaces = Object.keys(processedData);\n//       subspaces.sort((a, b) => a.length - b.length);\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({ ...prev, [key]: !prev[key] }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData || {});\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n\n//   return (\n//     <div\n//       ref={containerRef}\n//       className=\"min-h-screen bg-gray-100 p-2 sm:p-4 flex flex-col gap-4\"\n//     >\n//       {/* Main Layout */}\n//       <div className=\"flex flex-col lg:flex-row gap-4 w-full\">\n//         {/* Left Dashboard */}\n//         <div className=\"w-full lg:w-1/4 p-4 bg-white shadow rounded-lg min-w-[250px]\">\n//           <h1 className=\"text-lg sm:text-xl font-bold mb-4\">File Upload</h1>\n//           <div className=\"mb-4\">\n//             <input\n//               type=\"file\"\n//               accept=\".csv\"\n//               onChange={handleFileSelect}\n//               className=\"mb-2 w-full text-sm\"\n//               disabled={isLoading}\n//             />\n//             {fileName && (\n//               <div className=\"mt-2 p-2 bg-blue-50 rounded text-sm\">\n//                 Selected file: <span className=\"font-semibold\">{fileName}</span>\n//               </div>\n//             )}\n//           </div>\n//           <button\n//             type=\"button\"\n//             onClick={handleUpload}\n//             disabled={!selectedFile || isLoading}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded w-full text-sm sm:text-base disabled:bg-gray-400\"\n//           >\n//             {isLoading ? \"Processing...\" : \"Upload\"}\n//           </button>\n//           {error && <div className=\"mt-2 text-red-500 text-sm\">{error}</div>}\n\n//           <div className=\"mt-6\">\n//             <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Subspace Rings</h2>\n//             <button\n//               onClick={toggleAllRingsVisibility}\n//               className=\"bg-blue-500 text-white px-4 py-2 rounded w-full mb-4 text-sm sm:text-base\"\n//             >\n//               {Object.values(ringVisibility).every((v) => v)\n//                 ? \"Collapse All Rings\"\n//                 : \"Expand All Rings\"}\n//             </button>\n//             <div className=\"max-h-[30vh] overflow-y-auto\">\n//               {Object.keys(jsonData || {}).map((key) => (\n//                 <div key={key} className=\"mb-2\">\n//                   <button\n//                     onClick={() => toggleRingVisibility(key)}\n//                     className=\"w-full p-2 text-left rounded text-sm break-words\"\n//                     style={{\n//                       backgroundColor: ringVisibility[key] ? \"#fca5a5\" : \"lightgray\",\n//                       border: \"1px solid #ccc\",\n//                     }}\n//                   >\n//                     {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//                   </button>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Visualization Area */}\n//         <div className=\"flex-1 flex flex-col bg-white shadow rounded-lg p-4\">\n//           <h2 className=\"text-lg sm:text-2xl font-bold mb-4\">Hierarchical Graph</h2>\n//           <div className=\"flex-1 w-full overflow-auto\">\n//             {jsonData && (\n//               <HierarchicalGraph\n//                 jsonData={jsonData}\n//                 labelsData={labelsData}\n//                 setHoveredCoordinates={setHoveredCoordinates}\n//                 ringVisibility={ringVisibility}\n//                 width={dimensions.width * 0.7}  // Pass dynamic width\n//                 height={dimensions.height * 0.5} // Pass dynamic height\n//               />\n//             )}\n//           </div>\n//         </div>\n\n//         {/* Right Dashboard */}\n//         <div className=\"w-full lg:w-1/4 p-4 bg-white shadow rounded-lg min-w-[200px]\">\n//           <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Point Info</h2>\n//           <div\n//             ref={subspaceLegendRef}\n//             className=\"w-full overflow-y-auto mb-4\"\n//             style={{ maxHeight: '20vh' }}\n//           />\n//           <div\n//             ref={legendRef}\n//             className=\"mt-4 overflow-y-auto\"\n//             style={{ maxHeight: '20vh' }}\n//           />\n//           {hoveredCoordinates && (\n//             <div className=\"p-2 bg-green-50 rounded text-sm w-full break-words\">\n//               <strong>Hovered Node:</strong>\n//               <div>ID: {hoveredCoordinates.Point_IDs}</div>\n//               {Object.keys(hoveredCoordinates)\n//                 .filter((key) => key !== \"id\")\n//                 .map((key) => (\n//                   <div key={key} className=\"break-words\">\n//                     <strong>{key}:</strong>{\" \"}\n//                     {hoveredCoordinates[key].toFixed\n//                       ? hoveredCoordinates[key].toFixed(2)\n//                       : hoveredCoordinates[key]}\n//                   </div>\n//                 ))}\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* New Visualizations */}\n//       <div className=\"w-full flex flex-col lg:flex-row gap-4\">\n//         {/* Scatter Plot */}\n//         <div className=\"w-full lg:w-1/2 p-4 bg-white shadow rounded-lg\">\n//           <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Scatter Plot</h2>\n//           <div className=\"w-full h-[40vh] overflow-auto\">\n//             {classificationData && (\n//               <ScatterPlot\n//                 data={classificationData}\n//                 width={dimensions.width * 0.45}\n//                 height={dimensions.height * 0.4}\n//               />\n//             )}\n//           </div>\n//         </div>\n\n//         {/* Parallel Coordinates */}\n//         <div className=\"w-full lg:w-1/2 p-4 bg-white shadow rounded-lg\">\n//           <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Parallel Coordinates</h2>\n//           <div className=\"w-full h-[40vh] overflow-auto\">\n//             {parallelData && (\n//               <ParallelCoordinates\n//                 data={parallelData}\n//                 width={dimensions.width * 0.45}\n//                 height={dimensions.height * 0.4}\n//               />\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    console.log(\"Points data:\", pointsData);\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const calculateProportionalAngles = () => {\n      const numRings = pointsData.length;\n      const ringAngles = new Array(numRings).fill(null).map(() => []);\n\n      // 1. Calculate sector counts for the outermost ring\n      const outermostRing = pointsData[numRings - 1];\n      const sectorsCount = Math.max(1, 2 ** outermostRing.dimensions);\n      const sectorCounts = new Array(sectorsCount).fill(0);\n      outermostRing.points.forEach(point => {\n        const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = parseInt(bitVector, 2);\n        if (!isNaN(sectorIndex) && sectorIndex >= 0 && sectorIndex < sectorsCount) {\n          sectorCounts[sectorIndex]++;\n        }\n      });\n\n      // 2. Calculate angles for the outermost ring based on sector counts\n      const totalPoints = d3.sum(sectorCounts);\n      const minAngle = 2 * Math.PI / (sectorsCount * 10); // Minimum angle for visibility\n      const remainingAngle = 2 * Math.PI - sectorsCount * minAngle;\n      ringAngles[numRings - 1] = sectorCounts.map(count => {\n        const angle = totalPoints > 0 ? minAngle + count / totalPoints * remainingAngle : minAngle;\n        return angle;\n      });\n\n      // 3. Propagate angles inward\n      for (let ringIndex = numRings - 2; ringIndex >= 0; ringIndex--) {\n        const sectors = Math.max(1, 2 ** pointsData[ringIndex].dimensions);\n        for (let sectorIndex = 0; sectorIndex < sectors; sectorIndex++) {\n          const angle1 = ringAngles[ringIndex + 1][sectorIndex * 2] || 0;\n          const angle2 = ringAngles[ringIndex + 1][sectorIndex * 2 + 1] || 0;\n          ringAngles[ringIndex][sectorIndex] = angle1 + angle2;\n        }\n      }\n      return ringAngles;\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      const ringAngles = calculateProportionalAngles();\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        let currentAngle = Math.PI / 2;\n        const sectors = 2 ** (index + 1); // Correct sector count\n        for (let i = 0; i < sectors; i++) {\n          const angle = ringAngles[index][i]; // Access pre-calculated angles\n\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n      });\n    };\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n      let currentAngle = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        const startAngle = isProportional ? currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) : 2 * Math.PI * bitVectorIndex / sectors;\n        const angleWidth = isProportional ? angles[bitVectorIndex] : 2 * Math.PI / sectors;\n        const centerAngle = startAngle + angleWidth / 2;\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: pointsData[index].key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 643,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","log","ringLabels","_","i","String","fromCharCode","pointPositions","calculateProportionalAngles","numRings","ringAngles","fill","outermostRing","sectorsCount","max","sectorCounts","forEach","point","bitVector","entries","filter","coord","join","parseInt","isNaN","totalPoints","sum","minAngle","PI","remainingAngle","count","angle","ringIndex","sectors","angle1","angle2","renderNormalView","innerRadius","outerRadius","rotationOffset","startAngle","endAngle","arc","text","renderPoints","renderProportionalView","currentAngle","anglesOrSectors","isProportional","angles","pointData","bitVectorIndex","slice","reduce","angleWidth","centerAngle","minRadius","randomRadius","random","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","push","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n// import HierarchicalGraph from \"./JsonDisplay\";\n// // import HierarchicalGraph from \"./GraphBase\";\n// import ScatterPlot from \"./ScatterPlot\";\n// import ParallelCoordinates from \"./ParallelCoordinates\";\n\n// const App = () => {\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"\");\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [hoveredCoordinates, setHoveredCoordinates] = useState(null);\n//   const [labelsData, setLabelsData] = useState(null);\n//   const [classificationData, setClassificationData] = useState(null);\n//   const [parallelData, setParallelData] = useState(null);\n//   const [ringVisibility, setRingVisibility] = useState({});\n//   const legendRef = useRef(null);\n//   const subspaceLegendRef = useRef(null);\n//   const containerRef = useRef(null);\n\n//   const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n//   useEffect(() => {\n//     const updateDimensions = () => {\n//       if (containerRef.current) {\n//         setDimensions({\n//           width: containerRef.current.offsetWidth,\n//           height: containerRef.current.offsetHeight\n//         });\n//       }\n//     };\n\n//     updateDimensions();\n//     window.addEventListener('resize', updateDimensions);\n//     return () => window.removeEventListener('resize', updateDimensions);\n//   }, []);\n\n//   useEffect(() => {\n//     if (labelsData && legendRef.current) {\n//       d3.select(legendRef.current).select(\"svg\").remove();\n//       const labelEntries = Object.keys(labelsData.labels || {});\n//       const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelEntries);\n//       const legendHeight = Math.min(labelEntries.length * 25 + 20, dimensions.height * 0.3);\n\n//       const legend = d3.select(legendRef.current)\n//         .append(\"svg\")\n//         .attr(\"width\", \"100%\")\n//         .attr(\"height\", legendHeight);\n\n//       const legendGroup = legend.append(\"g\")\n//         .attr(\"transform\", \"translate(10,10)\");\n\n//       legendGroup.selectAll(\"rect\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"rect\")\n//         .attr(\"x\", 0)\n//         .attr(\"y\", (_, i) => i * 25)\n//         .attr(\"width\", 20)\n//         .attr(\"height\", 20)\n//         .attr(\"fill\", d => colorScale(d));\n\n//       legendGroup.selectAll(\"text\")\n//         .data(labelEntries)\n//         .enter()\n//         .append(\"text\")\n//         .attr(\"x\", 30)\n//         .attr(\"y\", (_, i) => i * 25 + 15)\n//         .text(d => d)\n//         .attr(\"font-size\", \"clamp(10px, 2vw, 12px)\")\n//         .attr(\"alignment-baseline\", \"middle\");\n//     }\n//   }, [labelsData, dimensions]);\n\n//   useEffect(() => {\n//     if (jsonData && subspaceLegendRef.current) {\n//       d3.select(subspaceLegendRef.current).html(\"\");\n//       const subspaces = Object.keys(jsonData || {});\n//       const subspaceLabels = subspaces.map((_, index) => String.fromCharCode(65 + index));\n//       const legendContainer = d3.select(subspaceLegendRef.current)\n//         .append(\"div\")\n//         .attr(\"class\", \"flex flex-col gap-2 w-full overflow-y-auto\")\n//         .style(\"max-height\", \"20vh\");\n\n//       legendContainer.selectAll(\"div\")\n//         .data(subspaces)\n//         .enter()\n//         .append(\"div\")\n//         .attr(\"class\", \"p-2 bg-gray-200 rounded text-sm break-words\")\n//         .text((d, i) => `${subspaceLabels[i]} = ${d}`);\n//     }\n//   }, [jsonData, dimensions]);\n\n//   const handleFileSelect = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       setSelectedFile(file);\n//       setFileName(file.name);\n//       setError(null);\n//     }\n//   };\n\n//   const handleUpload = async (e) => {\n//     e.preventDefault();\n//     if (!selectedFile) {\n//       setError(\"Please select a file first\");\n//       return;\n//     }\n\n//     setIsLoading(true);\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       const uploadResponse = await fetch(\"http://127.0.0.1:5000/upload\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (!uploadResponse.ok) throw new Error(\"Upload failed\");\n\n//       const result = await uploadResponse.json();\n//       const jsonResponse = await fetch(`http://127.0.0.1:5000/uploads/${result.json_filename}`);\n//       const processedData = await jsonResponse.json();\n\n//       const labelsResponse = await fetch(`http://127.0.0.1:5000/uploads/labels_file.json`);\n//       const processedLabelsData = await labelsResponse.json();\n\n//       const classificationResponse = await fetch(`http://127.0.0.1:5000/uploads/classification.json`);\n//       const classificationData = await classificationResponse.json();\n\n//       const parallelResponse = await fetch(`http://127.0.0.1:5000/uploads/parallel.json`);\n//       const parallelData = await parallelResponse.json();\n\n//       setJsonData(processedData);\n//       setLabelsData(processedLabelsData);\n//       setClassificationData(classificationData);\n//       setParallelData(parallelData);\n\n//       const subspaces = Object.keys(processedData);\n//       subspaces.sort((a, b) => a.length - b.length);\n//       const initialVisibility = subspaces.reduce((acc, key) => {\n//         acc[key] = true;\n//         return acc;\n//       }, {});\n//       setRingVisibility(initialVisibility);\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const toggleRingVisibility = (key) => {\n//     setRingVisibility((prev) => ({ ...prev, [key]: !prev[key] }));\n//   };\n\n//   const toggleAllRingsVisibility = () => {\n//     const subspaces = Object.keys(jsonData || {});\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const newVisibility = subspaces.reduce((acc, key, index) => {\n//       acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n//       return acc;\n//     }, {});\n//     setRingVisibility(newVisibility);\n//   };\n\n//   return (\n//     <div\n//       ref={containerRef}\n//       className=\"min-h-screen bg-gray-100 p-2 sm:p-4 flex flex-col gap-4\"\n//     >\n//       {/* Main Layout */}\n//       <div className=\"flex flex-col lg:flex-row gap-4 w-full\">\n//         {/* Left Dashboard */}\n//         <div className=\"w-full lg:w-1/4 p-4 bg-white shadow rounded-lg min-w-[250px]\">\n//           <h1 className=\"text-lg sm:text-xl font-bold mb-4\">File Upload</h1>\n//           <div className=\"mb-4\">\n//             <input\n//               type=\"file\"\n//               accept=\".csv\"\n//               onChange={handleFileSelect}\n//               className=\"mb-2 w-full text-sm\"\n//               disabled={isLoading}\n//             />\n//             {fileName && (\n//               <div className=\"mt-2 p-2 bg-blue-50 rounded text-sm\">\n//                 Selected file: <span className=\"font-semibold\">{fileName}</span>\n//               </div>\n//             )}\n//           </div>\n//           <button\n//             type=\"button\"\n//             onClick={handleUpload}\n//             disabled={!selectedFile || isLoading}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded w-full text-sm sm:text-base disabled:bg-gray-400\"\n//           >\n//             {isLoading ? \"Processing...\" : \"Upload\"}\n//           </button>\n//           {error && <div className=\"mt-2 text-red-500 text-sm\">{error}</div>}\n\n//           <div className=\"mt-6\">\n//             <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Subspace Rings</h2>\n//             <button\n//               onClick={toggleAllRingsVisibility}\n//               className=\"bg-blue-500 text-white px-4 py-2 rounded w-full mb-4 text-sm sm:text-base\"\n//             >\n//               {Object.values(ringVisibility).every((v) => v)\n//                 ? \"Collapse All Rings\"\n//                 : \"Expand All Rings\"}\n//             </button>\n//             <div className=\"max-h-[30vh] overflow-y-auto\">\n//               {Object.keys(jsonData || {}).map((key) => (\n//                 <div key={key} className=\"mb-2\">\n//                   <button\n//                     onClick={() => toggleRingVisibility(key)}\n//                     className=\"w-full p-2 text-left rounded text-sm break-words\"\n//                     style={{\n//                       backgroundColor: ringVisibility[key] ? \"#fca5a5\" : \"lightgray\",\n//                       border: \"1px solid #ccc\",\n//                     }}\n//                   >\n//                     {ringVisibility[key] ? `- ${key}` : `+ ${key}`}\n//                   </button>\n//                 </div>\n//               ))}\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Visualization Area */}\n//         <div className=\"flex-1 flex flex-col bg-white shadow rounded-lg p-4\">\n//           <h2 className=\"text-lg sm:text-2xl font-bold mb-4\">Hierarchical Graph</h2>\n//           <div className=\"flex-1 w-full overflow-auto\">\n//             {jsonData && (\n//               <HierarchicalGraph\n//                 jsonData={jsonData}\n//                 labelsData={labelsData}\n//                 setHoveredCoordinates={setHoveredCoordinates}\n//                 ringVisibility={ringVisibility}\n//                 width={dimensions.width * 0.7}  // Pass dynamic width\n//                 height={dimensions.height * 0.5} // Pass dynamic height\n//               />\n//             )}\n//           </div>\n//         </div>\n\n//         {/* Right Dashboard */}\n//         <div className=\"w-full lg:w-1/4 p-4 bg-white shadow rounded-lg min-w-[200px]\">\n//           <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Point Info</h2>\n//           <div\n//             ref={subspaceLegendRef}\n//             className=\"w-full overflow-y-auto mb-4\"\n//             style={{ maxHeight: '20vh' }}\n//           />\n//           <div\n//             ref={legendRef}\n//             className=\"mt-4 overflow-y-auto\"\n//             style={{ maxHeight: '20vh' }}\n//           />\n//           {hoveredCoordinates && (\n//             <div className=\"p-2 bg-green-50 rounded text-sm w-full break-words\">\n//               <strong>Hovered Node:</strong>\n//               <div>ID: {hoveredCoordinates.Point_IDs}</div>\n//               {Object.keys(hoveredCoordinates)\n//                 .filter((key) => key !== \"id\")\n//                 .map((key) => (\n//                   <div key={key} className=\"break-words\">\n//                     <strong>{key}:</strong>{\" \"}\n//                     {hoveredCoordinates[key].toFixed\n//                       ? hoveredCoordinates[key].toFixed(2)\n//                       : hoveredCoordinates[key]}\n//                   </div>\n//                 ))}\n//             </div>\n//           )}\n//         </div>\n//       </div>\n\n//       {/* New Visualizations */}\n//       <div className=\"w-full flex flex-col lg:flex-row gap-4\">\n//         {/* Scatter Plot */}\n//         <div className=\"w-full lg:w-1/2 p-4 bg-white shadow rounded-lg\">\n//           <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Scatter Plot</h2>\n//           <div className=\"w-full h-[40vh] overflow-auto\">\n//             {classificationData && (\n//               <ScatterPlot\n//                 data={classificationData}\n//                 width={dimensions.width * 0.45}\n//                 height={dimensions.height * 0.4}\n//               />\n//             )}\n//           </div>\n//         </div>\n\n//         {/* Parallel Coordinates */}\n//         <div className=\"w-full lg:w-1/2 p-4 bg-white shadow rounded-lg\">\n//           <h2 className=\"text-lg sm:text-xl font-bold mb-4\">Parallel Coordinates</h2>\n//           <div className=\"w-full h-[40vh] overflow-auto\">\n//             {parallelData && (\n//               <ParallelCoordinates\n//                 data={parallelData}\n//                 width={dimensions.width * 0.45}\n//                 height={dimensions.height * 0.4}\n//               />\n//             )}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    console.log(\"Points data:\", pointsData);\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    const calculateProportionalAngles = () => {\n      const numRings = pointsData.length;\n      const ringAngles = new Array(numRings).fill(null).map(() => []);\n\n      // 1. Calculate sector counts for the outermost ring\n      const outermostRing = pointsData[numRings - 1];\n      const sectorsCount = Math.max(1, 2 ** outermostRing.dimensions);\n      const sectorCounts = new Array(sectorsCount).fill(0);\n\n      outermostRing.points.forEach(point => {\n        const bitVector = Object.entries(point)\n          .filter(([key]) => key !== \"Point_ID\")\n          .map(([_, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n        const sectorIndex = parseInt(bitVector, 2);\n        if (!isNaN(sectorIndex) && sectorIndex >= 0 && sectorIndex < sectorsCount) {\n          sectorCounts[sectorIndex]++;\n        }\n      });\n\n      // 2. Calculate angles for the outermost ring based on sector counts\n      const totalPoints = d3.sum(sectorCounts);\n      const minAngle = (2 * Math.PI) / (sectorsCount * 10);  // Minimum angle for visibility\n      const remainingAngle = 2 * Math.PI - sectorsCount * minAngle;\n\n      ringAngles[numRings - 1] = sectorCounts.map(count => {\n        const angle = totalPoints > 0 ? minAngle + (count / totalPoints) * remainingAngle : minAngle;\n        return angle;\n      });\n\n      // 3. Propagate angles inward\n      for (let ringIndex = numRings - 2; ringIndex >= 0; ringIndex--) {\n        const sectors = Math.max(1, 2 ** pointsData[ringIndex].dimensions);\n        for (let sectorIndex = 0; sectorIndex < sectors; sectorIndex++) {\n          const angle1 = ringAngles[ringIndex + 1][sectorIndex * 2] || 0;\n          const angle2 = ringAngles[ringIndex + 1][sectorIndex * 2 + 1] || 0;\n          ringAngles[ringIndex][sectorIndex] = angle1 + angle2;\n        }\n      }\n      return ringAngles;\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          g.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", -outerRadius - 5)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"16px\")\n            .attr(\"fill\", \"red\")\n            .attr(\"font-weight\", \"bold\")\n            .text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      const ringAngles = calculateProportionalAngles();\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        let currentAngle = Math.PI / 2;\n\n        const sectors = 2 ** (index + 1); // Correct sector count\n        for (let i = 0; i < sectors; i++) {\n          const angle = ringAngles[index][i]; // Access pre-calculated angles\n\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n      });\n    };\n\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n      let currentAngle = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        const startAngle = isProportional ?\n          currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n          (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n        const centerAngle = startAngle + angleWidth / 2;\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}