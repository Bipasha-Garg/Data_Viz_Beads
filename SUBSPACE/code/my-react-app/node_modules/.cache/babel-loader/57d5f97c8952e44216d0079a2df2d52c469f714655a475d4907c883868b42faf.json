{"ast":null,"code":"// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n//   const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n//   useEffect(() => {\n//     // check data json file\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n// // check label json file\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // const edgePopup = d3\n//     //   .select(\"body\")\n//     //   .append(\"div\")\n//     //   .attr(\"class\", \"edge-popup\")\n//     //   .style(\"position\", \"absolute\")\n//     //   .style(\"visibility\", \"hidden\")\n//     //   .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//     //   .style(\"color\", \"black\")\n//     //   .style(\"padding\", \"10px\")\n//     //   .style(\"border-radius\", \"4px\")\n//     //   .style(\"font-size\", \"12px\")\n//     //   .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//     //   .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     // subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         // const rotationOffset = Math.PI / 2;\n\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         const totalPoints = pointsData[index].points.length;\n//         const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n//         let sectorAngles = [];\n//         if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n//           const totalAngle = 2 * Math.PI;\n//           const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n//           const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n\n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return minSectorAngle;\n//             return minSectorAngle + (remainingAngle * count / totalPoints);\n//           });\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // let currentAngle = rotationOffset;\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySector[bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 // clearHighlights();\n\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 const circles = g.selectAll(\"circle\")\n//                   .filter(d => {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n\n//                 highlightedElements = { line, circles, originalColor };\n\n//                 const point1 = positions[i].point;\n//                 const point2 = positions[i + 1].point;\n\n//                 const coords1 = Object.entries(point1)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n//                 const coords2 = Object.entries(point2)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n\n//                 const label1 = Object.entries(labelsData?.labels || {})\n//                   .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//                 // edgePopup\n//                 //   .style(\"visibility\", \"visible\")\n//                 //   .html(`\n//                 //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                 //     <strong>Point 1</strong><br>\n//                 //     Subspace: ${positions[i].subspaceId}<br>\n//                 //     Coordinates: ${coords1}<br>\n//                 //     Label: ${label1}<br><br>\n//                 //     <strong>Point 2</strong><br>\n//                 //     Subspace: ${positions[i + 1].subspaceId}<br>\n//                 //     Coordinates: ${coords2}<br>\n//                 //     Label: ${label1}\n//                 //   `)\n//                 //   .style(\"top\", event.pageY + 15 + \"px\")\n//                 //   .style(\"left\", event.pageX + 15 + \"px\");\n\n//                 // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 //   if (!edgePopup.node().contains(e.target)) {\n//                 //     edgePopup.style(\"visibility\", \"hidden\");\n//                 //     // clearHighlights();\n//                 //     d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 //   }\n//                 // });\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       // edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button \n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n\n//         {isProportionalView && (\n//           <label style={{ marginLeft: \"10px\" }}>\n//             <input\n//               type=\"checkbox\"\n//               checked={applyToAllRings}\n//               onChange={(e) => setApplyToAllRings(e.target.checked)}\n//             />\n//             Apply to all rings\n//           </label>\n//         )}\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n// ____________________________________________________________________________________________________________________________________________\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//     const graphRef = useRef(null);\n//     const [isProportionalView, setIsProportionalView] = useState(false);\n\n//     useEffect(() => {\n//         if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//             console.error(\"Invalid or empty jsonData:\", jsonData);\n//             return;\n//         }\n//         if (!labelsData || typeof labelsData !== \"object\") {\n//             console.error(\"Invalid labelsData:\", labelsData);\n//             return;\n//         }\n\n//         const svg = d3.select(graphRef.current);\n//         svg.selectAll(\"*\").remove();\n\n//         const width = 800;\n//         const height = 800;\n//         const margin = 20;\n//         const maxRadius = Math.min(width, height) / 2 - margin;\n\n//         const tooltip = d3\n//             .select(\"body\")\n//             .append(\"div\")\n//             .attr(\"class\", \"tooltip\")\n//             .style(\"position\", \"absolute\")\n//             .style(\"visibility\", \"hidden\")\n//             .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//             .style(\"color\", \"white\")\n//             .style(\"padding\", \"5px\")\n//             .style(\"border-radius\", \"4px\")\n//             .style(\"font-size\", \"12px\");\n\n//         const getLabelColor = (pointId) => {\n//             if (!labelsData || !labelsData.labels) return \"gray\";\n//             for (const label of Object.keys(labelsData.labels)) {\n//                 const pointList = labelsData.labels[label];\n//                 if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//                     return colorScale(label);\n//                 }\n//             }\n//             return \"gray\";\n//         };\n\n//         const colorScale = d3\n//             .scaleOrdinal(d3.schemeCategory10)\n//             .domain(Object.keys(labelsData.labels || {}));\n\n//         const getSectorColor = (bitVector) => {\n//             // Color based on last bit: 1 = blue, 0 = pink\n//             return bitVector.slice(-1) === \"1\" ? \"blue\" : \"pink\";\n//         };\n\n//         const subspaces = Object.keys(jsonData);\n//         const pointsData = subspaces.map((key) => ({\n//             key,\n//             points: jsonData[key],\n//             dimensions: key.length,\n//             subspaceId: key,\n//         }));\n//         const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//         const pointPositions = {};\n\n//         const drawGraph = () => {\n//             svg.selectAll(\"*\").remove();\n//             const g = svg\n//                 .attr(\"width\", width)\n//                 .attr(\"height\", height)\n//                 .append(\"g\")\n//                 .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Removed rotate(-90) to start at 3 o'clock\n\n//             subspaces.forEach((key, index) => {\n//                 if (!ringVisibility[key]) return;\n\n//                 const innerRadius = (index / subspaces.length) * maxRadius;\n//                 const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//                 const sectors = Math.pow(2, key.length); // 2^d where d is dimension of subspace\n//                 const sectorAngle = (2 * Math.PI) / sectors; // Equal angles for normal view\n\n//                 for (let i = 0; i < sectors; i++) {\n//                     const startAngle = i * sectorAngle; // Starting at 3 o'clock (0 radians)\n//                     const endAngle = (i + 1) * sectorAngle;\n//                     const bitVector = i.toString(2).padStart(key.length, \"0\");\n\n//                     // Draw sector\n//                     g.append(\"path\")\n//                         .attr(\"d\", d3.arc()\n//                             .innerRadius(innerRadius)\n//                             .outerRadius(outerRadius)\n//                             .startAngle(startAngle)\n//                             .endAngle(endAngle)\n//                         )\n//                         .attr(\"fill\", getSectorColor(bitVector))\n//                         .attr(\"fill-opacity\", 0.3)\n//                         .attr(\"stroke\", \"black\")\n//                         .attr(\"stroke-width\", 0.1)\n//                         .style(\"cursor\", \"pointer\");\n\n//                     // Add ring label at first sector\n//                     if (i === 0) {\n//                         const labelAngle = sectorAngle / 2;\n//                         const labelRadius = (innerRadius + outerRadius) / 2;\n//                         const x = labelRadius * Math.cos(labelAngle);\n//                         const y = labelRadius * Math.sin(labelAngle);\n//                         g.append(\"text\")\n//                             .attr(\"x\", x)\n//                             .attr(\"y\", y)\n//                             .attr(\"text-anchor\", \"middle\")\n//                             .attr(\"font-size\", \"16px\")\n//                             .attr(\"fill\", \"red\")\n//                             .attr(\"font-weight\", \"bold\")\n//                             .text(ringLabels[index]);\n//                     }\n//                 }\n\n//                 // Place points\n//                 pointsData[index].points.forEach((point) => {\n//                     const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//                     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//                     const sectorIndex = parseInt(bitVector, 2);\n\n//                     const startAngle = sectorIndex * sectorAngle;\n//                     const endAngle = (sectorIndex + 1) * sectorAngle;\n//                     const centerAngle = (startAngle + endAngle) / 2;\n//                     const randomRadius = innerRadius + Math.random() * (outerRadius - innerRadius);\n\n//                     const x = randomRadius * Math.cos(centerAngle);\n//                     const y = randomRadius * Math.sin(centerAngle);\n\n//                     point.Point_ID.forEach((id) => {\n//                         if (!pointPositions[id]) {\n//                             pointPositions[id] = [];\n//                         }\n//                         pointPositions[id].push({ x, y, point, subspaceId: key });\n//                     });\n\n//                     g.append(\"circle\")\n//                         .attr(\"cx\", x)\n//                         .attr(\"cy\", y)\n//                         .attr(\"r\", 3)\n//                         .attr(\"fill\", \"black\")\n//                         .attr(\"stroke\", \"white\")\n//                         .attr(\"stroke-width\", 0.5)\n//                         .style(\"pointer-events\", \"visible\")\n//                         .on(\"mouseover\", (event) => {\n//                             const pointIds = point.Point_ID.join(\", \");\n//                             let associatedLabels = [];\n//                             if (labelsData && labelsData.labels) {\n//                                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                                     if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                                         associatedLabels.push(label);\n//                                     }\n//                                 });\n//                             }\n//                             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//                             tooltip\n//                                 .style(\"visibility\", \"visible\")\n//                                 .html(\n//                                     `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                                 );\n//                             setHoveredCoordinates({ ...point, label: labelText });\n//                         })\n//                         .on(\"mousemove\", (event) => {\n//                             tooltip\n//                                 .style(\"top\", event.pageY + 10 + \"px\")\n//                                 .style(\"left\", event.pageX + 10 + \"px\");\n//                         })\n//                         .on(\"mouseout\", () => {\n//                             tooltip.style(\"visibility\", \"hidden\");\n//                             setHoveredCoordinates(null);\n//                         });\n//                 });\n//             });\n\n//             // Draw connections between points\n//             Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//                 if (positions.length > 1) {\n//                     for (let i = 0; i < positions.length - 1; i++) {\n//                         g.append(\"line\")\n//                             .attr(\"x1\", positions[i].x)\n//                             .attr(\"y1\", positions[i].y)\n//                             .attr(\"x2\", positions[i + 1].x)\n//                             .attr(\"y2\", positions[i + 1].y)\n//                             .attr(\"stroke\", getLabelColor(pointId))\n//                             .attr(\"stroke-width\", 0.3)\n//                             .style(\"cursor\", \"pointer\")\n//                             .on(\"mouseover\", (event) => {\n//                                 tooltip\n//                                     .style(\"visibility\", \"visible\")\n//                                     .html(`Connection: Point_ID ${pointId}`);\n//                             })\n//                             .on(\"mousemove\", (event) => {\n//                                 tooltip\n//                                     .style(\"top\", event.pageY + 10 + \"px\")\n//                                     .style(\"left\", event.pageX + 10 + \"px\");\n//                             })\n//                             .on(\"mouseout\", () => {\n//                                 tooltip.style(\"visibility\", \"hidden\");\n//                             });\n//                     }\n//                 }\n//             });\n\n//             const zoom = d3.zoom().on(\"zoom\", (event) => {\n//                 g.attr(\"transform\", event.transform);\n//             });\n//             svg.call(zoom);\n//         };\n\n//         drawGraph();\n\n//         return () => {\n//             tooltip.remove();\n//         };\n//     }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n//     return (\n//         <div style={{ width: \"100%\", height: \"100%\" }}>\n//             <div style={{ marginBottom: \"10px\" }}>\n//                 <button\n//                     onClick={() => setIsProportionalView(!isProportionalView)}\n//                     style={{\n//                         padding: \"5px 10px\",\n//                         marginRight: \"10px\",\n//                         backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//                         color: isProportionalView ? \"white\" : \"black\",\n//                         border: \"1px solid #ccc\",\n//                         borderRadius: \"4px\",\n//                         cursor: \"pointer\"\n//                     }}\n//                 >\n//                     {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//                 </button>\n//             </div>\n//             <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//         </div>\n//     );\n// };\n\n// export default HierarchicalGraph;","map":{"version":3,"names":[],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n    \n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n//   const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n//   useEffect(() => {\n//     // check data json file\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n// // check label json file\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // const edgePopup = d3\n//     //   .select(\"body\")\n//     //   .append(\"div\")\n//     //   .attr(\"class\", \"edge-popup\")\n//     //   .style(\"position\", \"absolute\")\n//     //   .style(\"visibility\", \"hidden\")\n//     //   .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//     //   .style(\"color\", \"black\")\n//     //   .style(\"padding\", \"10px\")\n//     //   .style(\"border-radius\", \"4px\")\n//     //   .style(\"font-size\", \"12px\")\n//     //   .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//     //   .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     // subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         // const rotationOffset = Math.PI / 2;\n\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         const totalPoints = pointsData[index].points.length;\n//         const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n//         let sectorAngles = [];\n//         if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n//           const totalAngle = 2 * Math.PI;\n//           const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n//           const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n          \n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return minSectorAngle;\n//             return minSectorAngle + (remainingAngle * count / totalPoints);\n//           });\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // let currentAngle = rotationOffset;\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySector[bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 // clearHighlights();\n\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 const circles = g.selectAll(\"circle\")\n//                   .filter(d => {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n\n//                 highlightedElements = { line, circles, originalColor };\n\n//                 const point1 = positions[i].point;\n//                 const point2 = positions[i + 1].point;\n\n//                 const coords1 = Object.entries(point1)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n//                 const coords2 = Object.entries(point2)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n\n//                 const label1 = Object.entries(labelsData?.labels || {})\n//                   .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//                 // edgePopup\n//                 //   .style(\"visibility\", \"visible\")\n//                 //   .html(`\n//                 //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                 //     <strong>Point 1</strong><br>\n//                 //     Subspace: ${positions[i].subspaceId}<br>\n//                 //     Coordinates: ${coords1}<br>\n//                 //     Label: ${label1}<br><br>\n//                 //     <strong>Point 2</strong><br>\n//                 //     Subspace: ${positions[i + 1].subspaceId}<br>\n//                 //     Coordinates: ${coords2}<br>\n//                 //     Label: ${label1}\n//                 //   `)\n//                 //   .style(\"top\", event.pageY + 15 + \"px\")\n//                 //   .style(\"left\", event.pageX + 15 + \"px\");\n\n//                 // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 //   if (!edgePopup.node().contains(e.target)) {\n//                 //     edgePopup.style(\"visibility\", \"hidden\");\n//                 //     // clearHighlights();\n//                 //     d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 //   }\n//                 // });\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       // edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button \n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n        \n//         {isProportionalView && (\n//           <label style={{ marginLeft: \"10px\" }}>\n//             <input\n//               type=\"checkbox\"\n//               checked={applyToAllRings}\n//               onChange={(e) => setApplyToAllRings(e.target.checked)}\n//             />\n//             Apply to all rings\n//           </label>\n//         )}\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\n\n\n\n\n// ____________________________________________________________________________________________________________________________________________\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//     const graphRef = useRef(null);\n//     const [isProportionalView, setIsProportionalView] = useState(false);\n\n//     useEffect(() => {\n//         if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//             console.error(\"Invalid or empty jsonData:\", jsonData);\n//             return;\n//         }\n//         if (!labelsData || typeof labelsData !== \"object\") {\n//             console.error(\"Invalid labelsData:\", labelsData);\n//             return;\n//         }\n\n//         const svg = d3.select(graphRef.current);\n//         svg.selectAll(\"*\").remove();\n\n//         const width = 800;\n//         const height = 800;\n//         const margin = 20;\n//         const maxRadius = Math.min(width, height) / 2 - margin;\n\n//         const tooltip = d3\n//             .select(\"body\")\n//             .append(\"div\")\n//             .attr(\"class\", \"tooltip\")\n//             .style(\"position\", \"absolute\")\n//             .style(\"visibility\", \"hidden\")\n//             .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//             .style(\"color\", \"white\")\n//             .style(\"padding\", \"5px\")\n//             .style(\"border-radius\", \"4px\")\n//             .style(\"font-size\", \"12px\");\n\n//         const getLabelColor = (pointId) => {\n//             if (!labelsData || !labelsData.labels) return \"gray\";\n//             for (const label of Object.keys(labelsData.labels)) {\n//                 const pointList = labelsData.labels[label];\n//                 if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//                     return colorScale(label);\n//                 }\n//             }\n//             return \"gray\";\n//         };\n\n//         const colorScale = d3\n//             .scaleOrdinal(d3.schemeCategory10)\n//             .domain(Object.keys(labelsData.labels || {}));\n\n//         const getSectorColor = (bitVector) => {\n//             // Color based on last bit: 1 = blue, 0 = pink\n//             return bitVector.slice(-1) === \"1\" ? \"blue\" : \"pink\";\n//         };\n\n//         const subspaces = Object.keys(jsonData);\n//         const pointsData = subspaces.map((key) => ({\n//             key,\n//             points: jsonData[key],\n//             dimensions: key.length,\n//             subspaceId: key,\n//         }));\n//         const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//         const pointPositions = {};\n\n//         const drawGraph = () => {\n//             svg.selectAll(\"*\").remove();\n//             const g = svg\n//                 .attr(\"width\", width)\n//                 .attr(\"height\", height)\n//                 .append(\"g\")\n//                 .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Removed rotate(-90) to start at 3 o'clock\n\n//             subspaces.forEach((key, index) => {\n//                 if (!ringVisibility[key]) return;\n\n//                 const innerRadius = (index / subspaces.length) * maxRadius;\n//                 const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//                 const sectors = Math.pow(2, key.length); // 2^d where d is dimension of subspace\n//                 const sectorAngle = (2 * Math.PI) / sectors; // Equal angles for normal view\n\n//                 for (let i = 0; i < sectors; i++) {\n//                     const startAngle = i * sectorAngle; // Starting at 3 o'clock (0 radians)\n//                     const endAngle = (i + 1) * sectorAngle;\n//                     const bitVector = i.toString(2).padStart(key.length, \"0\");\n\n//                     // Draw sector\n//                     g.append(\"path\")\n//                         .attr(\"d\", d3.arc()\n//                             .innerRadius(innerRadius)\n//                             .outerRadius(outerRadius)\n//                             .startAngle(startAngle)\n//                             .endAngle(endAngle)\n//                         )\n//                         .attr(\"fill\", getSectorColor(bitVector))\n//                         .attr(\"fill-opacity\", 0.3)\n//                         .attr(\"stroke\", \"black\")\n//                         .attr(\"stroke-width\", 0.1)\n//                         .style(\"cursor\", \"pointer\");\n\n//                     // Add ring label at first sector\n//                     if (i === 0) {\n//                         const labelAngle = sectorAngle / 2;\n//                         const labelRadius = (innerRadius + outerRadius) / 2;\n//                         const x = labelRadius * Math.cos(labelAngle);\n//                         const y = labelRadius * Math.sin(labelAngle);\n//                         g.append(\"text\")\n//                             .attr(\"x\", x)\n//                             .attr(\"y\", y)\n//                             .attr(\"text-anchor\", \"middle\")\n//                             .attr(\"font-size\", \"16px\")\n//                             .attr(\"fill\", \"red\")\n//                             .attr(\"font-weight\", \"bold\")\n//                             .text(ringLabels[index]);\n//                     }\n//                 }\n\n//                 // Place points\n//                 pointsData[index].points.forEach((point) => {\n//                     const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//                     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//                     const sectorIndex = parseInt(bitVector, 2);\n\n//                     const startAngle = sectorIndex * sectorAngle;\n//                     const endAngle = (sectorIndex + 1) * sectorAngle;\n//                     const centerAngle = (startAngle + endAngle) / 2;\n//                     const randomRadius = innerRadius + Math.random() * (outerRadius - innerRadius);\n\n//                     const x = randomRadius * Math.cos(centerAngle);\n//                     const y = randomRadius * Math.sin(centerAngle);\n\n//                     point.Point_ID.forEach((id) => {\n//                         if (!pointPositions[id]) {\n//                             pointPositions[id] = [];\n//                         }\n//                         pointPositions[id].push({ x, y, point, subspaceId: key });\n//                     });\n\n//                     g.append(\"circle\")\n//                         .attr(\"cx\", x)\n//                         .attr(\"cy\", y)\n//                         .attr(\"r\", 3)\n//                         .attr(\"fill\", \"black\")\n//                         .attr(\"stroke\", \"white\")\n//                         .attr(\"stroke-width\", 0.5)\n//                         .style(\"pointer-events\", \"visible\")\n//                         .on(\"mouseover\", (event) => {\n//                             const pointIds = point.Point_ID.join(\", \");\n//                             let associatedLabels = [];\n//                             if (labelsData && labelsData.labels) {\n//                                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                                     if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                                         associatedLabels.push(label);\n//                                     }\n//                                 });\n//                             }\n//                             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//                             tooltip\n//                                 .style(\"visibility\", \"visible\")\n//                                 .html(\n//                                     `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                                 );\n//                             setHoveredCoordinates({ ...point, label: labelText });\n//                         })\n//                         .on(\"mousemove\", (event) => {\n//                             tooltip\n//                                 .style(\"top\", event.pageY + 10 + \"px\")\n//                                 .style(\"left\", event.pageX + 10 + \"px\");\n//                         })\n//                         .on(\"mouseout\", () => {\n//                             tooltip.style(\"visibility\", \"hidden\");\n//                             setHoveredCoordinates(null);\n//                         });\n//                 });\n//             });\n\n//             // Draw connections between points\n//             Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//                 if (positions.length > 1) {\n//                     for (let i = 0; i < positions.length - 1; i++) {\n//                         g.append(\"line\")\n//                             .attr(\"x1\", positions[i].x)\n//                             .attr(\"y1\", positions[i].y)\n//                             .attr(\"x2\", positions[i + 1].x)\n//                             .attr(\"y2\", positions[i + 1].y)\n//                             .attr(\"stroke\", getLabelColor(pointId))\n//                             .attr(\"stroke-width\", 0.3)\n//                             .style(\"cursor\", \"pointer\")\n//                             .on(\"mouseover\", (event) => {\n//                                 tooltip\n//                                     .style(\"visibility\", \"visible\")\n//                                     .html(`Connection: Point_ID ${pointId}`);\n//                             })\n//                             .on(\"mousemove\", (event) => {\n//                                 tooltip\n//                                     .style(\"top\", event.pageY + 10 + \"px\")\n//                                     .style(\"left\", event.pageX + 10 + \"px\");\n//                             })\n//                             .on(\"mouseout\", () => {\n//                                 tooltip.style(\"visibility\", \"hidden\");\n//                             });\n//                     }\n//                 }\n//             });\n\n//             const zoom = d3.zoom().on(\"zoom\", (event) => {\n//                 g.attr(\"transform\", event.transform);\n//             });\n//             svg.call(zoom);\n//         };\n\n//         drawGraph();\n\n//         return () => {\n//             tooltip.remove();\n//         };\n//     }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n//     return (\n//         <div style={{ width: \"100%\", height: \"100%\" }}>\n//             <div style={{ marginBottom: \"10px\" }}>\n//                 <button\n//                     onClick={() => setIsProportionalView(!isProportionalView)}\n//                     style={{\n//                         padding: \"5px 10px\",\n//                         marginRight: \"10px\",\n//                         backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//                         color: isProportionalView ? \"white\" : \"black\",\n//                         border: \"1px solid #ccc\",\n//                         borderRadius: \"4px\",\n//                         cursor: \"pointer\"\n//                     }}\n//                 >\n//                     {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//                 </button>\n//             </div>\n//             <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//         </div>\n//     );\n// };\n\n// export default HierarchicalGraph;\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;;AAYA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}