{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     console.log(\"Points data:\", pointsData.dimensions);\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\nconst renderNormalView = () => {\n  subspaces.forEach((key, index) => {\n    if (!ringVisibility[key]) return;\n    const innerRadius = index / subspaces.length * maxRadius;\n    const outerRadius = (index + 1) / subspaces.length * maxRadius;\n    const sectors = 2 ** (index + 1);\n    const rotationOffset = Math.PI / 2;\n    for (let i = 0; i < sectors; i++) {\n      const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n      const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n      g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n      g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n    }\n    renderPoints(index, innerRadius, outerRadius, sectors);\n  });\n};\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } \n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    console.log(\"Points data:\", pointsData.dimensions);\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // Function to calculate proportional angles\n    const calculateProportionalAngles = index => {\n      const sectors = 2 ** (index + 1);\n      const points = pointsData[index].points;\n      const sectorCounts = Array(sectors).fill(0);\n      const minAngle = 0.1 * (Math.PI * 2) / sectors; // Minimum angle for empty sectors (5% of uniform angle)\n\n      // Count points in each sector\n      points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        sectorCounts[bitVectorIndex]++;\n      });\n\n      // Calculate proportional angles\n      const totalPoints = points.length;\n      const remainingAngle = 2 * Math.PI - minAngle * sectorCounts.filter(count => count === 0).length;\n      const pointsInNonEmptySectors = totalPoints;\n      return sectorCounts.map(count => {\n        if (count === 0) return minAngle;\n        return count / pointsInNonEmptySectors * remainingAngle;\n      });\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        // const rotationOffset = Math.PI / 2;\n        const rotationOffset = 0;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        // Calculate proportional angles for sectors\n        const proportionalAngles = calculateProportionalAngles(index);\n\n        // Draw sectors with proportional angles\n        let currentAngle = rotationOffset;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + proportionalAngles[i];\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n      });\n    };\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n      const rotationOffset = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        let startAngle;\n        if (isProportional) {\n          startAngle = rotationOffset;\n          for (let j = 0; j < bitVectorIndex; j++) {\n            startAngle += angles[j];\n          }\n        } else {\n          startAngle = 2 * Math.PI * bitVectorIndex / sectors + rotationOffset;\n        }\n        const angleWidth = angles[bitVectorIndex];\n        const centerAngle = startAngle + angleWidth / 2;\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: pointsData[index].key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 585,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["renderNormalView","subspaces","forEach","key","index","ringVisibility","innerRadius","length","maxRadius","outerRadius","sectors","rotationOffset","Math","PI","i","startAngle","endAngle","g","append","attr","d3","arc","getSectorColor","style","text","ringLabels","renderPoints","React","useEffect","useRef","useState","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","_s","graphRef","viewMode","setViewMode","Object","keys","console","error","svg","select","current","selectAll","remove","width","height","margin","min","tooltip","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","sectorIndex","baseColor","hsl","isPositive","h","s","toString","sort","a","b","pointsData","map","points","dimensions","subspaceId","log","_","String","fromCharCode","pointPositions","calculateProportionalAngles","sectorCounts","fill","minAngle","point","pointData","entries","filter","bitVector","coord","join","bitVectorIndex","parseInt","totalPoints","remainingAngle","count","pointsInNonEmptySectors","renderProportionalView","proportionalAngles","currentAngle","anglesOrSectors","isProportional","angles","j","angleWidth","centerAngle","minRadius","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","push","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     console.log(\"Points data:\", pointsData.dimensions);\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          g.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", -outerRadius - 5)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"16px\")\n            .attr(\"fill\", \"red\")\n            .attr(\"font-weight\", \"bold\")\n            .text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } \n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    console.log(\"Points data:\", pointsData.dimensions);\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // Function to calculate proportional angles\n    const calculateProportionalAngles = (index) => {\n      const sectors = 2 ** (index + 1);\n      const points = pointsData[index].points;\n      const sectorCounts = Array(sectors).fill(0);\n      const minAngle = 0.1 * (Math.PI * 2) / sectors; // Minimum angle for empty sectors (5% of uniform angle)\n\n      // Count points in each sector\n      points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        sectorCounts[bitVectorIndex]++;\n      });\n\n      // Calculate proportional angles\n      const totalPoints = points.length;\n      const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n      const pointsInNonEmptySectors = totalPoints;\n\n      return sectorCounts.map(count => {\n        if (count === 0) return minAngle;\n        return (count / pointsInNonEmptySectors) * remainingAngle;\n      });\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        // const rotationOffset = Math.PI / 2;\n        const rotationOffset = 0;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          g.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", -outerRadius - 5)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"16px\")\n            .attr(\"fill\", \"red\")\n            .attr(\"font-weight\", \"bold\")\n            .text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        // Calculate proportional angles for sectors\n        const proportionalAngles = calculateProportionalAngles(index);\n\n        // Draw sectors with proportional angles\n        let currentAngle = rotationOffset;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + proportionalAngles[i];\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n      });\n    };\n\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n      const rotationOffset = Math.PI / 2;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        let startAngle;\n        if (isProportional) {\n          startAngle = rotationOffset;\n          for (let j = 0; j < bitVectorIndex; j++) {\n            startAngle += angles[j];\n          }\n        } else {\n          startAngle = (2 * Math.PI * bitVectorIndex) / sectors + rotationOffset;\n        }\n\n        const angleWidth = angles[bitVectorIndex];\n        const centerAngle = startAngle + angleWidth / 2;\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;EAC7BC,SAAS,CAACC,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;IAChC,IAAI,CAACC,cAAc,CAACF,GAAG,CAAC,EAAE;IAC1B,MAAMG,WAAW,GAAIF,KAAK,GAAGH,SAAS,CAACM,MAAM,GAAIC,SAAS;IAC1D,MAAMC,WAAW,GAAI,CAACL,KAAK,GAAG,CAAC,IAAIH,SAAS,CAACM,MAAM,GAAIC,SAAS;IAChE,MAAME,OAAO,GAAG,CAAC,KAAKN,KAAK,GAAG,CAAC,CAAC;IAChC,MAAMO,cAAc,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IAElC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;MAChC,MAAMC,UAAU,GAAI,CAAC,GAAGH,IAAI,CAACC,EAAE,GAAGC,CAAC,GAAIJ,OAAO,GAAGC,cAAc;MAC/D,MAAMK,QAAQ,GAAI,CAAC,GAAGJ,IAAI,CAACC,EAAE,IAAIC,CAAC,GAAG,CAAC,CAAC,GAAIJ,OAAO,GAAGC,cAAc;MAEnEM,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC,CACbC,IAAI,CAAC,GAAG,EAAEC,EAAE,CAACC,GAAG,CAAC,CAAC,CAChBf,WAAW,CAACA,WAAW,CAAC,CACxBG,WAAW,CAACA,WAAW,CAAC,CACxBM,UAAU,CAACA,UAAU,CAAC,CACtBC,QAAQ,CAACA,QAAQ,CACpB,CAAC,CACAG,IAAI,CAAC,MAAM,EAAEG,cAAc,CAAClB,KAAK,EAAEU,CAAC,CAAC,CAAC,CACtCK,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBI,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;MAE7BN,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC,CACbC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,CAACV,WAAW,GAAG,CAAC,CAAC,CAC3BU,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CACnBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3BK,IAAI,CAACC,UAAU,CAACrB,KAAK,CAAC,CAAC;IAC5B;IACAsB,YAAY,CAACtB,KAAK,EAAEE,WAAW,EAAEG,WAAW,EAAEC,OAAO,CAAC;EACxD,CAAC,CAAC;AACJ,CAAC;;AAGL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}