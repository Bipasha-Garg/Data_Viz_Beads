{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n\n//     // Sort subspaces by dimension in *descending* order\n//     subspaces.sort((a, b) => b.length - a.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//       subspaceId: key, // Store the subspace identifier\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the *smallest* square and increase size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n//           // Add sector labels\n//           const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n//           const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//             // .text(\n//             //   subspace.subspaceId +\n//             //     i.toString(2).padStart(subspace.dimensions, \"0\")\n//             // );\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Check if the point lies within this subspace's square.  This is critical\n//         // to prevent points from bleeding into other squares.\n//         if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\");\n//             // .text(\n//             //   `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             // );\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); // Debugging\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\",  }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n      const sectors = 2 ** subspace.dimensions;\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale(subspace.dimensions % colorScale.range().length);\n      g.append(\"rect\").attr(\"x\", -squareSize / 2).attr(\"y\", -squareSize / 2).attr(\"width\", squareSize).attr(\"height\", squareSize).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.4).attr(\"stroke-width\", 2);\n      const mid = squareSize / 2;\n      g.append(\"line\").attr(\"x1\", -mid).attr(\"y1\", 0).attr(\"x2\", mid).attr(\"y2\", 0).attr(\"stroke\", \"white\");\n      g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", -mid).attr(\"x2\", 0).attr(\"y2\", mid).attr(\"stroke\", \"white\");\n      subspace.points.forEach(point => {\n        const sectorIndex = parseInt(point.Point_ID, 2);\n        const x = (sectorIndex % 2 ? 1 : -1) * (mid / 2);\n        const y = (sectorIndex < 2 ? -1 : 1) * (mid / 2);\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 5).attr(\"fill\", \"black\");\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"600px\",\n      height: \"600px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxSquareSize","Math","min","g","attr","append","forEach","subspace","index","squareSize","sectors","colorScale","scaleOrdinal","range","subspaceColor","mid","point","sectorIndex","parseInt","Point_ID","x","y","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n\n//     // Sort subspaces by dimension in *descending* order\n//     subspaces.sort((a, b) => b.length - a.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//       subspaceId: key, // Store the subspace identifier\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the *smallest* square and increase size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n\n//           // Add sector labels\n//           const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n//           const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//             // .text(\n//             //   subspace.subspaceId +\n//             //     i.toString(2).padStart(subspace.dimensions, \"0\")\n//             // );\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Check if the point lies within this subspace's square.  This is critical\n//         // to prevent points from bleeding into other squares.\n//         if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\");\n//             // .text(\n//             //   `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             // );\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); // Debugging\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\",  }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n      const sectors = 2 ** subspace.dimensions;\n\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n\n      const subspaceColor = colorScale(\n        subspace.dimensions % colorScale.range().length\n      );\n\n      g.append(\"rect\")\n        .attr(\"x\", -squareSize / 2)\n        .attr(\"y\", -squareSize / 2)\n        .attr(\"width\", squareSize)\n        .attr(\"height\", squareSize)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.4)\n        .attr(\"stroke-width\", 2);\n\n      const mid = squareSize / 2;\n      g.append(\"line\")\n        .attr(\"x1\", -mid)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", mid)\n        .attr(\"y2\", 0)\n        .attr(\"stroke\", \"white\");\n      g.append(\"line\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", -mid)\n        .attr(\"x2\", 0)\n        .attr(\"y2\", mid)\n        .attr(\"stroke\", \"white\");\n\n      subspace.points.forEach((point) => {\n        const sectorIndex = parseInt(point.Point_ID, 2);\n        const x = (sectorIndex % 2 ? 1 : -1) * (mid / 2);\n        const y = (sectorIndex < 2 ? -1 : 1) * (mid / 2);\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 5)\n          .attr(\"fill\", \"black\");\n      });\n    });\n  }, [jsonData]);\n\n  return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}