{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n//   console.log(labelsData);\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {};\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // Generate unique colors for each label\n//     // Define color scale globally to avoid unnecessary re-renders\n\n//     // Step 1: Extract unique labels dynamically\n//     const labelKeys = Object.keys(labelsData);\n//     console.log(labelsData);\n//     // Step 2: Create a color scale dynamically based on the number of labels\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelKeys);\n\n// const getLabelColor = (pointId) => {\n//   if (!labelsData || !labelsData.labels) return \"gray\"; // Ensure labelsData is properly structured\n\n//   for (const label of Object.keys(labelsData.labels)) {\n//     const pointList = labelsData.labels[label];\n\n//     if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//       return colorScale(label); // Ensure label is passed correctly\n//     }\n//   }\n\n//   return \"gray\"; // Default color if no match found\n// };\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n//     };\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n\n//       // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n//       const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(subspace.key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//             totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n//         const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n//         const legendData = [\n//           { color: \"yellow\", label: \"Positive Bit\" },\n//           { color: \"pink\", label: \"Negative Bit\" },\n//         ];\n//         legendData.forEach((item, index) => {\n//           legend\n//             .append(\"rect\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", index * 20)\n//             .attr(\"width\", 15)\n//             .attr(\"height\", 15)\n//             .attr(\"fill\", item.color);\n\n//           legend\n//             .append(\"text\")\n//             .attr(\"x\", 20)\n//             .attr(\"y\", index * 20 + 12)\n//             .text(item.label)\n//             .attr(\"font-size\", \"12px\")\n//             .attr(\"alignment-baseline\", \"middle\");\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n\n  // Initialize ring visibility state (all rings visible by default)\n  useEffect(() => {\n    if (jsonData && Object.keys(jsonData).length > 0) {\n      const subspaces = Object.keys(jsonData);\n      subspaces.sort((a, b) => a.length - b.length);\n      const initialVisibility = subspaces.reduce((acc, key) => {\n        acc[key] = true; // All rings visible by default\n        return acc;\n      }, {});\n      setRingVisibility(initialVisibility);\n    }\n  }, [jsonData]);\n\n  // Render the graph\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove(); // Clear SVG before rendering\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const pointPositions = {};\n    subspaces.forEach((key, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n\n      // Add plus/minus button for each ring\n      const buttonAngle = 0; // Position the button at 0 degrees (right side)\n      const buttonRadius = 3; // Position outside the ring\n      const buttonX = buttonRadius * Math.cos(buttonAngle);\n      const buttonY = buttonRadius * Math.sin(buttonAngle);\n      g.append(\"text\").attr(\"x\", buttonX).attr(\"y\", buttonY).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"cursor\", \"pointer\").text(ringVisibility[key] ? \"-\" : \"+\").style(\"fill\", \"blue\") // Make the button more visible\n      .on(\"click\", () => toggleRingVisibility(key));\n      if (!ringVisibility[key]) return; // Skip if ring is collapsed\n\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      // Draw sectors\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(2 * Math.PI * i / sectors + rotationOffset).endAngle(2 * Math.PI * (i + 1) / sectors + rotationOffset)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(key);\n      }\n\n      // Draw radial lines\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n      }\n\n      // Draw points\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}`);\n          setHoveredCoordinates(point);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n\n    // Draw connections between points\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n  const toggleRingVisibility = key => {\n    setRingVisibility(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n  };\n  const toggleAllRingsVisibility = () => {\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const newVisibility = subspaces.reduce((acc, key, index) => {\n      // Do not collapse the last two rings\n      acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n      return acc;\n    }, {});\n    setRingVisibility(newVisibility);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleAllRingsVisibility,\n      children: Object.values(ringVisibility).every(v => v) ? \"Collapse All\" : \"Expand All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"o/Ia/CPRKKWLhKKM7fl9zm1HzI4=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","_s","graphRef","ringVisibility","setRingVisibility","Object","keys","length","subspaces","sort","a","b","initialVisibility","reduce","acc","key","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","pointsData","map","points","dimensions","subspaceId","pointPositions","forEach","innerRadius","outerRadius","buttonAngle","buttonRadius","buttonX","cos","buttonY","sin","text","on","toggleRingVisibility","sectors","rotationOffset","PI","i","arc","startAngle","endAngle","angle","x1","y1","x2","y2","point","pointData","entries","filter","bitVector","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","centerAngle","totalPoints","clusterFactor","overlapRadius","x","y","Point_ID","id","push","event","pointIds","html","toFixed","pageY","pageX","positions","zoom","transform","call","prev","toggleAllRingsVisibility","newVisibility","children","onClick","values","every","v","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n//   console.log(labelsData);\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {};\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // Generate unique colors for each label\n//     // Define color scale globally to avoid unnecessary re-renders\n\n//     // Step 1: Extract unique labels dynamically\n//     const labelKeys = Object.keys(labelsData);\n//     console.log(labelsData);\n//     // Step 2: Create a color scale dynamically based on the number of labels\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelKeys);\n\n// const getLabelColor = (pointId) => {\n//   if (!labelsData || !labelsData.labels) return \"gray\"; // Ensure labelsData is properly structured\n\n//   for (const label of Object.keys(labelsData.labels)) {\n//     const pointList = labelsData.labels[label];\n\n//     if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//       return colorScale(label); // Ensure label is passed correctly\n//     }\n//   }\n\n//   return \"gray\"; // Default color if no match found\n// };\n\n\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n//     };\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n\n//       // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n//       const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(subspace.key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//             totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n//         const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n//         const legendData = [\n//           { color: \"yellow\", label: \"Positive Bit\" },\n//           { color: \"pink\", label: \"Negative Bit\" },\n//         ];\n//         legendData.forEach((item, index) => {\n//           legend\n//             .append(\"rect\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", index * 20)\n//             .attr(\"width\", 15)\n//             .attr(\"height\", 15)\n//             .attr(\"fill\", item.color);\n\n//           legend\n//             .append(\"text\")\n//             .attr(\"x\", 20)\n//             .attr(\"y\", index * 20 + 12)\n//             .text(item.label)\n//             .attr(\"font-size\", \"12px\")\n//             .attr(\"alignment-baseline\", \"middle\");\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n  const [ringVisibility, setRingVisibility] = useState({});\n\n  // Initialize ring visibility state (all rings visible by default)\n  useEffect(() => {\n    if (jsonData && Object.keys(jsonData).length > 0) {\n      const subspaces = Object.keys(jsonData);\n      subspaces.sort((a, b) => a.length - b.length);\n\n      const initialVisibility = subspaces.reduce((acc, key) => {\n        acc[key] = true; // All rings visible by default\n        return acc;\n      }, {});\n      setRingVisibility(initialVisibility);\n    }\n  }, [jsonData]);\n\n  // Render the graph\n  useEffect(() => {\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove(); // Clear SVG before rendering\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3\n      .scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 7837 : 0, 1, 0.5);\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const pointPositions = {};\n\n    subspaces.forEach((key, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n      // Add plus/minus button for each ring\n      const buttonAngle = 0; // Position the button at 0 degrees (right side)\n      const buttonRadius = 3; // Position outside the ring\n      const buttonX = buttonRadius * Math.cos(buttonAngle);\n      const buttonY = buttonRadius * Math.sin(buttonAngle);\n\n      g.append(\"text\")\n        .attr(\"x\", buttonX)\n        .attr(\"y\", buttonY)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"16px\")\n        .attr(\"cursor\", \"pointer\")\n        .text(ringVisibility[key] ? \"-\" : \"+\")\n        .style(\"fill\", \"blue\") // Make the button more visible\n        .on(\"click\", () => toggleRingVisibility(key));\n\n      if (!ringVisibility[key]) return; // Skip if ring is collapsed\n\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      // Draw sectors\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"path\")\n          .attr(\n            \"d\",\n            d3\n              .arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n              .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n          )\n          .attr(\"fill\", getSectorColor(index, i))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5);\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"font-weight\", \"bold\")\n          .text(key);\n      }\n\n      // Draw radial lines\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", x2)\n          .attr(\"y1\", y2)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.25)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      // Draw points\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n            totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n                  2\n                )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n              );\n            setHoveredCoordinates(point);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    // Draw connections between points\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.3)\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n  const toggleRingVisibility = (key) => {\n    setRingVisibility((prev) => ({\n      ...prev,\n      [key]: !prev[key],\n    }));\n  };\n\n  const toggleAllRingsVisibility = () => {\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const newVisibility = subspaces.reduce((acc, key, index) => {\n      // Do not collapse the last two rings\n      acc[key] = index >= subspaces.length - 2 ? true : !ringVisibility[key];\n      return acc;\n    }, {});\n    setRingVisibility(newVisibility);\n  };\n\n  return (\n    <div>\n      <button onClick={toggleAllRingsVisibility}>\n        {Object.values(ringVisibility).every((v) => v)\n          ? \"Collapse All\"\n          : \"Expand All\"}\n      </button>\n      <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}