{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.1)\n//           .style(\"cursor\", \"pointer\");\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//         // .text(key);\n//           .text(ringLabels[index]); // Use generated lab\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  const [applyToAllRings, setApplyToAllRings] = useState(false);\n  useEffect(() => {\n    // check data json file\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    // check label json file\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const edgePopup = d3.select(\"body\").append(\"div\").attr(\"class\", \"edge-popup\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(255, 255, 255, 0.9)\").style(\"color\", \"black\").style(\"padding\", \"10px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\").style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\").style(\"max-width\", \"300px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    let highlightedElements = null;\n\n    // const clearHighlights = () => {\n    //   if (highlightedElements) {\n    //     highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n    //     highlightedElements.circles.forEach(circle =>\n    //       circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n    //     );\n    //     highlightedElements = null;\n    //   }\n    // };\n\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        // const rotationOffset = Math.PI / 2;\n\n        const pointsBySector = new Array(sectors).fill(0);\n        pointsData[index].points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          pointsBySector[sectorIndex]++;\n        });\n        const totalPoints = pointsData[index].points.length;\n        const minSectorAngle = totalPoints > 0 ? Math.PI * 0.91 / sectors : 2 * Math.PI / sectors;\n        let sectorAngles = [];\n        if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n          const totalAngle = 2 * Math.PI;\n          const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n          const remainingAngle = totalAngle - totalOccupiedSectors * minSectorAngle;\n          sectorAngles = pointsBySector.map(count => {\n            if (count === 0) return minSectorAngle;\n            return minSectorAngle + remainingAngle * count / totalPoints;\n          });\n        } else {\n          sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n        }\n\n        // let currentAngle = rotationOffset;\n        let currentAngle = 0;\n        const sectorStartAngles = [currentAngle];\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = startAngle + sectorAngles[i];\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n          if (i === 0) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n        }\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n          const totalPointsInSector = pointsBySector[bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0 ? innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector) / totalPointsInSector : randomRadius;\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach(id => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({\n              x,\n              y,\n              point,\n              subspaceId: key\n            });\n          });\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      });\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            }).on(\"mousemove\", event => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            }).on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            }).on(\"click\", event => {\n              var _Object$entries$find;\n              // clearHighlights();\n\n              const originalColor = getLabelColor(pointId);\n              line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n              const circles = g.selectAll(\"circle\").filter(d => {\n                const circleX = parseFloat(this.getAttribute(\"cx\"));\n                const circleY = parseFloat(this.getAttribute(\"cy\"));\n                return Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1 || Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1;\n              }).attr(\"r\", 6).attr(\"fill\", \"yellow\");\n              highlightedElements = {\n                line,\n                circles,\n                originalColor\n              };\n              const point1 = positions[i].point;\n              const point2 = positions[i + 1].point;\n              const coords1 = Object.entries(point1).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n              const coords2 = Object.entries(point2).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n              const label1 = ((_Object$entries$find = Object.entries((labelsData === null || labelsData === void 0 ? void 0 : labelsData.labels) || {}).find(([_, ids]) => ids.includes(Number(pointId)))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]) || \"No Label\";\n              edgePopup.style(\"visibility\", \"visible\").html(`\n                    <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                    <strong>Point 1</strong><br>\n                    Subspace: ${positions[i].subspaceId}<br>\n                    Coordinates: ${coords1}<br>\n                    Label: ${label1}<br><br>\n                    <strong>Point 2</strong><br>\n                    Subspace: ${positions[i + 1].subspaceId}<br>\n                    Coordinates: ${coords2}<br>\n                    Label: ${label1}\n                  `).style(\"top\", event.pageY + 15 + \"px\").style(\"left\", event.pageX + 15 + \"px\");\n              d3.select(\"body\").on(\"click.edgePopup\", e => {\n                if (!edgePopup.node().contains(e.target)) {\n                  edgePopup.style(\"visibility\", \"hidden\");\n                  // clearHighlights();\n                  d3.select(\"body\").on(\"click.edgePopup\", null);\n                }\n              });\n            });\n          }\n        }\n      });\n      const zoom = d3.zoom().on(\"zoom\", event => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n    drawGraph();\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsProportionalView(!isProportionalView),\n        style: {\n          padding: \"5px 10px\",\n          marginRight: \"10px\",\n          backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n          color: isProportionalView ? \"white\" : \"black\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        children: isProportionalView ? \"Normal View\" : \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }, this), isProportionalView && /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: applyToAllRings,\n          onChange: e => setApplyToAllRings(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this), \"Apply to all rings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 705,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"+9iTWDC2o4a4XKe++z4fFE0OpKI=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","isProportionalView","setIsProportionalView","applyToAllRings","setApplyToAllRings","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","tooltip","append","attr","style","edgePopup","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","highlightedElements","drawGraph","g","forEach","innerRadius","outerRadius","sectors","pointsBySector","fill","point","pointData","entries","filter","k","bitVector","coord","join","parseInt","totalPoints","minSectorAngle","PI","sectorAngles","totalAngle","totalOccupiedSectors","count","remainingAngle","currentAngle","sectorStartAngles","startAngle","endAngle","push","arc","text","x1","cos","y1","sin","x2","y2","bitVectorIndex","minRadius","randomRadius","random","centerAngle","totalPointsInSector","clusterFactor","overlapRadius","x","y","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","_Object$entries$find","originalColor","circles","d","circleX","parseFloat","getAttribute","circleY","abs","point1","point2","coords1","value","coords2","label1","find","ids","e","node","contains","target","zoom","transform","call","children","marginBottom","onClick","padding","marginRight","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","type","checked","onChange","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.1)\n//           .style(\"cursor\", \"pointer\");\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//         // .text(key);\n//           .text(ringLabels[index]); // Use generated lab\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n    \n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n  useEffect(() => {\n    // check data json file\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n// check label json file\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const edgePopup = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"edge-popup\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n      .style(\"color\", \"black\")\n      .style(\"padding\", \"10px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\")\n      .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n      .style(\"max-width\", \"300px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3\n      .scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    const pointPositions = {};\n    let highlightedElements = null;\n\n    // const clearHighlights = () => {\n    //   if (highlightedElements) {\n    //     highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n    //     highlightedElements.circles.forEach(circle =>\n    //       circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n    //     );\n    //     highlightedElements = null;\n    //   }\n    // };\n\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        // const rotationOffset = Math.PI / 2;\n\n        const pointsBySector = new Array(sectors).fill(0);\n        pointsData[index].points.forEach((point) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          pointsBySector[sectorIndex]++;\n        });\n\n        const totalPoints = pointsData[index].points.length;\n        const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n        let sectorAngles = [];\n        if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n          const totalAngle = 2 * Math.PI;\n          const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n          const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n          \n          sectorAngles = pointsBySector.map(count => {\n            if (count === 0) return minSectorAngle;\n            return minSectorAngle + (remainingAngle * count / totalPoints);\n          });\n        } else {\n          sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n        }\n\n        // let currentAngle = rotationOffset;\n        let currentAngle = 0;\n        const sectorStartAngles = [currentAngle];\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = startAngle + sectorAngles[i];\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.1)\n            .style(\"cursor\", \"pointer\");\n\n          if (i === 0) {\n            g.append(\"text\")\n              .attr(\"x\", 0)\n              .attr(\"y\", -outerRadius - 5)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"font-size\", \"16px\")\n              .attr(\"fill\", \"red\")\n              .attr(\"font-weight\", \"bold\")\n              .text(ringLabels[index]);\n          }\n\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\")\n            .attr(\"x1\", x2)\n            .attr(\"y1\", y2)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.25)\n            .style(\"pointer-events\", \"none\");\n        }\n\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n\n          const totalPointsInSector = pointsBySector[bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0\n            ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n            : randomRadius;\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach((id) => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({ x, y, point, subspaceId: key });\n          });\n\n          g.append(\"circle\")\n            .attr(\"cx\", x)\n            .attr(\"cy\", y)\n            .attr(\"r\", 3)\n            .attr(\"fill\", \"black\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"pointer-events\", \"visible\")\n            .on(\"mouseover\", (event) => {\n              const pointIds = point.Point_ID.join(\", \");\n              let associatedLabels = [];\n              if (labelsData && labelsData.labels) {\n                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                  if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                    associatedLabels.push(label);\n                  }\n                });\n              }\n              const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(\n                  `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n                );\n              setHoveredCoordinates({ ...point, label: labelText });\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n              setHoveredCoordinates(null);\n            });\n        });\n      });\n\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            const line = g.append(\"line\")\n              .attr(\"x1\", positions[i].x)\n              .attr(\"y1\", positions[i].y)\n              .attr(\"x2\", positions[i + 1].x)\n              .attr(\"y2\", positions[i + 1].y)\n              .attr(\"stroke\", getLabelColor(pointId))\n              .attr(\"stroke-width\", 0.3)\n              .style(\"cursor\", \"pointer\")\n              .on(\"mouseover\", (event) => {\n                tooltip\n                  .style(\"visibility\", \"visible\")\n                  .html(`Connection: Point_ID ${pointId}`);\n              })\n              .on(\"mousemove\", (event) => {\n                tooltip\n                  .style(\"top\", event.pageY + 10 + \"px\")\n                  .style(\"left\", event.pageX + 10 + \"px\");\n              })\n              .on(\"mouseout\", () => {\n                tooltip.style(\"visibility\", \"hidden\");\n              })\n              .on(\"click\", (event) => {\n                // clearHighlights();\n\n                const originalColor = getLabelColor(pointId);\n                line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n                const circles = g.selectAll(\"circle\")\n                  .filter(d => {\n                    const circleX = parseFloat(this.getAttribute(\"cx\"));\n                    const circleY = parseFloat(this.getAttribute(\"cy\"));\n                    return (\n                      (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n                      (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n                    );\n                  })\n                  .attr(\"r\", 6)\n                  .attr(\"fill\", \"yellow\");\n\n                highlightedElements = { line, circles, originalColor };\n\n                const point1 = positions[i].point;\n                const point2 = positions[i + 1].point;\n\n                const coords1 = Object.entries(point1)\n                  .filter(([key]) => key !== \"Point_ID\")\n                  .map(([key, value]) => `${key}: ${value}`)\n                  .join(\", \");\n                const coords2 = Object.entries(point2)\n                  .filter(([key]) => key !== \"Point_ID\")\n                  .map(([key, value]) => `${key}: ${value}`)\n                  .join(\", \");\n\n                const label1 = Object.entries(labelsData?.labels || {})\n                  .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n                edgePopup\n                  .style(\"visibility\", \"visible\")\n                  .html(`\n                    <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                    <strong>Point 1</strong><br>\n                    Subspace: ${positions[i].subspaceId}<br>\n                    Coordinates: ${coords1}<br>\n                    Label: ${label1}<br><br>\n                    <strong>Point 2</strong><br>\n                    Subspace: ${positions[i + 1].subspaceId}<br>\n                    Coordinates: ${coords2}<br>\n                    Label: ${label1}\n                  `)\n                  .style(\"top\", event.pageY + 15 + \"px\")\n                  .style(\"left\", event.pageX + 15 + \"px\");\n\n                d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n                  if (!edgePopup.node().contains(e.target)) {\n                    edgePopup.style(\"visibility\", \"hidden\");\n                    // clearHighlights();\n                    d3.select(\"body\").on(\"click.edgePopup\", null);\n                  }\n                });\n              });\n          }\n        }\n      });\n\n      const zoom = d3.zoom().on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n\n    drawGraph();\n\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button \n          onClick={() => setIsProportionalView(!isProportionalView)}\n          style={{\n            padding: \"5px 10px\",\n            marginRight: \"10px\",\n            backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n            color: isProportionalView ? \"white\" : \"black\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          }}\n        >\n          {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n        </button>\n        \n        {isProportionalView && (\n          <label style={{ marginLeft: \"10px\" }}>\n            <input\n              type=\"checkbox\"\n              checked={applyToAllRings}\n              onChange={(e) => setApplyToAllRings(e.target.checked)}\n            />\n            Apply to all rings\n          </label>\n        )}\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}