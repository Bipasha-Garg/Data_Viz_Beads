{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // HERE ___________________________________---------------------__________________________\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Correct syntax\n\n//     // Start with the largest square and reduce size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize =\n//         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.75)\n//         .attr(\"stroke-width\", 1);\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = (squareSize / 2) * Math.cos(angle);\n//         const y1 = (squareSize / 2) * Math.sin(angle);\n\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 1);\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n//         const sectorAngleMid = (sectorAngleStart + sectorAngleEnd) / 2; // Angle in the middle of sector\n\n//         // Place points randomly inside the sector\n//         const randomRadius = Math.random() * sectorRadius;\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3) // Reduce radius\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .append(\"title\")\n//           .text(`ID: ${point.Point_ID}, Binary: ${bitPattern}`);\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length // Length of the key determines the dimensions\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize - index * maxSquareSize / subspaces.length;\n      const sectors = 2 ** subspace.dimensions; // Number of sectors\n      const sectorAngle = 2 * Math.PI / sectors;\n\n      // Draw square for the subspace\n      g.append(\"rect\").attr(\"x\", -squareSize / 2).attr(\"y\", -squareSize / 2).attr(\"width\", squareSize).attr(\"height\", squareSize).attr(\"stroke\", \"black\").attr(\"fill\", \"none\").attr(\"stroke-width\", 2);\n\n      // Draw sector lines only for squares with more than 1 sector\n      if (sectors > 1) {\n        for (let i = 0; i < sectors; i++) {\n          const angle = sectorAngle * i;\n          const x1 = squareSize / 2 * Math.cos(angle);\n          const y1 = squareSize / 2 * Math.sin(angle);\n          g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"gray\").attr(\"stroke-width\", 1);\n        }\n      }\n\n      // Scale for positioning points\n      const scale = d3.scaleLinear().domain([-1, 1]).range([-squareSize / 2, squareSize / 2]);\n\n      // Plot points correctly within their respective subspace and sector\n      subspace.points.forEach(point => {\n        const bitPattern = point.Point_ID.toString(2).padStart(subspace.dimensions, \"0\");\n        const sectorIndex = parseInt(bitPattern, 2);\n        const angle = sectorIndex * sectorAngle;\n\n        // Adjust placement within the correct subspace and sector\n        const radius = squareSize / 4 * Math.random();\n        const scaledX = radius * Math.cos(angle);\n        const scaledY = radius * Math.sin(angle);\n        g.append(\"circle\").attr(\"cx\", scaledX).attr(\"cy\", scaledY).attr(\"r\", 4).attr(\"fill\", \"steelblue\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 1).append(\"title\").text(`ID: ${point.Point_ID}`);\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"600px\",\n      height: \"600px\",\n      border: \"1px solid black\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","pointsData","map","key","points","dimensions","svg","select","current","width","height","margin","selectAll","remove","maxSquareSize","Math","min","g","attr","append","forEach","subspace","index","squareSize","sectors","sectorAngle","PI","i","angle","x1","cos","y1","sin","scale","scaleLinear","domain","range","point","bitPattern","Point_ID","toString","padStart","sectorIndex","parseInt","radius","random","scaledX","scaledY","text","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // HERE ___________________________________---------------------__________________________\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Correct syntax\n\n//     // Start with the largest square and reduce size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize =\n//         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.75)\n//         .attr(\"stroke-width\", 1);\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = (squareSize / 2) * Math.cos(angle);\n//         const y1 = (squareSize / 2) * Math.sin(angle);\n\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 1);\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n//         const sectorAngleMid = (sectorAngleStart + sectorAngleEnd) / 2; // Angle in the middle of sector\n\n//         // Place points randomly inside the sector\n//         const randomRadius = Math.random() * sectorRadius;\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3) // Reduce radius\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .append(\"title\")\n//           .text(`ID: ${point.Point_ID}, Binary: ${bitPattern}`);\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length, // Length of the key determines the dimensions\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    pointsData.forEach((subspace, index) => {\n      const squareSize =\n        maxSquareSize - (index * maxSquareSize) / subspaces.length;\n      const sectors = 2 ** subspace.dimensions; // Number of sectors\n      const sectorAngle = (2 * Math.PI) / sectors;\n\n      // Draw square for the subspace\n      g.append(\"rect\")\n        .attr(\"x\", -squareSize / 2)\n        .attr(\"y\", -squareSize / 2)\n        .attr(\"width\", squareSize)\n        .attr(\"height\", squareSize)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", 2);\n\n      // Draw sector lines only for squares with more than 1 sector\n      if (sectors > 1) {\n        for (let i = 0; i < sectors; i++) {\n          const angle = sectorAngle * i;\n          const x1 = (squareSize / 2) * Math.cos(angle);\n          const y1 = (squareSize / 2) * Math.sin(angle);\n\n          g.append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"y1\", 0)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"gray\")\n            .attr(\"stroke-width\", 1);\n        }\n      }\n\n      // Scale for positioning points\n      const scale = d3\n        .scaleLinear()\n        .domain([-1, 1])\n        .range([-squareSize / 2, squareSize / 2]);\n\n      // Plot points correctly within their respective subspace and sector\n      subspace.points.forEach((point) => {\n        const bitPattern = point.Point_ID.toString(2).padStart(\n          subspace.dimensions,\n          \"0\"\n        );\n        const sectorIndex = parseInt(bitPattern, 2);\n        const angle = sectorIndex * sectorAngle;\n\n        // Adjust placement within the correct subspace and sector\n        const radius = (squareSize / 4) * Math.random();\n        const scaledX = radius * Math.cos(angle);\n        const scaledY = radius * Math.sin(angle);\n\n        g.append(\"circle\")\n          .attr(\"cx\", scaledX)\n          .attr(\"cy\", scaledY)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"steelblue\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 1)\n          .append(\"title\")\n          .text(`ID: ${point.Point_ID}`);\n      });\n    });\n  }, [jsonData]);\n\n  return (\n    <svg\n      ref={graphRef}\n      style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n    ></svg>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}