{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || jsonData.length === 0) return;\n\n    // Dynamically extract coordinate keys (dimensions)\n    const coordinateKeys = Object.keys(jsonData[0]).filter(key => key !== \"Cluster\" && key !== \"Bead\");\n\n    // Helper to calculate centroid\n    const calculateCentroid = points => {\n      const n = points.length;\n      const sum = points.reduce((acc, point) => {\n        coordinateKeys.forEach(key => {\n          acc[key] = (acc[key] || 0) + point[key];\n        });\n        return acc;\n      }, {});\n      // Compute average for each dimension\n      Object.keys(sum).forEach(key => sum[key] /= n);\n      return sum;\n    };\n    // Assign bit vectors based on coordinate keys (planes)\n    const assignBitVector = point => {\n      return coordinateKeys.map(key => point[key] >= 0 ? \"1\" : \"0\").join(\"\");\n    };\n    // Parse and process data\n    const clusters = d3.group(jsonData, d => d.Cluster);\n    const beads = d3.group(jsonData, d => `${d.Cluster}-${d.Bead}`);\n\n    // Root centroid\n    const rootCentroid = calculateCentroid(jsonData);\n\n    // Cluster centroids\n    const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n      cluster,\n      centroid: calculateCentroid(points)\n    }));\n\n    // Bead centroids\n    const beadCentroids = Array.from(beads, ([key, points]) => {\n      const [cluster, bead] = key.split(\"-\");\n      return {\n        cluster,\n        bead,\n        centroid: calculateCentroid(points),\n        points\n      };\n    });\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const svg = d3.select(graphRef.current).attr(\"width\", width).attr(\"height\", height).attr(\"viewBox\", `0 0 ${width} ${height}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Calculate the number of quadrants based on the number of dimensions\n    const numDimensions = coordinateKeys.length;\n    const numQuadrants = 2 ** numDimensions;\n    // Function to calculate x and y position based on the bit vector\n    const calculateNodePositions = node => {\n      if (node.bitVector) {\n        const quadrantIndex = parseInt(node.bitVector, 2);\n        const numRows = Math.ceil(Math.sqrt(numQuadrants));\n        const numCols = Math.ceil(numQuadrants / numRows);\n        const quadrantWidth = (width - margin.left - margin.right) / numCols;\n        const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n        const row = Math.floor(quadrantIndex / numCols);\n        const col = quadrantIndex % numCols;\n        const x = col * quadrantWidth + quadrantWidth / 2 + margin.left;\n        const y = row * quadrantHeight + quadrantHeight / 2 + margin.top;\n        return {\n          x,\n          y\n        };\n      }\n      return null;\n    };\n\n    // Build hierarchical links\n    const links = [];\n    const nodes = [];\n\n    // Add root node\n    const rootNode = {\n      id: \"root\",\n      ...rootCentroid,\n      bitVector: assignBitVector(rootCentroid)\n    };\n    const rootPos = calculateNodePositions(rootNode);\n    if (rootPos) {\n      rootNode.x = rootPos.x;\n      rootNode.y = rootPos.y;\n    }\n    nodes.push(rootNode);\n\n    // Add cluster nodes and hierarchical links\n    clusterCentroids.forEach(({\n      cluster,\n      centroid\n    }) => {\n      const clusterNode = {\n        id: `cluster-${cluster}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid)\n      };\n      const clusterPos = calculateNodePositions(clusterNode);\n      if (clusterPos) {\n        clusterNode.x = clusterPos.x;\n        clusterNode.y = clusterPos.y;\n      }\n      nodes.push(clusterNode);\n      links.push({\n        source: \"root\",\n        target: `cluster-${cluster}`\n      });\n    });\n\n    // Add bead nodes, hierarchical links and individual data points\n    beadCentroids.forEach(({\n      cluster,\n      bead,\n      centroid,\n      points\n    }) => {\n      const beadNode = {\n        id: `bead-${cluster}-${bead}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid)\n      };\n      const beadPos = calculateNodePositions(beadNode);\n      if (beadPos) {\n        beadNode.x = beadPos.x;\n        beadNode.y = beadPos.y;\n      }\n      nodes.push(beadNode);\n      links.push({\n        source: `cluster-${cluster}`,\n        target: `bead-${cluster}-${bead}`\n      });\n\n      // Add individual data points and intra-quadrant links\n      points.forEach((point, index) => {\n        const pointId = `point-${cluster}-${bead}-${index}`;\n        const pointNode = {\n          id: pointId,\n          ...point,\n          bitVector: assignBitVector(point)\n        };\n        const pointPos = calculateNodePositions(pointNode);\n        if (pointPos) {\n          pointNode.x = pointPos.x;\n          pointNode.y = pointPos.y;\n        }\n        nodes.push(pointNode);\n        links.push({\n          source: `bead-${cluster}-${bead}`,\n          target: pointId\n        });\n        for (let j = 0; j < index; j++) {\n          const otherPointId = `point-${cluster}-${bead}-${j}`;\n          links.push({\n            source: pointId,\n            target: otherPointId\n          });\n        }\n      });\n    });\n\n    // Draw grid lines and text\n    const numRows = Math.ceil(Math.sqrt(numQuadrants));\n    const numCols = Math.ceil(numQuadrants / numRows);\n    const quadrantWidth = (width - margin.left - margin.right) / numCols;\n    const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n    const grid = svg.append(\"g\").attr(\"class\", \"grid\");\n\n    // Draw vertical lines\n    for (let i = 0; i <= numCols; i++) {\n      grid.append(\"line\").attr(\"x1\", margin.left + i * quadrantWidth).attr(\"y1\", margin.top).attr(\"x2\", margin.left + i * quadrantWidth).attr(\"y2\", height - margin.bottom).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1);\n    }\n\n    // Draw horizontal lines\n    for (let i = 0; i <= numRows; i++) {\n      grid.append(\"line\").attr(\"x1\", margin.left).attr(\"y1\", margin.top + i * quadrantHeight).attr(\"x2\", width - margin.right).attr(\"y2\", margin.top + i * quadrantHeight).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1);\n    }\n    // Add bit vector text\n    for (let i = 0; i < numQuadrants; i++) {\n      const row = Math.floor(i / numCols);\n      const col = i % numCols;\n      const x = col * quadrantWidth + quadrantWidth / 2 + margin.left;\n      const y = row * quadrantHeight + quadrantHeight / 2 + margin.top;\n      const bitVector = i.toString(2).padStart(numDimensions, \"0\");\n      grid.append(\"text\").attr(\"x\", x).attr(\"y\", y).attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").attr(\"font-size\", \"10px\").text(bitVector);\n    }\n    // Draw links\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(links).enter().append(\"line\").attr(\"x1\", d => {\n      var _nodes$find;\n      return (_nodes$find = nodes.find(node => node.id === d.source)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.x;\n    }).attr(\"y1\", d => {\n      var _nodes$find2;\n      return (_nodes$find2 = nodes.find(node => node.id === d.source)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.y;\n    }).attr(\"x2\", d => {\n      var _nodes$find3;\n      return (_nodes$find3 = nodes.find(node => node.id === d.target)) === null || _nodes$find3 === void 0 ? void 0 : _nodes$find3.x;\n    }).attr(\"y2\", d => {\n      var _nodes$find4;\n      return (_nodes$find4 = nodes.find(node => node.id === d.target)) === null || _nodes$find4 === void 0 ? void 0 : _nodes$find4.y;\n    }).attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 2);\n\n    // Draw nodes\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 5).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y).attr(\"fill\", d => {\n      if (d.id === \"root\") return \"red\";\n      if (d.id.startsWith(\"cluster\")) return \"blue\";\n      if (d.id.startsWith(\"bead\")) return \"green\";\n      return \"gray\";\n    }).on(\"mouseover\", (event, d) => {\n      const coordinates = {};\n      coordinateKeys.forEach(key => {\n        coordinates[key] = d[key];\n      });\n      setHoveredCoordinates({\n        ...coordinates,\n        id: d.id,\n        bitVector: d.bitVector\n      });\n    }).call(d3.drag().on(\"start\", event => {\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }).on(\"drag\", event => {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }).on(\"end\", event => {\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }));\n\n    // Add tooltips\n    node.append(\"title\").text(d => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","length","coordinateKeys","Object","keys","filter","key","calculateCentroid","points","n","sum","reduce","acc","point","forEach","assignBitVector","map","join","clusters","group","d","Cluster","beads","Bead","rootCentroid","clusterCentroids","Array","from","cluster","centroid","beadCentroids","bead","split","container","select","current","parentNode","width","node","getBoundingClientRect","height","margin","top","right","bottom","left","svg","attr","selectAll","remove","numDimensions","numQuadrants","calculateNodePositions","bitVector","quadrantIndex","parseInt","numRows","Math","ceil","sqrt","numCols","quadrantWidth","quadrantHeight","row","floor","col","x","y","links","nodes","rootNode","id","rootPos","push","clusterNode","clusterPos","source","target","beadNode","beadPos","index","pointId","pointNode","pointPos","j","otherPointId","grid","append","i","toString","padStart","text","link","data","enter","_nodes$find","find","_nodes$find2","_nodes$find3","_nodes$find4","startsWith","on","event","coordinates","call","drag","subject","fx","fy","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || jsonData.length === 0) return;\n\n    // Dynamically extract coordinate keys (dimensions)\n    const coordinateKeys = Object.keys(jsonData[0]).filter(\n      (key) => key !== \"Cluster\" && key !== \"Bead\"\n    );\n\n    // Helper to calculate centroid\n    const calculateCentroid = (points) => {\n      const n = points.length;\n      const sum = points.reduce((acc, point) => {\n        coordinateKeys.forEach((key) => {\n          acc[key] = (acc[key] || 0) + point[key];\n        });\n        return acc;\n      }, {});\n      // Compute average for each dimension\n      Object.keys(sum).forEach((key) => (sum[key] /= n));\n      return sum;\n    };\n    // Assign bit vectors based on coordinate keys (planes)\n    const assignBitVector = (point) => {\n      return coordinateKeys\n        .map((key) => (point[key] >= 0 ? \"1\" : \"0\"))\n        .join(\"\");\n    };\n    // Parse and process data\n    const clusters = d3.group(jsonData, (d) => d.Cluster);\n    const beads = d3.group(jsonData, (d) => `${d.Cluster}-${d.Bead}`);\n\n    // Root centroid\n    const rootCentroid = calculateCentroid(jsonData);\n\n    // Cluster centroids\n    const clusterCentroids = Array.from(clusters, ([cluster, points]) => ({\n      cluster,\n      centroid: calculateCentroid(points),\n    }));\n\n    // Bead centroids\n    const beadCentroids = Array.from(beads, ([key, points]) => {\n      const [cluster, bead] = key.split(\"-\");\n      return {\n        cluster,\n        bead,\n        centroid: calculateCentroid(points),\n        points,\n      };\n    });\n\n     // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n\n    const svg = d3\n      .select(graphRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n\n      // Calculate the number of quadrants based on the number of dimensions\n     const numDimensions = coordinateKeys.length;\n     const numQuadrants = 2 ** numDimensions;\n    // Function to calculate x and y position based on the bit vector\n     const calculateNodePositions = (node) => {\n        if (node.bitVector) {\n            const quadrantIndex = parseInt(node.bitVector, 2);\n\n            const numRows = Math.ceil(Math.sqrt(numQuadrants));\n            const numCols = Math.ceil(numQuadrants/ numRows);\n            const quadrantWidth = (width - margin.left - margin.right) / numCols;\n            const quadrantHeight = (height - margin.top - margin.bottom) / numRows;\n\n            const row = Math.floor(quadrantIndex/numCols);\n            const col = quadrantIndex % numCols;\n\n            const x = col * quadrantWidth + quadrantWidth/2 + margin.left;\n            const y = row * quadrantHeight + quadrantHeight/2 + margin.top;\n\n            return { x, y };\n        }\n         return null\n     };\n\n\n    // Build hierarchical links\n    const links = [];\n    const nodes = [];\n\n      // Add root node\n    const rootNode = { id: \"root\", ...rootCentroid, bitVector: assignBitVector(rootCentroid) };\n    const rootPos = calculateNodePositions(rootNode);\n     if(rootPos) {\n        rootNode.x = rootPos.x;\n        rootNode.y = rootPos.y;\n    }\n    nodes.push(rootNode);\n\n    // Add cluster nodes and hierarchical links\n    clusterCentroids.forEach(({ cluster, centroid }) => {\n      const clusterNode = {\n        id: `cluster-${cluster}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid),\n      };\n\n        const clusterPos = calculateNodePositions(clusterNode);\n        if(clusterPos){\n            clusterNode.x = clusterPos.x;\n            clusterNode.y = clusterPos.y;\n         }\n\n        nodes.push(clusterNode);\n      links.push({ source: \"root\", target: `cluster-${cluster}` });\n    });\n\n    // Add bead nodes, hierarchical links and individual data points\n    beadCentroids.forEach(({ cluster, bead, centroid, points }) => {\n      const beadNode = {\n        id: `bead-${cluster}-${bead}`,\n        ...centroid,\n        bitVector: assignBitVector(centroid),\n      };\n         const beadPos = calculateNodePositions(beadNode);\n        if (beadPos) {\n             beadNode.x = beadPos.x;\n             beadNode.y = beadPos.y;\n         }\n        nodes.push(beadNode);\n\n      links.push({\n        source: `cluster-${cluster}`,\n        target: `bead-${cluster}-${bead}`,\n      });\n\n      // Add individual data points and intra-quadrant links\n      points.forEach((point, index) => {\n        const pointId = `point-${cluster}-${bead}-${index}`;\n        const pointNode = {\n            id: pointId,\n            ...point,\n            bitVector: assignBitVector(point),\n         };\n       const pointPos = calculateNodePositions(pointNode);\n       if(pointPos){\n            pointNode.x = pointPos.x;\n            pointNode.y = pointPos.y;\n        }\n        nodes.push(pointNode);\n          links.push({ source: `bead-${cluster}-${bead}`, target: pointId });\n\n\n          for (let j = 0; j < index; j++) {\n              const otherPointId = `point-${cluster}-${bead}-${j}`;\n              links.push({ source: pointId, target: otherPointId });\n          }\n      });\n    });\n\n\n    // Draw grid lines and text\n    const numRows = Math.ceil(Math.sqrt(numQuadrants));\n    const numCols = Math.ceil(numQuadrants/ numRows);\n    const quadrantWidth = (width - margin.left - margin.right)/ numCols;\n    const quadrantHeight = (height- margin.top - margin.bottom)/ numRows\n\n      const grid = svg.append(\"g\").attr(\"class\", \"grid\");\n\n\n    // Draw vertical lines\n      for (let i = 0; i <= numCols; i++) {\n        grid\n          .append(\"line\")\n          .attr(\"x1\", margin.left + i * quadrantWidth)\n          .attr(\"y1\", margin.top)\n          .attr(\"x2\", margin.left+ i * quadrantWidth)\n          .attr(\"y2\", height - margin.bottom)\n          .attr(\"stroke\", \"#ddd\")\n          .attr(\"stroke-width\", 1);\n      }\n\n        // Draw horizontal lines\n      for (let i = 0; i <= numRows; i++) {\n        grid\n          .append(\"line\")\n          .attr(\"x1\", margin.left)\n          .attr(\"y1\", margin.top + i * quadrantHeight)\n          .attr(\"x2\", width - margin.right)\n          .attr(\"y2\", margin.top + i * quadrantHeight)\n          .attr(\"stroke\", \"#ddd\")\n          .attr(\"stroke-width\", 1);\n      }\n      // Add bit vector text\n     for (let i = 0; i < numQuadrants; i++) {\n      const row = Math.floor(i/numCols);\n      const col = i % numCols;\n\n          const x = col * quadrantWidth + quadrantWidth/2 + margin.left;\n          const y = row * quadrantHeight + quadrantHeight/2 + margin.top;\n\n      const bitVector = i.toString(2).padStart(numDimensions, \"0\");\n\n        grid.append(\"text\")\n          .attr(\"x\", x)\n          .attr(\"y\", y)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"dominant-baseline\", \"middle\")\n            .attr(\"font-size\", \"10px\")\n            .text(bitVector);\n      }\n     // Draw links\n     const link = svg\n       .append(\"g\")\n       .attr(\"class\", \"links\")\n       .selectAll(\"line\")\n       .data(links)\n       .enter()\n       .append(\"line\")\n       .attr(\"x1\", (d) => nodes.find(node => node.id === d.source)?.x)\n       .attr(\"y1\", (d) => nodes.find(node => node.id === d.source)?.y)\n       .attr(\"x2\", (d) => nodes.find(node => node.id === d.target)?.x)\n       .attr(\"y2\", (d) => nodes.find(node => node.id === d.target)?.y)\n       .attr(\"stroke\", \"#aaa\")\n       .attr(\"stroke-width\", 2);\n\n\n\n      // Draw nodes\n      const node = svg\n        .append(\"g\")\n        .attr(\"class\", \"nodes\")\n        .selectAll(\"circle\")\n        .data(nodes)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", 5)\n          .attr(\"cx\", (d) => d.x)\n          .attr(\"cy\", (d) => d.y)\n       .attr(\"fill\", (d) => {\n         if (d.id === \"root\") return \"red\";\n         if (d.id.startsWith(\"cluster\")) return \"blue\";\n         if (d.id.startsWith(\"bead\")) return \"green\";\n         return \"gray\";\n       })\n       .on(\"mouseover\", (event, d) => {\n         const coordinates = {};\n         coordinateKeys.forEach((key) => {\n           coordinates[key] = d[key];\n         });\n\n         setHoveredCoordinates({\n           ...coordinates,\n           id: d.id,\n           bitVector: d.bitVector,\n         });\n       })\n       .call(\n        d3\n           .drag()\n           .on(\"start\", (event) => {\n             event.subject.fx = event.subject.x;\n             event.subject.fy = event.subject.y;\n           })\n           .on(\"drag\", (event) => {\n             event.subject.fx = event.x;\n             event.subject.fy = event.y;\n           })\n           .on(\"end\", (event) => {\n               event.subject.fx = null;\n              event.subject.fy = null;\n           })\n         );\n\n\n    // Add tooltips\n    node.append(\"title\").text((d) => `ID: ${d.id}\\nBit Vector: ${d.bitVector}`);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n};\n\nexport default HierarchicalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}