{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n//   const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n//   useEffect(() => {\n//     // check data json file\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n// // check label json file\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // const edgePopup = d3\n//     //   .select(\"body\")\n//     //   .append(\"div\")\n//     //   .attr(\"class\", \"edge-popup\")\n//     //   .style(\"position\", \"absolute\")\n//     //   .style(\"visibility\", \"hidden\")\n//     //   .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//     //   .style(\"color\", \"black\")\n//     //   .style(\"padding\", \"10px\")\n//     //   .style(\"border-radius\", \"4px\")\n//     //   .style(\"font-size\", \"12px\")\n//     //   .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//     //   .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     // subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         // const rotationOffset = Math.PI / 2;\n\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         const totalPoints = pointsData[index].points.length;\n//         const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n//         let sectorAngles = [];\n//         if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n//           const totalAngle = 2 * Math.PI;\n//           const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n//           const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n\n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return minSectorAngle;\n//             return minSectorAngle + (remainingAngle * count / totalPoints);\n//           });\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // let currentAngle = rotationOffset;\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySector[bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 // clearHighlights();\n\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 const circles = g.selectAll(\"circle\")\n//                   .filter(d => {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n\n//                 highlightedElements = { line, circles, originalColor };\n\n//                 const point1 = positions[i].point;\n//                 const point2 = positions[i + 1].point;\n\n//                 const coords1 = Object.entries(point1)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n//                 const coords2 = Object.entries(point2)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n\n//                 const label1 = Object.entries(labelsData?.labels || {})\n//                   .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//                 // edgePopup\n//                 //   .style(\"visibility\", \"visible\")\n//                 //   .html(`\n//                 //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                 //     <strong>Point 1</strong><br>\n//                 //     Subspace: ${positions[i].subspaceId}<br>\n//                 //     Coordinates: ${coords1}<br>\n//                 //     Label: ${label1}<br><br>\n//                 //     <strong>Point 2</strong><br>\n//                 //     Subspace: ${positions[i + 1].subspaceId}<br>\n//                 //     Coordinates: ${coords2}<br>\n//                 //     Label: ${label1}\n//                 //   `)\n//                 //   .style(\"top\", event.pageY + 15 + \"px\")\n//                 //   .style(\"left\", event.pageX + 15 + \"px\");\n\n//                 // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 //   if (!edgePopup.node().contains(e.target)) {\n//                 //     edgePopup.style(\"visibility\", \"hidden\");\n//                 //     // clearHighlights();\n//                 //     d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 //   }\n//                 // });\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       // edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button \n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n\n//         {isProportionalView && (\n//           <label style={{ marginLeft: \"10px\" }}>\n//             <input\n//               type=\"checkbox\"\n//               checked={applyToAllRings}\n//               onChange={(e) => setApplyToAllRings(e.target.checked)}\n//             />\n//             Apply to all rings\n//           </label>\n//         )}\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n// ____________________________________________________________________________________________________________________________________________\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = bitVector => {\n      // Color based on last bit: 1 = blue, 0 = pink\n      return bitVector.slice(-1) === \"1\" ? \"blue\" : \"pink\";\n    };\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Removed rotate(-90) to start at 3 o'clock\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = Math.pow(2, key.length); // 2^d where d is dimension of subspace\n        const sectorAngle = 2 * Math.PI / sectors; // Equal angles for normal view\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = i * sectorAngle; // Starting at 3 o'clock (0 radians)\n          const endAngle = (i + 1) * sectorAngle;\n          const bitVector = i.toString(2).padStart(key.length, \"0\");\n\n          // Draw sector\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(bitVector)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n\n          // Add ring label at first sector\n          if (i === 0) {\n            const labelAngle = sectorAngle / 2;\n            const labelRadius = (innerRadius + outerRadius) / 2;\n            const x = labelRadius * Math.cos(labelAngle);\n            const y = labelRadius * Math.sin(labelAngle);\n            g.append(\"text\").attr(\"x\", x).attr(\"y\", y).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n        }\n\n        // Place points\n        pointsData[index].points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          const startAngle = sectorIndex * sectorAngle;\n          const endAngle = (sectorIndex + 1) * sectorAngle;\n          const centerAngle = (startAngle + endAngle) / 2;\n          const randomRadius = innerRadius + Math.random() * (outerRadius - innerRadius);\n          const x = randomRadius * Math.cos(centerAngle);\n          const y = randomRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach(id => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({\n              x,\n              y,\n              point,\n              subspaceId: key\n            });\n          });\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      });\n\n      // Draw connections between points\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            }).on(\"mousemove\", event => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            }).on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n          }\n        }\n      });\n      const zoom = d3.zoom().on(\"zoom\", event => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n    drawGraph();\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsProportionalView(!isProportionalView),\n        style: {\n          padding: \"5px 10px\",\n          marginRight: \"10px\",\n          backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n          color: isProportionalView ? \"white\" : \"black\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        children: isProportionalView ? \"Normal View\" : \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 970,\n    columnNumber: 9\n  }, this);\n};\n_s(HierarchicalGraph, \"9s6zjkFI7sGGsI16SRKRmv9lgWY=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","isProportionalView","setIsProportionalView","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","tooltip","append","attr","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","bitVector","slice","subspaces","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","drawGraph","g","forEach","index","innerRadius","outerRadius","sectors","pow","sectorAngle","PI","startAngle","endAngle","toString","padStart","arc","labelAngle","labelRadius","x","cos","y","sin","text","point","pointData","entries","filter","k","coord","join","sectorIndex","parseInt","centerAngle","randomRadius","random","Point_ID","id","push","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","zoom","transform","call","children","marginBottom","onClick","padding","marginRight","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n    \n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n//   const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n//   useEffect(() => {\n//     // check data json file\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n// // check label json file\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // const edgePopup = d3\n//     //   .select(\"body\")\n//     //   .append(\"div\")\n//     //   .attr(\"class\", \"edge-popup\")\n//     //   .style(\"position\", \"absolute\")\n//     //   .style(\"visibility\", \"hidden\")\n//     //   .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//     //   .style(\"color\", \"black\")\n//     //   .style(\"padding\", \"10px\")\n//     //   .style(\"border-radius\", \"4px\")\n//     //   .style(\"font-size\", \"12px\")\n//     //   .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//     //   .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     // subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         // const rotationOffset = Math.PI / 2;\n\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         const totalPoints = pointsData[index].points.length;\n//         const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n//         let sectorAngles = [];\n//         if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n//           const totalAngle = 2 * Math.PI;\n//           const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n//           const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n          \n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return minSectorAngle;\n//             return minSectorAngle + (remainingAngle * count / totalPoints);\n//           });\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // let currentAngle = rotationOffset;\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySector[bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 // clearHighlights();\n\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 const circles = g.selectAll(\"circle\")\n//                   .filter(d => {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n\n//                 highlightedElements = { line, circles, originalColor };\n\n//                 const point1 = positions[i].point;\n//                 const point2 = positions[i + 1].point;\n\n//                 const coords1 = Object.entries(point1)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n//                 const coords2 = Object.entries(point2)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n\n//                 const label1 = Object.entries(labelsData?.labels || {})\n//                   .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//                 // edgePopup\n//                 //   .style(\"visibility\", \"visible\")\n//                 //   .html(`\n//                 //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                 //     <strong>Point 1</strong><br>\n//                 //     Subspace: ${positions[i].subspaceId}<br>\n//                 //     Coordinates: ${coords1}<br>\n//                 //     Label: ${label1}<br><br>\n//                 //     <strong>Point 2</strong><br>\n//                 //     Subspace: ${positions[i + 1].subspaceId}<br>\n//                 //     Coordinates: ${coords2}<br>\n//                 //     Label: ${label1}\n//                 //   `)\n//                 //   .style(\"top\", event.pageY + 15 + \"px\")\n//                 //   .style(\"left\", event.pageX + 15 + \"px\");\n\n//                 // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 //   if (!edgePopup.node().contains(e.target)) {\n//                 //     edgePopup.style(\"visibility\", \"hidden\");\n//                 //     // clearHighlights();\n//                 //     d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 //   }\n//                 // });\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       // edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button \n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n        \n//         {isProportionalView && (\n//           <label style={{ marginLeft: \"10px\" }}>\n//             <input\n//               type=\"checkbox\"\n//               checked={applyToAllRings}\n//               onChange={(e) => setApplyToAllRings(e.target.checked)}\n//             />\n//             Apply to all rings\n//           </label>\n//         )}\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\n\n\n\n\n// ____________________________________________________________________________________________________________________________________________\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n    const graphRef = useRef(null);\n    const [isProportionalView, setIsProportionalView] = useState(false);\n\n    useEffect(() => {\n        if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n            console.error(\"Invalid or empty jsonData:\", jsonData);\n            return;\n        }\n        if (!labelsData || typeof labelsData !== \"object\") {\n            console.error(\"Invalid labelsData:\", labelsData);\n            return;\n        }\n\n        const svg = d3.select(graphRef.current);\n        svg.selectAll(\"*\").remove();\n\n        const width = 800;\n        const height = 800;\n        const margin = 20;\n        const maxRadius = Math.min(width, height) / 2 - margin;\n\n        const tooltip = d3\n            .select(\"body\")\n            .append(\"div\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n            .style(\"color\", \"white\")\n            .style(\"padding\", \"5px\")\n            .style(\"border-radius\", \"4px\")\n            .style(\"font-size\", \"12px\");\n\n        const getLabelColor = (pointId) => {\n            if (!labelsData || !labelsData.labels) return \"gray\";\n            for (const label of Object.keys(labelsData.labels)) {\n                const pointList = labelsData.labels[label];\n                if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n                    return colorScale(label);\n                }\n            }\n            return \"gray\";\n        };\n\n        const colorScale = d3\n            .scaleOrdinal(d3.schemeCategory10)\n            .domain(Object.keys(labelsData.labels || {}));\n\n        const getSectorColor = (bitVector) => {\n            // Color based on last bit: 1 = blue, 0 = pink\n            return bitVector.slice(-1) === \"1\" ? \"blue\" : \"pink\";\n        };\n\n        const subspaces = Object.keys(jsonData);\n        const pointsData = subspaces.map((key) => ({\n            key,\n            points: jsonData[key],\n            dimensions: key.length,\n            subspaceId: key,\n        }));\n        const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n        const pointPositions = {};\n\n        const drawGraph = () => {\n            svg.selectAll(\"*\").remove();\n            const g = svg\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .append(\"g\")\n                .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Removed rotate(-90) to start at 3 o'clock\n\n            subspaces.forEach((key, index) => {\n                if (!ringVisibility[key]) return;\n\n                const innerRadius = (index / subspaces.length) * maxRadius;\n                const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n                const sectors = Math.pow(2, key.length); // 2^d where d is dimension of subspace\n                const sectorAngle = (2 * Math.PI) / sectors; // Equal angles for normal view\n\n                for (let i = 0; i < sectors; i++) {\n                    const startAngle = i * sectorAngle; // Starting at 3 o'clock (0 radians)\n                    const endAngle = (i + 1) * sectorAngle;\n                    const bitVector = i.toString(2).padStart(key.length, \"0\");\n\n                    // Draw sector\n                    g.append(\"path\")\n                        .attr(\"d\", d3.arc()\n                            .innerRadius(innerRadius)\n                            .outerRadius(outerRadius)\n                            .startAngle(startAngle)\n                            .endAngle(endAngle)\n                        )\n                        .attr(\"fill\", getSectorColor(bitVector))\n                        .attr(\"fill-opacity\", 0.3)\n                        .attr(\"stroke\", \"black\")\n                        .attr(\"stroke-width\", 0.1)\n                        .style(\"cursor\", \"pointer\");\n\n                    // Add ring label at first sector\n                    if (i === 0) {\n                        const labelAngle = sectorAngle / 2;\n                        const labelRadius = (innerRadius + outerRadius) / 2;\n                        const x = labelRadius * Math.cos(labelAngle);\n                        const y = labelRadius * Math.sin(labelAngle);\n                        g.append(\"text\")\n                            .attr(\"x\", x)\n                            .attr(\"y\", y)\n                            .attr(\"text-anchor\", \"middle\")\n                            .attr(\"font-size\", \"16px\")\n                            .attr(\"fill\", \"red\")\n                            .attr(\"font-weight\", \"bold\")\n                            .text(ringLabels[index]);\n                    }\n                }\n\n                // Place points\n                pointsData[index].points.forEach((point) => {\n                    const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n                    const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n                    const sectorIndex = parseInt(bitVector, 2);\n\n                    const startAngle = sectorIndex * sectorAngle;\n                    const endAngle = (sectorIndex + 1) * sectorAngle;\n                    const centerAngle = (startAngle + endAngle) / 2;\n                    const randomRadius = innerRadius + Math.random() * (outerRadius - innerRadius);\n\n                    const x = randomRadius * Math.cos(centerAngle);\n                    const y = randomRadius * Math.sin(centerAngle);\n\n                    point.Point_ID.forEach((id) => {\n                        if (!pointPositions[id]) {\n                            pointPositions[id] = [];\n                        }\n                        pointPositions[id].push({ x, y, point, subspaceId: key });\n                    });\n\n                    g.append(\"circle\")\n                        .attr(\"cx\", x)\n                        .attr(\"cy\", y)\n                        .attr(\"r\", 3)\n                        .attr(\"fill\", \"black\")\n                        .attr(\"stroke\", \"white\")\n                        .attr(\"stroke-width\", 0.5)\n                        .style(\"pointer-events\", \"visible\")\n                        .on(\"mouseover\", (event) => {\n                            const pointIds = point.Point_ID.join(\", \");\n                            let associatedLabels = [];\n                            if (labelsData && labelsData.labels) {\n                                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                                    if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                                        associatedLabels.push(label);\n                                    }\n                                });\n                            }\n                            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n                            tooltip\n                                .style(\"visibility\", \"visible\")\n                                .html(\n                                    `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n                                );\n                            setHoveredCoordinates({ ...point, label: labelText });\n                        })\n                        .on(\"mousemove\", (event) => {\n                            tooltip\n                                .style(\"top\", event.pageY + 10 + \"px\")\n                                .style(\"left\", event.pageX + 10 + \"px\");\n                        })\n                        .on(\"mouseout\", () => {\n                            tooltip.style(\"visibility\", \"hidden\");\n                            setHoveredCoordinates(null);\n                        });\n                });\n            });\n\n            // Draw connections between points\n            Object.entries(pointPositions).forEach(([pointId, positions]) => {\n                if (positions.length > 1) {\n                    for (let i = 0; i < positions.length - 1; i++) {\n                        g.append(\"line\")\n                            .attr(\"x1\", positions[i].x)\n                            .attr(\"y1\", positions[i].y)\n                            .attr(\"x2\", positions[i + 1].x)\n                            .attr(\"y2\", positions[i + 1].y)\n                            .attr(\"stroke\", getLabelColor(pointId))\n                            .attr(\"stroke-width\", 0.3)\n                            .style(\"cursor\", \"pointer\")\n                            .on(\"mouseover\", (event) => {\n                                tooltip\n                                    .style(\"visibility\", \"visible\")\n                                    .html(`Connection: Point_ID ${pointId}`);\n                            })\n                            .on(\"mousemove\", (event) => {\n                                tooltip\n                                    .style(\"top\", event.pageY + 10 + \"px\")\n                                    .style(\"left\", event.pageX + 10 + \"px\");\n                            })\n                            .on(\"mouseout\", () => {\n                                tooltip.style(\"visibility\", \"hidden\");\n                            });\n                    }\n                }\n            });\n\n            const zoom = d3.zoom().on(\"zoom\", (event) => {\n                g.attr(\"transform\", event.transform);\n            });\n            svg.call(zoom);\n        };\n\n        drawGraph();\n\n        return () => {\n            tooltip.remove();\n        };\n    }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n    return (\n        <div style={{ width: \"100%\", height: \"100%\" }}>\n            <div style={{ marginBottom: \"10px\" }}>\n                <button\n                    onClick={() => setIsProportionalView(!isProportionalView)}\n                    style={{\n                        padding: \"5px 10px\",\n                        marginRight: \"10px\",\n                        backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n                        color: isProportionalView ? \"white\" : \"black\",\n                        border: \"1px solid #ccc\",\n                        borderRadius: \"4px\",\n                        cursor: \"pointer\"\n                    }}\n                >\n                    {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n                </button>\n            </div>\n            <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n        </div>\n    );\n};\n\nexport default HierarchicalGraph;\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;;AAYA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC3F,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACY,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEnEF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACO,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIQ,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM,KAAK,CAAC,EAAE;MACjFC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEZ,QAAQ,CAAC;MACrD;IACJ;IACA,IAAI,CAACC,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAC/CU,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEX,UAAU,CAAC;MAChD;IACJ;IAEA,MAAMY,GAAG,GAAGjB,EAAE,CAACkB,MAAM,CAACT,QAAQ,CAACU,OAAO,CAAC;IACvCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAE3B,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,KAAK,EAAEC,MAAM,CAAC,GAAG,CAAC,GAAGC,MAAM;IAEtD,MAAMI,OAAO,GAAG5B,EAAE,CACbkB,MAAM,CAAC,MAAM,CAAC,CACdW,MAAM,CAAC,KAAK,CAAC,CACbC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBC,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAC7BA,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC7BA,KAAK,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAC/CA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CACvBA,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CACvBA,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAC7BA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC;IAE/B,MAAMC,aAAa,GAAIC,OAAO,IAAK;MAC/B,IAAI,CAAC5B,UAAU,IAAI,CAACA,UAAU,CAAC6B,MAAM,EAAE,OAAO,MAAM;MACpD,KAAK,MAAMC,KAAK,IAAIvB,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC6B,MAAM,CAAC,EAAE;QAChD,MAAME,SAAS,GAAG/B,UAAU,CAAC6B,MAAM,CAACC,KAAK,CAAC;QAC1C,IAAIE,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACG,QAAQ,CAACC,MAAM,CAACP,OAAO,CAAC,CAAC,EAAE;UACjE,OAAOQ,UAAU,CAACN,KAAK,CAAC;QAC5B;MACJ;MACA,OAAO,MAAM;IACjB,CAAC;IAED,MAAMM,UAAU,GAAGzC,EAAE,CAChB0C,YAAY,CAAC1C,EAAE,CAAC2C,gBAAgB,CAAC,CACjCC,MAAM,CAAChC,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC6B,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;IAEjD,MAAMW,cAAc,GAAIC,SAAS,IAAK;MAClC;MACA,OAAOA,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,MAAM,GAAG,MAAM;IACxD,CAAC;IAED,MAAMC,SAAS,GAAGpC,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC;IACvC,MAAM6C,UAAU,GAAGD,SAAS,CAACE,GAAG,CAAEC,GAAG,KAAM;MACvCA,GAAG;MACHC,MAAM,EAAEhD,QAAQ,CAAC+C,GAAG,CAAC;MACrBE,UAAU,EAAEF,GAAG,CAACrC,MAAM;MACtBwC,UAAU,EAAEH;IAChB,CAAC,CAAC,CAAC;IACH,MAAMI,UAAU,GAAGP,SAAS,CAACE,GAAG,CAAC,CAACM,CAAC,EAAEC,CAAC,KAAKC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGF,CAAC,CAAC,CAAC;IACvE,MAAMG,cAAc,GAAG,CAAC,CAAC;IAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;MACpB5C,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;MAC3B,MAAMyC,CAAC,GAAG7C,GAAG,CACRa,IAAI,CAAC,OAAO,EAAER,KAAK,CAAC,CACpBQ,IAAI,CAAC,QAAQ,EAAEP,MAAM,CAAC,CACtBM,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC,WAAW,EAAE,aAAaR,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;MAElEyB,SAAS,CAACe,OAAO,CAAC,CAACZ,GAAG,EAAEa,KAAK,KAAK;QAC9B,IAAI,CAACzD,cAAc,CAAC4C,GAAG,CAAC,EAAE;QAE1B,MAAMc,WAAW,GAAID,KAAK,GAAGhB,SAAS,CAAClC,MAAM,GAAIW,SAAS;QAC1D,MAAMyC,WAAW,GAAI,CAACF,KAAK,GAAG,CAAC,IAAIhB,SAAS,CAAClC,MAAM,GAAIW,SAAS;QAChE,MAAM0C,OAAO,GAAGzC,IAAI,CAAC0C,GAAG,CAAC,CAAC,EAAEjB,GAAG,CAACrC,MAAM,CAAC,CAAC,CAAC;QACzC,MAAMuD,WAAW,GAAI,CAAC,GAAG3C,IAAI,CAAC4C,EAAE,GAAIH,OAAO,CAAC,CAAC;;QAE7C,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,OAAO,EAAEV,CAAC,EAAE,EAAE;UAC9B,MAAMc,UAAU,GAAGd,CAAC,GAAGY,WAAW,CAAC,CAAC;UACpC,MAAMG,QAAQ,GAAG,CAACf,CAAC,GAAG,CAAC,IAAIY,WAAW;UACtC,MAAMvB,SAAS,GAAGW,CAAC,CAACgB,QAAQ,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACvB,GAAG,CAACrC,MAAM,EAAE,GAAG,CAAC;;UAEzD;UACAgD,CAAC,CAACjC,MAAM,CAAC,MAAM,CAAC,CACXC,IAAI,CAAC,GAAG,EAAE9B,EAAE,CAAC2E,GAAG,CAAC,CAAC,CACdV,WAAW,CAACA,WAAW,CAAC,CACxBC,WAAW,CAACA,WAAW,CAAC,CACxBK,UAAU,CAACA,UAAU,CAAC,CACtBC,QAAQ,CAACA,QAAQ,CACtB,CAAC,CACA1C,IAAI,CAAC,MAAM,EAAEe,cAAc,CAACC,SAAS,CAAC,CAAC,CACvChB,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;;UAE/B;UACA,IAAI0B,CAAC,KAAK,CAAC,EAAE;YACT,MAAMmB,UAAU,GAAGP,WAAW,GAAG,CAAC;YAClC,MAAMQ,WAAW,GAAG,CAACZ,WAAW,GAAGC,WAAW,IAAI,CAAC;YACnD,MAAMY,CAAC,GAAGD,WAAW,GAAGnD,IAAI,CAACqD,GAAG,CAACH,UAAU,CAAC;YAC5C,MAAMI,CAAC,GAAGH,WAAW,GAAGnD,IAAI,CAACuD,GAAG,CAACL,UAAU,CAAC;YAC5Cd,CAAC,CAACjC,MAAM,CAAC,MAAM,CAAC,CACXC,IAAI,CAAC,GAAG,EAAEgD,CAAC,CAAC,CACZhD,IAAI,CAAC,GAAG,EAAEkD,CAAC,CAAC,CACZlD,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CACnBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3BoD,IAAI,CAAC3B,UAAU,CAACS,KAAK,CAAC,CAAC;UAChC;QACJ;;QAEA;QACAf,UAAU,CAACe,KAAK,CAAC,CAACZ,MAAM,CAACW,OAAO,CAAEoB,KAAK,IAAK;UACxC,MAAMC,SAAS,GAAGxE,MAAM,CAACyE,OAAO,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,CAAC,CAACC,CAAC,CAAC,KAAKA,CAAC,KAAK,UAAU,CAAC;UACzE,MAAMzC,SAAS,GAAGsC,SAAS,CAAClC,GAAG,CAAC,CAAC,CAACM,CAAC,EAAEgC,KAAK,CAAC,KAAMA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;UAC9E,MAAMC,WAAW,GAAGC,QAAQ,CAAC7C,SAAS,EAAE,CAAC,CAAC;UAE1C,MAAMyB,UAAU,GAAGmB,WAAW,GAAGrB,WAAW;UAC5C,MAAMG,QAAQ,GAAG,CAACkB,WAAW,GAAG,CAAC,IAAIrB,WAAW;UAChD,MAAMuB,WAAW,GAAG,CAACrB,UAAU,GAAGC,QAAQ,IAAI,CAAC;UAC/C,MAAMqB,YAAY,GAAG5B,WAAW,GAAGvC,IAAI,CAACoE,MAAM,CAAC,CAAC,IAAI5B,WAAW,GAAGD,WAAW,CAAC;UAE9E,MAAMa,CAAC,GAAGe,YAAY,GAAGnE,IAAI,CAACqD,GAAG,CAACa,WAAW,CAAC;UAC9C,MAAMZ,CAAC,GAAGa,YAAY,GAAGnE,IAAI,CAACuD,GAAG,CAACW,WAAW,CAAC;UAE9CT,KAAK,CAACY,QAAQ,CAAChC,OAAO,CAAEiC,EAAE,IAAK;YAC3B,IAAI,CAACpC,cAAc,CAACoC,EAAE,CAAC,EAAE;cACrBpC,cAAc,CAACoC,EAAE,CAAC,GAAG,EAAE;YAC3B;YACApC,cAAc,CAACoC,EAAE,CAAC,CAACC,IAAI,CAAC;cAAEnB,CAAC;cAAEE,CAAC;cAAEG,KAAK;cAAE7B,UAAU,EAAEH;YAAI,CAAC,CAAC;UAC7D,CAAC,CAAC;UAEFW,CAAC,CAACjC,MAAM,CAAC,QAAQ,CAAC,CACbC,IAAI,CAAC,IAAI,EAAEgD,CAAC,CAAC,CACbhD,IAAI,CAAC,IAAI,EAAEkD,CAAC,CAAC,CACblD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBC,KAAK,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAClCmE,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;YACxB,MAAMC,QAAQ,GAAGjB,KAAK,CAACY,QAAQ,CAACN,IAAI,CAAC,IAAI,CAAC;YAC1C,IAAIY,gBAAgB,GAAG,EAAE;YACzB,IAAIhG,UAAU,IAAIA,UAAU,CAAC6B,MAAM,EAAE;cACjCtB,MAAM,CAACyE,OAAO,CAAChF,UAAU,CAAC6B,MAAM,CAAC,CAAC6B,OAAO,CAAC,CAAC,CAAC5B,KAAK,EAAEC,SAAS,CAAC,KAAK;gBAC9D,IAAI+C,KAAK,CAACY,QAAQ,CAACO,IAAI,CAACN,EAAE,IAAI5D,SAAS,CAACG,QAAQ,CAACC,MAAM,CAACwD,EAAE,CAAC,CAAC,CAAC,EAAE;kBAC3DK,gBAAgB,CAACJ,IAAI,CAAC9D,KAAK,CAAC;gBAChC;cACJ,CAAC,CAAC;YACN;YACA,MAAMoE,SAAS,GAAGF,gBAAgB,CAACvF,MAAM,GAAG,CAAC,GAAGuF,gBAAgB,CAACZ,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU;YAExF7D,OAAO,CACFG,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9ByE,IAAI,CACD,cAAcJ,QAAQ,qBAAqBtB,CAAC,CAAC2B,OAAO,CAAC,CAAC,CAAC,KAAKzB,CAAC,CAACyB,OAAO,CAAC,CAAC,CAAC,kBAAkBtD,GAAG,cAAcoD,SAAS,EACxH,CAAC;YACLjG,qBAAqB,CAAC;cAAE,GAAG6E,KAAK;cAAEhD,KAAK,EAAEoE;YAAU,CAAC,CAAC;UACzD,CAAC,CAAC,CACDL,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;YACxBvE,OAAO,CACFG,KAAK,CAAC,KAAK,EAAEoE,KAAK,CAACO,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrC3E,KAAK,CAAC,MAAM,EAAEoE,KAAK,CAACQ,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;UAC/C,CAAC,CAAC,CACDT,EAAE,CAAC,UAAU,EAAE,MAAM;YAClBtE,OAAO,CAACG,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;YACrCzB,qBAAqB,CAAC,IAAI,CAAC;UAC/B,CAAC,CAAC;QACV,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACAM,MAAM,CAACyE,OAAO,CAACzB,cAAc,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC9B,OAAO,EAAE2E,SAAS,CAAC,KAAK;QAC7D,IAAIA,SAAS,CAAC9F,MAAM,GAAG,CAAC,EAAE;UACtB,KAAK,IAAI2C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmD,SAAS,CAAC9F,MAAM,GAAG,CAAC,EAAE2C,CAAC,EAAE,EAAE;YAC3CK,CAAC,CAACjC,MAAM,CAAC,MAAM,CAAC,CACXC,IAAI,CAAC,IAAI,EAAE8E,SAAS,CAACnD,CAAC,CAAC,CAACqB,CAAC,CAAC,CAC1BhD,IAAI,CAAC,IAAI,EAAE8E,SAAS,CAACnD,CAAC,CAAC,CAACuB,CAAC,CAAC,CAC1BlD,IAAI,CAAC,IAAI,EAAE8E,SAAS,CAACnD,CAAC,GAAG,CAAC,CAAC,CAACqB,CAAC,CAAC,CAC9BhD,IAAI,CAAC,IAAI,EAAE8E,SAAS,CAACnD,CAAC,GAAG,CAAC,CAAC,CAACuB,CAAC,CAAC,CAC9BlD,IAAI,CAAC,QAAQ,EAAEE,aAAa,CAACC,OAAO,CAAC,CAAC,CACtCH,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAC1BmE,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;cACxBvE,OAAO,CACFG,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9ByE,IAAI,CAAC,wBAAwBvE,OAAO,EAAE,CAAC;YAChD,CAAC,CAAC,CACDiE,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;cACxBvE,OAAO,CACFG,KAAK,CAAC,KAAK,EAAEoE,KAAK,CAACO,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrC3E,KAAK,CAAC,MAAM,EAAEoE,KAAK,CAACQ,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;YAC/C,CAAC,CAAC,CACDT,EAAE,CAAC,UAAU,EAAE,MAAM;cAClBtE,OAAO,CAACG,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;YACzC,CAAC,CAAC;UACV;QACJ;MACJ,CAAC,CAAC;MAEF,MAAM8E,IAAI,GAAG7G,EAAE,CAAC6G,IAAI,CAAC,CAAC,CAACX,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;QACzCrC,CAAC,CAAChC,IAAI,CAAC,WAAW,EAAEqE,KAAK,CAACW,SAAS,CAAC;MACxC,CAAC,CAAC;MACF7F,GAAG,CAAC8F,IAAI,CAACF,IAAI,CAAC;IAClB,CAAC;IAEDhD,SAAS,CAAC,CAAC;IAEX,OAAO,MAAM;MACTjC,OAAO,CAACP,MAAM,CAAC,CAAC;IACpB,CAAC;EACL,CAAC,EAAE,CAACjB,QAAQ,EAAEC,UAAU,EAAEE,cAAc,EAAED,qBAAqB,EAAEI,kBAAkB,CAAC,CAAC;EAErF,oBACIR,OAAA;IAAK6B,KAAK,EAAE;MAAET,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAyF,QAAA,gBAC1C9G,OAAA;MAAK6B,KAAK,EAAE;QAAEkF,YAAY,EAAE;MAAO,CAAE;MAAAD,QAAA,eACjC9G,OAAA;QACIgH,OAAO,EAAEA,CAAA,KAAMvG,qBAAqB,CAAC,CAACD,kBAAkB,CAAE;QAC1DqB,KAAK,EAAE;UACHoF,OAAO,EAAE,UAAU;UACnBC,WAAW,EAAE,MAAM;UACnBC,eAAe,EAAE3G,kBAAkB,GAAG,SAAS,GAAG,SAAS;UAC3D4G,KAAK,EAAE5G,kBAAkB,GAAG,OAAO,GAAG,OAAO;UAC7C6G,MAAM,EAAE,gBAAgB;UACxBC,YAAY,EAAE,KAAK;UACnBC,MAAM,EAAE;QACZ,CAAE;QAAAT,QAAA,EAEDtG,kBAAkB,GAAG,aAAa,GAAG;MAAmB;QAAAgH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACN3H,OAAA;MAAK4H,GAAG,EAAErH,QAAS;MAACsB,KAAK,EAAE;QAAET,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAmG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEd,CAAC;AAACrH,EAAA,CA/OIL,iBAAiB;AAAA4H,EAAA,GAAjB5H,iBAAiB;AAiPvB,eAAeA,iBAAiB;AAAC,IAAA4H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}