{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Tooltip container\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index+1); // Number of sectors based on subspace dimensions\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       // Draw the outer circle representing the subspace\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2)\n//         .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n//       // Draw the radial lines dividing the sectors\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1)\n//           .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n//       }\n\n//       // Place points inside the subspace with bit vectors\n//       subspace.points.forEach((point) => {\n//         // Exclude Point_ID from bit vector calculation if present\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n\n//         // Generate bit vector for all coordinates excluding Point_ID\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0)) // 1 if positive, 0 if negative\n//           .join(\"\"); // Combine into a bit vector string\n\n//         // Calculate inner and outer radius for placement\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         // Calculate the angle for the sector based on the bit vector\n//         const bitVectorIndex = parseInt(bitVector, 2); // Convert bit vector to a decimal number (sector index)\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         // Generate a random angle within the sector's angular range\n//         const randomAngle =\n//           angleStart + Math.random() * (angleEnd - angleStart);\n\n//         // Position based on the calculated angle and random radius\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Create a circle for each point and make sure they are on top\n//         const pointElement = g\n//           .append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\") // Make points interactive\n//           .on(\"mouseover\", (event) => {\n//             tooltip.style(\"visibility\", \"visible\").html(`\n//                 <strong>Bit Vector:</strong> ${bitVector}<br>\n//                 <strong>Coordinates:</strong> (${pointData\n//                   .map(([key, coord]) => `${key}: ${coord}`)\n//                   .join(\", \")})\n//               `);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//           });\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <>\n//       <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n//     </>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const pointPositions = {}; // Store positions of points by Point_ID\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2).style(\"pointer-events\", \"none\");\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"pointer-events\", \"none\");\n      }\n      subspace.points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n        if (!pointPositions[point.Point_ID]) {\n          pointPositions[point.Point_ID] = [];\n        }\n        pointPositions[point.Point_ID].push({\n          x,\n          y\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\");\n      });\n    });\n\n    // Draw lines connecting points with the same Point_ID\n    Object.values(pointPositions).forEach(positions => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", \"red\").attr(\"stroke-width\", 1.5);\n        }\n      }\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"800px\",\n      height: \"800px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","pointPositions","forEach","subspace","index","innerRadius","outerRadius","sectors","colorScale","scaleOrdinal","range","subspaceColor","style","i","angle","PI","x1","cos","y1","sin","point","pointData","entries","filter","bitVector","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","randomAngle","x","y","Point_ID","push","values","positions","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Tooltip container\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index+1); // Number of sectors based on subspace dimensions\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       // Draw the outer circle representing the subspace\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2)\n//         .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n//       // Draw the radial lines dividing the sectors\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1)\n//           .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n//       }\n\n//       // Place points inside the subspace with bit vectors\n//       subspace.points.forEach((point) => {\n//         // Exclude Point_ID from bit vector calculation if present\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n\n//         // Generate bit vector for all coordinates excluding Point_ID\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0)) // 1 if positive, 0 if negative\n//           .join(\"\"); // Combine into a bit vector string\n\n//         // Calculate inner and outer radius for placement\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         // Calculate the angle for the sector based on the bit vector\n//         const bitVectorIndex = parseInt(bitVector, 2); // Convert bit vector to a decimal number (sector index)\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         // Generate a random angle within the sector's angular range\n//         const randomAngle =\n//           angleStart + Math.random() * (angleEnd - angleStart);\n\n//         // Position based on the calculated angle and random radius\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Create a circle for each point and make sure they are on top\n//         const pointElement = g\n//           .append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\") // Make points interactive\n//           .on(\"mouseover\", (event) => {\n//             tooltip.style(\"visibility\", \"visible\").html(`\n//                 <strong>Bit Vector:</strong> ${bitVector}<br>\n//                 <strong>Coordinates:</strong> (${pointData\n//                   .map(([key, coord]) => `${key}: ${coord}`)\n//                   .join(\", \")})\n//               `);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//           });\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <>\n//       <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n//     </>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const pointPositions = {}; // Store positions of points by Point_ID\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2)\n        .style(\"pointer-events\", \"none\");\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      subspace.points.forEach((point) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n        const randomAngle =\n          angleStart + Math.random() * (angleEnd - angleStart);\n\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        if (!pointPositions[point.Point_ID]) {\n          pointPositions[point.Point_ID] = [];\n        }\n        pointPositions[point.Point_ID].push({ x, y });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\");\n      });\n    });\n\n    // Draw lines connecting points with the same Point_ID\n    Object.values(pointPositions).forEach((positions) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n        }\n      }\n    });\n  }, [jsonData]);\n\n  return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappingshD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;IAErD,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC;IACvCM,SAAS,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,MAAM,GAAGI,CAAC,CAACJ,MAAM,CAAC;IAE7C,MAAMK,UAAU,GAAGJ,SAAS,CAACK,GAAG,CAAEC,GAAG,KAAM;MACzCA,GAAG;MACHC,MAAM,EAAEb,QAAQ,CAACY,GAAG,CAAC;MACrBE,UAAU,EAAEF,GAAG,CAACP,MAAM;MACtBU,UAAU,EAAEH;IACd,CAAC,CAAC,CAAC;IAEH,MAAMI,GAAG,GAAGpB,EAAE,CAACqB,MAAM,CAACf,QAAQ,CAACgB,OAAO,CAAC;IACvC,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG,EAAE;IAEjBL,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAC3B,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACP,KAAK,EAAEC,MAAM,CAAC,GAAG,CAAC,GAAGC,MAAM;IACtD,MAAMM,CAAC,GAAGX,GAAG,CACVY,IAAI,CAAC,OAAO,EAAET,KAAK,CAAC,CACpBS,IAAI,CAAC,QAAQ,EAAER,MAAM,CAAC,CACtBS,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAaT,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;IAE9D,MAAMU,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;;IAE3BpB,UAAU,CAACqB,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MACtC,MAAMC,WAAW,GAAID,KAAK,GAAG3B,SAAS,CAACD,MAAM,GAAImB,SAAS;MAC1D,MAAMW,WAAW,GAAI,CAACF,KAAK,GAAG,CAAC,IAAI3B,SAAS,CAACD,MAAM,GAAImB,SAAS;MAChE,MAAMY,OAAO,GAAG,CAAC,KAAKH,KAAK,GAAG,CAAC,CAAC;MAChC,MAAMI,UAAU,GAAGzC,EAAE,CAClB0C,YAAY,CAAC,CAAC,CACdC,KAAK,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;MAC3C,MAAMC,aAAa,GAAGH,UAAU,CAAC,CAACJ,KAAK,GAAG,CAAC,IAAII,UAAU,CAACE,KAAK,CAAC,CAAC,CAAClC,MAAM,CAAC;MAEzEsB,CAAC,CAACE,MAAM,CAAC,QAAQ,CAAC,CACfD,IAAI,CAAC,GAAG,EAAEO,WAAW,CAAC,CACtBP,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAEY,aAAa,CAAC,CAC3BZ,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBa,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;MAElC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,EAAEM,CAAC,EAAE,EAAE;QAChC,MAAMC,KAAK,GAAI,CAAC,GAAGlB,IAAI,CAACmB,EAAE,GAAGF,CAAC,GAAIN,OAAO;QACzC,MAAMS,EAAE,GAAGV,WAAW,GAAGV,IAAI,CAACqB,GAAG,CAACH,KAAK,CAAC;QACxC,MAAMI,EAAE,GAAGZ,WAAW,GAAGV,IAAI,CAACuB,GAAG,CAACL,KAAK,CAAC;QACxChB,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAEiB,EAAE,CAAC,CACdjB,IAAI,CAAC,IAAI,EAAEmB,EAAE,CAAC,CACdnB,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBa,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;MACpC;MAEAT,QAAQ,CAACnB,MAAM,CAACkB,OAAO,CAAEkB,KAAK,IAAK;QACjC,MAAMC,SAAS,GAAG/C,MAAM,CAACgD,OAAO,CAACF,KAAK,CAAC,CAACG,MAAM,CAC5C,CAAC,CAACxC,GAAG,CAAC,KAAKA,GAAG,KAAK,UACrB,CAAC;QACD,MAAMyC,SAAS,GAAGH,SAAS,CACxBvC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAE0C,KAAK,CAAC,KAAMA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAC3CC,IAAI,CAAC,EAAE,CAAC;QAEX,MAAMC,SAAS,GAAGtB,WAAW;QAC7B,MAAMV,SAAS,GAAGW,WAAW;QAC7B,MAAMsB,YAAY,GAChBD,SAAS,GAAG/B,IAAI,CAACiC,MAAM,CAAC,CAAC,IAAIlC,SAAS,GAAGgC,SAAS,CAAC;QAErD,MAAMG,cAAc,GAAGC,QAAQ,CAACP,SAAS,EAAE,CAAC,CAAC;QAC7C,MAAMQ,UAAU,GAAI,CAAC,GAAGpC,IAAI,CAACmB,EAAE,GAAGe,cAAc,GAAIvB,OAAO;QAC3D,MAAM0B,QAAQ,GAAI,CAAC,GAAGrC,IAAI,CAACmB,EAAE,IAAIe,cAAc,GAAG,CAAC,CAAC,GAAIvB,OAAO;QAC/D,MAAM2B,WAAW,GACfF,UAAU,GAAGpC,IAAI,CAACiC,MAAM,CAAC,CAAC,IAAII,QAAQ,GAAGD,UAAU,CAAC;QAEtD,MAAMG,CAAC,GAAGP,YAAY,GAAGhC,IAAI,CAACqB,GAAG,CAACiB,WAAW,CAAC;QAC9C,MAAME,CAAC,GAAGR,YAAY,GAAGhC,IAAI,CAACuB,GAAG,CAACe,WAAW,CAAC;QAE9C,IAAI,CAACjC,cAAc,CAACmB,KAAK,CAACiB,QAAQ,CAAC,EAAE;UACnCpC,cAAc,CAACmB,KAAK,CAACiB,QAAQ,CAAC,GAAG,EAAE;QACrC;QACApC,cAAc,CAACmB,KAAK,CAACiB,QAAQ,CAAC,CAACC,IAAI,CAAC;UAAEH,CAAC;UAAEC;QAAE,CAAC,CAAC;QAE7CtC,CAAC,CAACE,MAAM,CAAC,QAAQ,CAAC,CACfD,IAAI,CAAC,IAAI,EAAEoC,CAAC,CAAC,CACbpC,IAAI,CAAC,IAAI,EAAEqC,CAAC,CAAC,CACbrC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBa,KAAK,CAAC,gBAAgB,EAAE,SAAS,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAtC,MAAM,CAACiE,MAAM,CAACtC,cAAc,CAAC,CAACC,OAAO,CAAEsC,SAAS,IAAK;MACnD,IAAIA,SAAS,CAAChE,MAAM,GAAG,CAAC,EAAE;QACxB,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2B,SAAS,CAAChE,MAAM,GAAG,CAAC,EAAEqC,CAAC,EAAE,EAAE;UAC7Cf,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,IAAI,EAAEyC,SAAS,CAAC3B,CAAC,CAAC,CAACsB,CAAC,CAAC,CAC1BpC,IAAI,CAAC,IAAI,EAAEyC,SAAS,CAAC3B,CAAC,CAAC,CAACuB,CAAC,CAAC,CAC1BrC,IAAI,CAAC,IAAI,EAAEyC,SAAS,CAAC3B,CAAC,GAAG,CAAC,CAAC,CAACsB,CAAC,CAAC,CAC9BpC,IAAI,CAAC,IAAI,EAAEyC,SAAS,CAAC3B,CAAC,GAAG,CAAC,CAAC,CAACuB,CAAC,CAAC,CAC9BrC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CACrBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC;QAC9B;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC5B,QAAQ,CAAC,CAAC;EAEd,oBAAOF,OAAA;IAAKwE,GAAG,EAAEpE,QAAS;IAACuC,KAAK,EAAE;MAAEtB,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAmD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC/E,CAAC;AAACzE,EAAA,CArHIF,iBAAiB;AAAA4E,EAAA,GAAjB5E,iBAAiB;AAuHvB,eAAeA,iBAAiB;AAAC,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}