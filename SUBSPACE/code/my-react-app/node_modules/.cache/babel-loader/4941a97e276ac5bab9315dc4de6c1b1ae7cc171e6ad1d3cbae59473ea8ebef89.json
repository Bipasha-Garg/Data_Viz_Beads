{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    let highlightedElements = null;\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.forEach(circle => circle.attr(\"r\", 3).attr(\"fill\", \"black\"));\n        highlightedElements = null;\n      }\n    };\n    const ringStartAngles = [];\n\n    // Precompute angles for proportional view (outermost to innermost)\n    if (viewMode === \"proportional\") {\n      for (let index = subspaces.length - 1; index >= 0; index--) {\n        const key = subspaces[index];\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        let sectorAngles = [];\n        if (index === subspaces.length - 1) {\n          // Outermost ring: proportional to points\n          const totalPoints = pointsData[index].points.length;\n          const pointCounts = Array(sectors).fill(0);\n          pointsData[index].points.forEach(point => {\n            const bitVector = Object.entries(point).filter(([k]) => k !== \"Point_ID\").map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n            const bitVectorIndex = parseInt(bitVector, 2);\n            pointCounts[bitVectorIndex]++;\n          });\n          const usedSectorAngle = totalPoints > 0 ? 2 * Math.PI / totalPoints * 0.9 : 0;\n          const emptySectors = pointCounts.filter(count => count === 0).length;\n          const totalUsedAngle = usedSectorAngle * (sectors - emptySectors);\n          const remainingAngle = 2 * Math.PI - totalUsedAngle;\n          const emptySectorAngle = emptySectors > 0 ? remainingAngle / emptySectors : 0;\n          let currentAngle = rotationOffset;\n          sectorAngles = pointCounts.map(count => {\n            const startAngle = currentAngle;\n            const angle = count > 0 ? usedSectorAngle : emptySectorAngle;\n            currentAngle += angle;\n            return {\n              startAngle,\n              endAngle: startAngle + angle\n            };\n          });\n        } else {\n          // Inner rings: sum of next ring's two sectors\n          const nextRingAngles = ringStartAngles[index + 1];\n          sectorAngles = [];\n          for (let i = 0; i < sectors; i++) {\n            const nextAngle1 = nextRingAngles[i * 2];\n            const nextAngle2 = nextRingAngles[i * 2 + 1];\n            const startAngle = nextAngle1.startAngle;\n            const endAngle = nextAngle2.endAngle;\n            sectorAngles.push({\n              startAngle,\n              endAngle\n            });\n          }\n        }\n        ringStartAngles[index] = sectorAngles;\n      }\n    }\n\n    // Normal view rendering (exactly as original)\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      let sectorAngles = [];\n      if (viewMode === \"normal\") {\n        // Normal view: unchanged from original\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n          if (i === 0) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n          const angle = 2 * Math.PI * i / sectors + rotationOffset;\n          const x1 = outerRadius * Math.cos(angle);\n          const y1 = outerRadius * Math.sin(angle);\n          const x2 = innerRadius * Math.cos(angle);\n          const y2 = innerRadius * Math.sin(angle);\n          g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n          sectorAngles.push({\n            startAngle,\n            endAngle\n          });\n        }\n      } else {\n        // Proportional view: use precomputed angles\n        sectorAngles = ringStartAngles[index];\n        sectorAngles.forEach((angle, i) => {\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(angle.startAngle).endAngle(angle.endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n          if (i === 0) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n          const x1 = outerRadius * Math.cos(angle.startAngle);\n          const y1 = outerRadius * Math.sin(angle.startAngle);\n          const x2 = innerRadius * Math.cos(angle.startAngle);\n          const y2 = innerRadius * Math.sin(angle.startAngle);\n          g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n        });\n      }\n\n      // Place points (unchanged from original)\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const {\n          startAngle,\n          endAngle\n        } = sectorAngles[bitVectorIndex];\n        const centerAngle = (startAngle + endAngle) / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) pointPositions[id] = [];\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n\n    // Connections (unchanged from original)\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          }).on(\"click\", event => {\n            clearHighlights();\n            const originalColor = getLabelColor(pointId);\n            line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n            const circles = g.selectAll(\"circle\").filter(function () {\n              const circleX = parseFloat(this.getAttribute(\"cx\"));\n              const circleY = parseFloat(this.getAttribute(\"cy\"));\n              return Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1 || Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1;\n            }).attr(\"r\", 6).attr(\"fill\", \"yellow\");\n            highlightedElements = {\n              line,\n              circles,\n              originalColor\n            };\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => g.attr(\"transform\", event.transform));\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setViewMode(viewMode === \"normal\" ? \"proportional\" : \"normal\"),\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [\"Switch to \", viewMode === \"normal\" ? \"Proportional\" : \"Normal\", \" View\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","highlightedElements","clearHighlights","line","originalColor","circles","forEach","circle","ringStartAngles","sectors","rotationOffset","PI","sectorAngles","totalPoints","pointCounts","fill","point","bitVector","entries","filter","k","coord","join","bitVectorIndex","parseInt","usedSectorAngle","emptySectors","count","totalUsedAngle","remainingAngle","emptySectorAngle","currentAngle","startAngle","angle","endAngle","nextRingAngles","nextAngle1","nextAngle2","push","innerRadius","outerRadius","arc","text","x1","cos","y1","sin","x2","y2","pointData","minRadius","randomRadius","random","centerAngle","clusterFactor","overlapRadius","x","y","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","circleX","parseFloat","getAttribute","circleY","abs","zoom","transform","call","children","onClick","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    const pointPositions = {};\n    let highlightedElements = null;\n\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.forEach(circle => circle.attr(\"r\", 3).attr(\"fill\", \"black\"));\n        highlightedElements = null;\n      }\n    };\n\n    const ringStartAngles = [];\n\n    // Precompute angles for proportional view (outermost to innermost)\n    if (viewMode === \"proportional\") {\n      for (let index = subspaces.length - 1; index >= 0; index--) {\n        const key = subspaces[index];\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        let sectorAngles = [];\n\n        if (index === subspaces.length - 1) {\n          // Outermost ring: proportional to points\n          const totalPoints = pointsData[index].points.length;\n          const pointCounts = Array(sectors).fill(0);\n          pointsData[index].points.forEach(point => {\n            const bitVector = Object.entries(point)\n              .filter(([k]) => k !== \"Point_ID\")\n              .map(([_, coord]) => (coord >= 0 ? 1 : 0))\n              .join(\"\");\n            const bitVectorIndex = parseInt(bitVector, 2);\n            pointCounts[bitVectorIndex]++;\n          });\n\n          const usedSectorAngle = totalPoints > 0 ? (2 * Math.PI / totalPoints) * 0.9 : 0;\n          const emptySectors = pointCounts.filter(count => count === 0).length;\n          const totalUsedAngle = usedSectorAngle * (sectors - emptySectors);\n          const remainingAngle = 2 * Math.PI - totalUsedAngle;\n          const emptySectorAngle = emptySectors > 0 ? remainingAngle / emptySectors : 0;\n\n          let currentAngle = rotationOffset;\n          sectorAngles = pointCounts.map(count => {\n            const startAngle = currentAngle;\n            const angle = count > 0 ? usedSectorAngle : emptySectorAngle;\n            currentAngle += angle;\n            return { startAngle, endAngle: startAngle + angle };\n          });\n        } else {\n          // Inner rings: sum of next ring's two sectors\n          const nextRingAngles = ringStartAngles[index + 1];\n          sectorAngles = [];\n          for (let i = 0; i < sectors; i++) {\n            const nextAngle1 = nextRingAngles[i * 2];\n            const nextAngle2 = nextRingAngles[i * 2 + 1];\n            const startAngle = nextAngle1.startAngle;\n            const endAngle = nextAngle2.endAngle;\n            sectorAngles.push({ startAngle, endAngle });\n          }\n        }\n\n        ringStartAngles[index] = sectorAngles;\n      }\n    }\n\n    // Normal view rendering (exactly as original)\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      let sectorAngles = [];\n\n      if (viewMode === \"normal\") {\n        // Normal view: unchanged from original\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.1)\n            .style(\"cursor\", \"pointer\");\n\n          if (i === 0) {\n            g.append(\"text\")\n              .attr(\"x\", 0)\n              .attr(\"y\", -outerRadius - 5)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"font-size\", \"16px\")\n              .attr(\"fill\", \"red\")\n              .attr(\"font-weight\", \"bold\")\n              .text(ringLabels[index]);\n          }\n\n          const angle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const x1 = outerRadius * Math.cos(angle);\n          const y1 = outerRadius * Math.sin(angle);\n          const x2 = innerRadius * Math.cos(angle);\n          const y2 = innerRadius * Math.sin(angle);\n          g.append(\"line\")\n            .attr(\"x1\", x2)\n            .attr(\"y1\", y2)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.25)\n            .style(\"pointer-events\", \"none\");\n\n          sectorAngles.push({ startAngle, endAngle });\n        }\n      } else {\n        // Proportional view: use precomputed angles\n        sectorAngles = ringStartAngles[index];\n        sectorAngles.forEach((angle, i) => {\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(angle.startAngle)\n              .endAngle(angle.endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.1)\n            .style(\"cursor\", \"pointer\");\n\n          if (i === 0) {\n            g.append(\"text\")\n              .attr(\"x\", 0)\n              .attr(\"y\", -outerRadius - 5)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"font-size\", \"16px\")\n              .attr(\"fill\", \"red\")\n              .attr(\"font-weight\", \"bold\")\n              .text(ringLabels[index]);\n          }\n\n          const x1 = outerRadius * Math.cos(angle.startAngle);\n          const y1 = outerRadius * Math.sin(angle.startAngle);\n          const x2 = innerRadius * Math.cos(angle.startAngle);\n          const y2 = innerRadius * Math.sin(angle.startAngle);\n          g.append(\"line\")\n            .attr(\"x1\", x2)\n            .attr(\"y1\", y2)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.25)\n            .style(\"pointer-events\", \"none\");\n        });\n      }\n\n      // Place points (unchanged from original)\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n        const { startAngle, endAngle } = sectorAngles[bitVectorIndex];\n        const centerAngle = (startAngle + endAngle) / 2;\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) pointPositions[id] = [];\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    // Connections (unchanged from original)\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.3)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            })\n            .on(\"click\", (event) => {\n              clearHighlights();\n              const originalColor = getLabelColor(pointId);\n              line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n              const circles = g.selectAll(\"circle\")\n                .filter(function () {\n                  const circleX = parseFloat(this.getAttribute(\"cx\"));\n                  const circleY = parseFloat(this.getAttribute(\"cy\"));\n                  return (\n                    (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n                    (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n                  );\n                })\n                .attr(\"r\", 6)\n                .attr(\"fill\", \"yellow\");\n\n              highlightedElements = { line, circles, originalColor };\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => g.attr(\"transform\", event.transform));\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <button\n        onClick={() => setViewMode(viewMode === \"normal\" ? \"proportional\" : \"normal\")}\n        style={{ marginBottom: \"10px\" }}\n      >\n        Switch to {viewMode === \"normal\" ? \"Proportional\" : \"Normal\"} View\n      </button>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}