{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // Calculate point counts per sector for all rings\n    const calculateSectorPointCounts = () => {\n      // Initialize sector counts for each ring\n      const sectorCounts = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        return Array(sectors).fill(0);\n      });\n\n      // Count points in each sector for each ring\n      subspaces.forEach((key, index) => {\n        const points = pointsData[index].points;\n        const sectors = 2 ** (index + 1);\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n      return sectorCounts;\n    };\n\n    // Calculate sector angles recursively (from outer to inner rings)\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const rotationOffset = Math.PI / 2;\n\n      // Start from the outermost ring (most granular)\n      const lastRingIndex = subspaces.length - 1;\n\n      // Process each ring, starting from the outermost\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const sectors = 2 ** (ringIndex + 1);\n        const totalPoints = pointsData[ringIndex].points.length || 1; // Avoid division by zero\n        const minAngle = 0.05 * (Math.PI * 2) / sectors; // Minimum angle for empty sectors\n\n        // For outermost ring, calculate angles directly based on point distribution\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const remainingAngle = 2 * Math.PI - minAngle * emptySectors;\n          const angles = sectorCounts[ringIndex].map(count => {\n            return count === 0 ? minAngle : count / totalPoints * remainingAngle;\n          });\n          sectorAngles[ringIndex] = angles;\n        }\n        // For inner rings, sum the angles of corresponding sectors in the outer ring\n        else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** (ringIndex + 1);\n          const outerSectors = 2 ** (ringIndex + 2);\n          const ratio = outerSectors / innerSectors; // Should be 2\n\n          const angles = [];\n          for (let i = 0; i < innerSectors; i++) {\n            // Sum the angles of corresponding sectors in the outer ring\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx];\n            }\n            angles.push(sumAngle);\n          }\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n      return sectorAngles;\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      const rotationOffset = Math.PI / 2;\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n\n        // Draw sectors with their proportional angles\n        let currentAngle = rotationOffset;\n        sectorAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n      });\n    };\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = 0;\n      const anglePerSector = 2 * Math.PI / sectors;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        const startAngle = anglePerSector * bitVectorIndex + rotationOffset;\n        const centerAngle = startAngle + anglePerSector / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const rotationOffset = 0;\n      const pointsBySector = {};\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectors = 2 ** (index + 1);\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n      let currentAngle = rotationOffset;\n      const startAngles = sectorAngles.map((angle, i) => {\n        const startAngle = currentAngle;\n        currentAngle += angle;\n        return startAngle;\n      });\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const startAngle = startAngles[sectorIdx];\n        const sectorAngle = sectorAngles[sectorIdx];\n        const centerAngle = startAngle + sectorAngle / 2;\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector)) / Math.max(1, totalPointsInSector);\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n    const storePointPosition = (point, x, y, index) => {\n      point.Point_ID.forEach(id => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({\n          x,\n          y,\n          point,\n          subspaceId: pointsData[index].key\n        });\n      });\n    };\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n        const pointIds = point.Point_ID.join(\", \");\n        let associatedLabels = [];\n        if (labelsData && labelsData.labels) {\n          Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n            if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n              associatedLabels.push(label);\n            }\n          });\n        }\n        const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n        tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n        setHoveredCoordinates({\n          ...point,\n          label: labelText\n        });\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.style(\"visibility\", \"hidden\");\n        setHoveredCoordinates(null);\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateSectorPointCounts","sectorCounts","sectors","fill","forEach","point","pointData","entries","filter","bitVector","coord","join","bitVectorIndex","parseInt","calculateRecursiveSectorAngles","sectorAngles","rotationOffset","PI","lastRingIndex","ringIndex","totalPoints","minAngle","emptySectors","count","remainingAngle","angles","outerAngles","innerSectors","outerSectors","ratio","sumAngle","j","outerIdx","push","renderNormalView","innerRadius","outerRadius","startAngle","endAngle","arc","text","renderPointsNormal","renderProportionalView","currentAngle","angle","renderPointsProportional","anglePerSector","centerAngle","clusterFactor","overlapRadius","x","cos","y","sin","storePointPosition","drawPoint","pointsBySector","startAngles","sectorIdx","sectorAngle","totalPointsInSector","max","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // Calculate point counts per sector for all rings\n    const calculateSectorPointCounts = () => {\n      // Initialize sector counts for each ring\n      const sectorCounts = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        return Array(sectors).fill(0);\n      });\n\n      // Count points in each sector for each ring\n      subspaces.forEach((key, index) => {\n        const points = pointsData[index].points;\n        const sectors = 2 ** (index + 1);\n\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n\n      return sectorCounts;\n    };\n\n    // Calculate sector angles recursively (from outer to inner rings)\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const rotationOffset = Math.PI / 2;\n\n      // Start from the outermost ring (most granular)\n      const lastRingIndex = subspaces.length - 1;\n\n      // Process each ring, starting from the outermost\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const sectors = 2 ** (ringIndex + 1);\n        const totalPoints = pointsData[ringIndex].points.length || 1; // Avoid division by zero\n        const minAngle = 0.05 * (Math.PI * 2) / sectors; // Minimum angle for empty sectors\n\n        // For outermost ring, calculate angles directly based on point distribution\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n          const angles = sectorCounts[ringIndex].map(count => {\n            return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n          });\n\n          sectorAngles[ringIndex] = angles;\n        }\n        // For inner rings, sum the angles of corresponding sectors in the outer ring\n        else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** (ringIndex + 1);\n          const outerSectors = 2 ** (ringIndex + 2);\n          const ratio = outerSectors / innerSectors; // Should be 2\n\n          const angles = [];\n          for (let i = 0; i < innerSectors; i++) {\n            // Sum the angles of corresponding sectors in the outer ring\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx];\n            }\n            angles.push(sumAngle);\n          }\n\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n\n      return sectorAngles;\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      const rotationOffset = Math.PI / 2;\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n        // Draw sectors with their proportional angles\n        let currentAngle = rotationOffset;\n        sectorAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n      });\n    };\n\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = 0;\n      const anglePerSector = 2 * Math.PI / sectors;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n        const centerAngle = startAngle + (anglePerSector / 2);\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const rotationOffset = 0;\n      const pointsBySector = {};\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectors = 2 ** (index + 1);\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n\n      let currentAngle = rotationOffset;\n      const startAngles = sectorAngles.map((angle, i) => {\n        const startAngle = currentAngle;\n        currentAngle += angle;\n        return startAngle;\n      });\n\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const startAngle = startAngles[sectorIdx];\n        const sectorAngle = sectorAngles[sectorIdx];\n        const centerAngle = startAngle + (sectorAngle / 2);\n\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius =\n            innerRadius +\n            (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n            Math.max(1, totalPointsInSector);\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n\n    const storePointPosition = (point, x, y, index) => {\n      point.Point_ID.forEach((id) => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n      });\n    };\n\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"black\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 0.5)\n        .style(\"pointer-events\", \"visible\")\n        .on(\"mouseover\", (event) => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n          tooltip\n            .style(\"visibility\", \"visible\")\n            .html(\n              `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n            );\n          setHoveredCoordinates({ ...point, label: labelText });\n        })\n        .on(\"mousemove\", (event) => {\n          tooltip\n            .style(\"top\", event.pageY + 10 + \"px\")\n            .style(\"left\", event.pageX + 10 + \"px\");\n        })\n        .on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}