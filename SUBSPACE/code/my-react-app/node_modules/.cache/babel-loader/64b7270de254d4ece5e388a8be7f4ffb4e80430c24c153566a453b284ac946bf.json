{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/strip.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HorizontalStrip = ({\n//     jsonData,\n//     labelsData,\n//     setHoveredCoordinates,\n//     stripHeight = 100,\n//     stripMargin = { top: 20, right: 30, bottom: 30, left: 30 }\n// }) => {\n//     const stripRef = useRef(null);\n\n//     useEffect(() => {\n//         if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//             console.error(\"Invalid or empty jsonData:\", jsonData);\n//             return;\n//         }\n\n//         if (!labelsData || typeof labelsData !== \"object\") {\n//             console.error(\"Invalid labelsData:\", labelsData);\n//             return;\n//         }\n\n//         // Select SVG and clear it\n//         const svg = d3.select(stripRef.current);\n//         svg.selectAll(\"*\").remove();\n\n//         // Get the last subspace/ring\n//         const subspaces = Object.keys(jsonData);\n//         subspaces.sort((a, b) => a.length - b.length);\n//         const lastSubspace = subspaces[subspaces.length - 1];\n\n//         if (!jsonData[lastSubspace] || !jsonData[lastSubspace].length) {\n//             return; // No data for the last ring\n//         }\n\n//         // Setup dimensions\n//         const width = parseInt(svg.style(\"width\")) || 800;\n//         const height = stripHeight + stripMargin.top + stripMargin.bottom;\n\n//         svg.attr(\"height\", height);\n\n//         const g = svg\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n//         // Setup tooltip\n//         const tooltip = d3\n//             .select(\"body\")\n//             .append(\"div\")\n//             .attr(\"class\", \"tooltip\")\n//             .style(\"position\", \"absolute\")\n//             .style(\"visibility\", \"hidden\")\n//             .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//             .style(\"color\", \"white\")\n//             .style(\"padding\", \"5px\")\n//             .style(\"border-radius\", \"4px\")\n//             .style(\"font-size\", \"12px\");\n\n//         // Color scales\n//         const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n\n//         const getLabelColor = (pointId) => {\n//             if (!labelsData || !labelsData.labels) return \"gray\";\n//             for (const label of Object.keys(labelsData.labels)) {\n//                 const pointList = labelsData.labels[label];\n//                 if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//                     return colorScale(label);\n//                 }\n//             }\n//             return \"gray\";\n//         };\n\n//         // Get points in the last ring\n//         const lastRingPoints = jsonData[lastSubspace];\n\n//         // Calculate sector distribution\n//         const sectors = 2 ** lastSubspace.length;\n//         const pointsBySector = {};\n\n//         // Initialize sectors\n//         for (let i = 0; i < sectors; i++) {\n//             pointsBySector[i] = [];\n//         }\n\n//         // Group points by sector\n//         lastRingPoints.forEach(point => {\n//             const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//             const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//             const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//             pointsBySector[sectorIndex].push(point);\n//         });\n\n//         // Calculate total points for proportions\n//         const totalPoints = lastRingPoints.length;\n\n//         // Calculate sector widths (proportional to point counts)\n//         const stripWidth = width - stripMargin.left - stripMargin.right;\n//         const sectorWidths = {};\n//         let sectorStarts = {};\n//         let currentStart = 0;\n\n//         for (let i = 0; i < sectors; i++) {\n//             const sectorPoints = pointsBySector[i].length;\n//             const proportion = sectorPoints / totalPoints;\n//             sectorWidths[i] = stripWidth * proportion;\n//             sectorStarts[i] = currentStart;\n//             currentStart += sectorWidths[i];\n//         }\n\n//         // Draw sector backgrounds\n//         for (let i = 0; i < sectors; i++) {\n//             const sectorPoints = pointsBySector[i].length;\n//             if (sectorPoints === 0) continue;\n\n//             g.append(\"rect\")\n//                 .attr(\"x\", sectorStarts[i])\n//                 .attr(\"y\", 0)\n//                 .attr(\"width\", sectorWidths[i])\n//                 .attr(\"height\", stripHeight)\n//                 .attr(\"fill\", i % 2 === 0 ? \"#f0f0f0\" : \"#e0e0e0\")\n//                 .attr(\"stroke\", \"#ccc\")\n//                 .attr(\"stroke-width\", 0.5);\n\n//             // Add sector label\n//             g.append(\"text\")\n//                 .attr(\"x\", sectorStarts[i] + sectorWidths[i] / 2)\n//                 .attr(\"y\", stripHeight + 20)\n//                 .attr(\"text-anchor\", \"middle\")\n//                 .attr(\"font-size\", \"10px\")\n//                 .text(`Sector ${i} (${sectorPoints})`);\n//         }\n\n//         // Draw dividing lines between sectors\n//         for (let i = 1; i < sectors; i++) {\n//             if (sectorStarts[i] > 0) {\n//                 g.append(\"line\")\n//                     .attr(\"x1\", sectorStarts[i])\n//                     .attr(\"y1\", 0)\n//                     .attr(\"x2\", sectorStarts[i])\n//                     .attr(\"y2\", stripHeight)\n//                     .attr(\"stroke\", \"#999\")\n//                     .attr(\"stroke-width\", 1);\n//             }\n//         }\n\n//         // Draw points\n//         for (let sectorIndex = 0; sectorIndex < sectors; sectorIndex++) {\n//             const sectorPoints = pointsBySector[sectorIndex];\n//             const sectorWidth = sectorWidths[sectorIndex];\n//             const sectorStart = sectorStarts[sectorIndex];\n\n//             if (sectorPoints.length === 0) continue;\n\n//             // Create scale for dimension values in this sector\n//             const findMinMax = (points, dim) => {\n//                 const values = points.map(p => {\n//                     const coords = Object.entries(p).filter(([key]) => key !== \"Point_ID\");\n//                     return coords[dim][1]; // Get the value for this dimension\n//                 });\n//                 return [Math.min(...values), Math.max(...values)];\n//             };\n\n//             // Set up k equidistant vertical lines within the sector\n//             const k = lastSubspace.length; // number of dimensions\n//             const lineSpacing = sectorWidth / (k + 1);\n\n//             // Draw vertical dimension lines\n//             for (let dim = 0; dim < k; dim++) {\n//                 const lineX = sectorStart + (dim + 1) * lineSpacing;\n//                 const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n\n//                 // Draw dimension line\n//                 g.append(\"line\")\n//                     .attr(\"x1\", lineX)\n//                     .attr(\"y1\", 5)\n//                     .attr(\"x2\", lineX)\n//                     .attr(\"y2\", stripHeight - 5)\n//                     .attr(\"stroke\", \"#ddd\")\n//                     .attr(\"stroke-width\", 1)\n//                     .attr(\"stroke-dasharray\", \"3,3\");\n\n//                 // Draw dimension label\n//                 g.append(\"text\")\n//                     .attr(\"x\", lineX)\n//                     .attr(\"y\", 0)\n//                     .attr(\"text-anchor\", \"middle\")\n//                     .attr(\"font-size\", \"9px\")\n//                     .text(`D${dim}`);\n\n//                 // Draw min/max labels\n//                 g.append(\"text\")\n//                     .attr(\"x\", lineX - 15)\n//                     .attr(\"y\", stripHeight - 5)\n//                     .attr(\"text-anchor\", \"end\")\n//                     .attr(\"font-size\", \"8px\")\n//                     .text(`${minVal.toFixed(1)}`);\n\n//                 g.append(\"text\")\n//                     .attr(\"x\", lineX + 15)\n//                     .attr(\"y\", stripHeight - 5)\n//                     .attr(\"text-anchor\", \"start\")\n//                     .attr(\"font-size\", \"8px\")\n//                     .text(`${maxVal.toFixed(1)}`);\n\n//                 // Create a y-scale for this dimension\n//                 const yScale = d3.scaleLinear()\n//                     .domain([minVal, maxVal])\n//                     .range([stripHeight - 10, 10]);\n\n//                 // Plot points on this dimension line\n//                 sectorPoints.forEach(point => {\n//                     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//                     const value = pointData[dim][1];\n//                     const yPos = yScale(value);\n\n//                     g.append(\"circle\")\n//                         .attr(\"cx\", lineX)\n//                         .attr(\"cy\", yPos)\n//                         .attr(\"r\", 3)\n//                         .attr(\"fill\", point.Point_ID.map(id => getLabelColor(id))[0])\n//                         .attr(\"stroke\", \"white\")\n//                         .attr(\"stroke-width\", 0.5)\n//                         .style(\"cursor\", \"pointer\")\n//                         .on(\"mouseover\", (event) => {\n//                             const pointIds = point.Point_ID.join(\", \");\n//                             let associatedLabels = [];\n//                             if (labelsData && labelsData.labels) {\n//                                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                                     if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                                         associatedLabels.push(label);\n//                                     }\n//                                 });\n//                             }\n//                             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//                             tooltip\n//                                 .style(\"visibility\", \"visible\")\n//                                 .html(\n//                                     `Point_IDs: ${pointIds}<br>` +\n//                                     `Dimension ${dim}: ${value.toFixed(2)}<br>` +\n//                                     `Sector: ${sectorIndex}<br>` +\n//                                     `Label: ${labelText}`\n//                                 );\n\n//                             if (setHoveredCoordinates) {\n//                                 setHoveredCoordinates({ ...point, label: labelText });\n//                             }\n//                         })\n//                         .on(\"mousemove\", (event) => {\n//                             tooltip\n//                                 .style(\"top\", event.pageY + 10 + \"px\")\n//                                 .style(\"left\", event.pageX + 10 + \"px\");\n//                         })\n//                         .on(\"mouseout\", () => {\n//                             tooltip.style(\"visibility\", \"hidden\");\n//                             if (setHoveredCoordinates) {\n//                                 setHoveredCoordinates(null);\n//                             }\n//                         });\n//                 });\n//             }\n\n//             // Connect points from the same Point_ID\n//             const pointsById = {};\n//             sectorPoints.forEach(point => {\n//                 point.Point_ID.forEach(id => {\n//                     if (!pointsById[id]) {\n//                         pointsById[id] = { positions: [] };\n//                     }\n\n//                     const positions = [];\n//                     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n//                     for (let dim = 0; dim < k; dim++) {\n//                         const lineX = sectorStart + (dim + 1) * lineSpacing;\n//                         const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n//                         const value = pointData[dim][1];\n\n//                         const yScale = d3.scaleLinear()\n//                             .domain([minVal, maxVal])\n//                             .range([stripHeight - 10, 10]);\n\n//                         const yPos = yScale(value);\n//                         positions.push({ x: lineX, y: yPos });\n//                     }\n\n//                     pointsById[id].positions = positions;\n//                 });\n//             });\n\n//             // Draw connecting lines for each point\n//             Object.entries(pointsById).forEach(([id, data]) => {\n//                 const positions = data.positions;\n//                 if (positions.length > 1) {\n//                     for (let i = 0; i < positions.length - 1; i++) {\n//                         g.append(\"line\")\n//                             .attr(\"x1\", positions[i].x)\n//                             .attr(\"y1\", positions[i].y)\n//                             .attr(\"x2\", positions[i + 1].x)\n//                             .attr(\"y2\", positions[i + 1].y)\n//                             .attr(\"stroke\", getLabelColor(id))\n//                             .attr(\"stroke-width\", 0.7)\n//                             .attr(\"stroke-opacity\", 0.9);\n//                     }\n//                 }\n//             });\n//         }\n\n//         return () => {\n//             tooltip.remove();\n//         };\n//     }, [jsonData, labelsData, setHoveredCoordinates, stripHeight, stripMargin]);\n\n//     return (\n//         <div>\n//             <h3 style={{ marginBottom: \"10px\" }}>Horizontal Strip - Last Ring Projection</h3>\n//             <svg\n//                 ref={stripRef}\n//                 style={{ width: \"100%\", height: `${stripHeight + stripMargin.top + stripMargin.bottom}px` }}\n//             ></svg>\n//         </div>\n//     );\n// };\n\n// export default HorizontalStrip;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const stripRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    // Shared utilities\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    // Data preparation\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    // Radial Graph Setup\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Ring and Sector Colors\n    const getRingColor = index => {\n      const totalRings = subspaces.length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    // Sector Point Counts\n    const calculateSectorPointCounts = () => {\n      const sectorCounts = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        return Array(sectors).fill(0);\n      });\n      subspaces.forEach((key, index) => {\n        const points = pointsData[index].points;\n        const sectors = 2 ** (index + 1);\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n      return sectorCounts;\n    };\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const rotationOffset = Math.PI / 2;\n      const lastRingIndex = subspaces.length - 1;\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const sectors = 2 ** (ringIndex + 1);\n        const totalPoints = pointsData[ringIndex].points.length || 1;\n        const minAngle = 0.05 * (Math.PI * 2) / sectors;\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const remainingAngle = 2 * Math.PI - minAngle * emptySectors;\n          const angles = sectorCounts[ringIndex].map(count => {\n            return count === 0 ? minAngle : count / totalPoints * remainingAngle;\n          });\n          sectorAngles[ringIndex] = angles;\n        } else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** (ringIndex + 1);\n          const outerSectors = 2 ** (ringIndex + 2);\n          const ratio = outerSectors / innerSectors;\n          const angles = [];\n          for (let i = 0; i < innerSectors; i++) {\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx];\n            }\n            angles.push(sumAngle);\n          }\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n      return sectorAngles;\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      const rotationOffset = Math.PI / 2;\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n\n        // Draw sectors with their proportional angles\n        let currentAngle = rotationOffset;\n        sectorAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n      });\n    };\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = 0;\n      const anglePerSector = 2 * Math.PI / sectors;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        const startAngle = anglePerSector * bitVectorIndex + rotationOffset;\n        const centerAngle = startAngle + anglePerSector / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const rotationOffset = 0;\n      const pointsBySector = {};\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectors = 2 ** (index + 1);\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n      let currentAngle = rotationOffset;\n      const startAngles = sectorAngles.map((angle, i) => {\n        const startAngle = currentAngle;\n        currentAngle += angle;\n        return startAngle;\n      });\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const startAngle = startAngles[sectorIdx];\n        const sectorAngle = sectorAngles[sectorIdx];\n        const centerAngle = startAngle + sectorAngle / 2;\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector)) / Math.max(1, totalPointsInSector);\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n    // Store Point Position\n    const pointPositions = {};\n    const storePointPosition = (point, x, y, index) => {\n      point.Point_ID.forEach(id => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({\n          x,\n          y,\n          point,\n          subspaceId: pointsData[index].key\n        });\n      });\n    };\n\n    // Draw Point (Radial)\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n        const pointIds = point.Point_ID.join(\", \");\n        let associatedLabels = [];\n        if (labelsData && labelsData.labels) {\n          Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n            if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n              associatedLabels.push(label);\n            }\n          });\n        }\n        const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n        tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n        setHoveredCoordinates({\n          ...point,\n          label: labelText\n        });\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.style(\"visibility\", \"hidden\");\n        setHoveredCoordinates(null);\n      });\n    };\n\n    // Render Radial Graph\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw Connections\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.7).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n\n    // Zoom\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    // Horizontal Strip Setup\n    const stripSvg = d3.select(stripRef.current);\n    stripSvg.selectAll(\"*\").remove();\n    const stripHeight = 100;\n    const stripMargin = {\n      top: 20,\n      right: 30,\n      bottom: 30,\n      left: 30\n    };\n    const stripWidth = width - stripMargin.left - stripMargin.right;\n    const stripTotalHeight = stripHeight + stripMargin.top + stripMargin.bottom;\n    stripSvg.attr(\"height\", stripTotalHeight);\n    const stripG = stripSvg.append(\"g\").attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n    const lastSubspace = subspaces[subspaces.length - 1];\n    if (!jsonData[lastSubspace] || !jsonData[lastSubspace].length) {\n      return; // No data for the last ring\n    }\n    const lastRingPoints = jsonData[lastSubspace];\n    const sectors = 2 ** lastSubspace.length;\n    const pointsBySector = {};\n    for (let i = 0; i < sectors; i++) {\n      pointsBySector[i] = [];\n    }\n    lastRingPoints.forEach(point => {\n      const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n      const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n      const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n      pointsBySector[sectorIndex].push(point);\n    });\n    const totalPoints = lastRingPoints.length;\n    const sectorWidths = {};\n    let sectorStarts = {};\n    let currentStart = 0;\n    for (let i = 0; i < sectors; i++) {\n      const sectorPoints = pointsBySector[i].length;\n      const proportion = sectorPoints / totalPoints;\n      sectorWidths[i] = stripWidth * proportion;\n      sectorStarts[i] = currentStart;\n      currentStart += sectorWidths[i];\n    }\n\n    // Draw Sector Backgrounds (Strip)\n    for (let i = 0; i < sectors; i++) {\n      const sectorPoints = pointsBySector[i].length;\n      if (sectorPoints === 0) continue;\n      stripG.append(\"rect\").attr(\"x\", sectorStarts[i]).attr(\"y\", 0).attr(\"width\", sectorWidths[i]).attr(\"height\", stripHeight).attr(\"fill\", i % 2 === 0 ? \"#f0f0f0\" : \"#e0e0e0\").attr(\"stroke\", \"#ccc\").attr(\"stroke-width\", 0.5);\n      stripG.append(\"text\").attr(\"x\", sectorStarts[i] + sectorWidths[i] / 2).attr(\"y\", stripHeight + 20).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10px\").text(`Sector ${i} (${sectorPoints})`);\n    }\n\n    // Draw Dividing Lines (Strip)\n    for (let i = 1; i < sectors; i++) {\n      if (sectorStarts[i] > 0) {\n        stripG.append(\"line\").attr(\"x1\", sectorStarts[i]).attr(\"y1\", 0).attr(\"x2\", sectorStarts[i]).attr(\"y2\", stripHeight).attr(\"stroke\", \"#999\").attr(\"stroke-width\", 1);\n      }\n    }\n\n    // Draw Points (Strip)\n    for (let sectorIndex = 0; sectorIndex < sectors; sectorIndex++) {\n      const sectorPoints = pointsBySector[sectorIndex];\n      const sectorWidth = sectorWidths[sectorIndex];\n      const sectorStart = sectorStarts[sectorIndex];\n      if (sectorPoints.length === 0) continue;\n      const findMinMax = (points, dim) => {\n        const values = points.map(p => {\n          const coords = Object.entries(p).filter(([key]) => key !== \"Point_ID\");\n          return coords[dim][1];\n        });\n        return [Math.min(...values), Math.max(...values)];\n      };\n      const k = lastSubspace.length;\n      const lineSpacing = sectorWidth / (k + 1);\n      for (let dim = 0; dim < k; dim++) {\n        const lineX = sectorStart + (dim + 1) * lineSpacing;\n        const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n        stripG.append(\"line\").attr(\"x1\", lineX).attr(\"y1\", 5).attr(\"x2\", lineX).attr(\"y2\", stripHeight - 5).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"3,3\");\n        stripG.append(\"text\").attr(\"x\", lineX).attr(\"y\", 0).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"9px\").text(`D${dim}`);\n        stripG.append(\"text\").attr(\"x\", lineX - 15).attr(\"y\", stripHeight - 5).attr(\"text-anchor\", \"end\").attr(\"font-size\", \"8px\").text(`${minVal.toFixed(1)}`);\n        stripG.append(\"text\").attr(\"x\", lineX + 15).attr(\"y\", stripHeight - 5).attr(\"text-anchor\", \"start\").attr(\"font-size\", \"8px\").text(`${maxVal.toFixed(1)}`);\n        const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([stripHeight - 10, 10]);\n        sectorPoints.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const value = pointData[dim][1];\n          const yPos = yScale(value);\n          stripG.append(\"circle\").attr(\"cx\", lineX).attr(\"cy\", yPos).attr(\"r\", 3).attr(\"fill\", point.Point_ID.map(id => getLabelColor(id))[0]).attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>` + `Dimension ${dim}: ${value.toFixed(2)}<br>` + `Sector: ${sectorIndex}<br>` + `Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      }\n\n      // Connect Points (Strip)\n      const pointsById = {};\n      sectorPoints.forEach(point => {\n        point.Point_ID.forEach(id => {\n          if (!pointsById[id]) {\n            pointsById[id] = {\n              positions: []\n            };\n          }\n          const positions = [];\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          for (let dim = 0; dim < k; dim++) {\n            const lineX = sectorStart + (dim + 1) * lineSpacing;\n            const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n            const value = pointData[dim][1];\n            const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([stripHeight - 10, 10]);\n            const yPos = yScale(value);\n            positions.push({\n              x: lineX,\n              y: yPos\n            });\n          }\n          pointsById[id].positions = positions;\n        });\n      });\n      Object.entries(pointsById).forEach(([id, data]) => {\n        const positions = data.positions;\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            stripG.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(id)).attr(\"stroke-width\", 0.7).attr(\"stroke-opacity\", 0.9);\n          }\n        }\n      });\n    }\n\n    // Cleanup\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        margin: \"20px 0 10px\"\n      },\n      children: \"Horizontal Strip - Last Ring Projection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: stripRef,\n      style: {\n        width: \"100%\",\n        height: \"150px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 977,\n    columnNumber: 9\n  }, this);\n};\n_s(HierarchicalGraph, \"Lnq4kaJf8FClvngoFHBjv0qR1/w=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","stripRef","viewMode","setViewMode","Object","keys","length","console","error","colorScale","scaleOrdinal","schemeCategory10","domain","labels","getLabelColor","pointId","label","pointList","Array","isArray","includes","Number","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","calculateSectorPointCounts","sectorCounts","sectors","fill","forEach","point","pointData","entries","filter","bitVector","coord","join","bitVectorIndex","parseInt","calculateRecursiveSectorAngles","sectorAngles","rotationOffset","PI","lastRingIndex","ringIndex","totalPoints","minAngle","emptySectors","count","remainingAngle","angles","outerAngles","innerSectors","outerSectors","ratio","sumAngle","j","outerIdx","push","renderNormalView","innerRadius","outerRadius","startAngle","endAngle","arc","text","renderPointsNormal","renderProportionalView","currentAngle","angle","renderPointsProportional","anglePerSector","centerAngle","clusterFactor","overlapRadius","x","cos","y","sin","storePointPosition","drawPoint","pointsBySector","startAngles","sectorIdx","sectorAngle","totalPointsInSector","max","pointPositions","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","zoom","transform","call","stripSvg","stripHeight","stripMargin","top","right","bottom","left","stripWidth","stripTotalHeight","stripG","lastSubspace","lastRingPoints","sectorWidths","sectorStarts","currentStart","sectorPoints","proportion","sectorWidth","sectorStart","findMinMax","dim","values","p","coords","k","lineSpacing","lineX","minVal","maxVal","yScale","scaleLinear","range","value","yPos","pointsById","data","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/strip.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HorizontalStrip = ({\n//     jsonData,\n//     labelsData,\n//     setHoveredCoordinates,\n//     stripHeight = 100,\n//     stripMargin = { top: 20, right: 30, bottom: 30, left: 30 }\n// }) => {\n//     const stripRef = useRef(null);\n\n//     useEffect(() => {\n//         if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//             console.error(\"Invalid or empty jsonData:\", jsonData);\n//             return;\n//         }\n\n//         if (!labelsData || typeof labelsData !== \"object\") {\n//             console.error(\"Invalid labelsData:\", labelsData);\n//             return;\n//         }\n\n//         // Select SVG and clear it\n//         const svg = d3.select(stripRef.current);\n//         svg.selectAll(\"*\").remove();\n\n//         // Get the last subspace/ring\n//         const subspaces = Object.keys(jsonData);\n//         subspaces.sort((a, b) => a.length - b.length);\n//         const lastSubspace = subspaces[subspaces.length - 1];\n\n//         if (!jsonData[lastSubspace] || !jsonData[lastSubspace].length) {\n//             return; // No data for the last ring\n//         }\n\n//         // Setup dimensions\n//         const width = parseInt(svg.style(\"width\")) || 800;\n//         const height = stripHeight + stripMargin.top + stripMargin.bottom;\n\n//         svg.attr(\"height\", height);\n\n//         const g = svg\n//             .append(\"g\")\n//             .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n//         // Setup tooltip\n//         const tooltip = d3\n//             .select(\"body\")\n//             .append(\"div\")\n//             .attr(\"class\", \"tooltip\")\n//             .style(\"position\", \"absolute\")\n//             .style(\"visibility\", \"hidden\")\n//             .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//             .style(\"color\", \"white\")\n//             .style(\"padding\", \"5px\")\n//             .style(\"border-radius\", \"4px\")\n//             .style(\"font-size\", \"12px\");\n\n//         // Color scales\n//         const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n\n//         const getLabelColor = (pointId) => {\n//             if (!labelsData || !labelsData.labels) return \"gray\";\n//             for (const label of Object.keys(labelsData.labels)) {\n//                 const pointList = labelsData.labels[label];\n//                 if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//                     return colorScale(label);\n//                 }\n//             }\n//             return \"gray\";\n//         };\n\n//         // Get points in the last ring\n//         const lastRingPoints = jsonData[lastSubspace];\n\n//         // Calculate sector distribution\n//         const sectors = 2 ** lastSubspace.length;\n//         const pointsBySector = {};\n\n//         // Initialize sectors\n//         for (let i = 0; i < sectors; i++) {\n//             pointsBySector[i] = [];\n//         }\n\n//         // Group points by sector\n//         lastRingPoints.forEach(point => {\n//             const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//             const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//             const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//             pointsBySector[sectorIndex].push(point);\n//         });\n\n//         // Calculate total points for proportions\n//         const totalPoints = lastRingPoints.length;\n\n//         // Calculate sector widths (proportional to point counts)\n//         const stripWidth = width - stripMargin.left - stripMargin.right;\n//         const sectorWidths = {};\n//         let sectorStarts = {};\n//         let currentStart = 0;\n\n//         for (let i = 0; i < sectors; i++) {\n//             const sectorPoints = pointsBySector[i].length;\n//             const proportion = sectorPoints / totalPoints;\n//             sectorWidths[i] = stripWidth * proportion;\n//             sectorStarts[i] = currentStart;\n//             currentStart += sectorWidths[i];\n//         }\n\n//         // Draw sector backgrounds\n//         for (let i = 0; i < sectors; i++) {\n//             const sectorPoints = pointsBySector[i].length;\n//             if (sectorPoints === 0) continue;\n\n//             g.append(\"rect\")\n//                 .attr(\"x\", sectorStarts[i])\n//                 .attr(\"y\", 0)\n//                 .attr(\"width\", sectorWidths[i])\n//                 .attr(\"height\", stripHeight)\n//                 .attr(\"fill\", i % 2 === 0 ? \"#f0f0f0\" : \"#e0e0e0\")\n//                 .attr(\"stroke\", \"#ccc\")\n//                 .attr(\"stroke-width\", 0.5);\n\n//             // Add sector label\n//             g.append(\"text\")\n//                 .attr(\"x\", sectorStarts[i] + sectorWidths[i] / 2)\n//                 .attr(\"y\", stripHeight + 20)\n//                 .attr(\"text-anchor\", \"middle\")\n//                 .attr(\"font-size\", \"10px\")\n//                 .text(`Sector ${i} (${sectorPoints})`);\n//         }\n\n//         // Draw dividing lines between sectors\n//         for (let i = 1; i < sectors; i++) {\n//             if (sectorStarts[i] > 0) {\n//                 g.append(\"line\")\n//                     .attr(\"x1\", sectorStarts[i])\n//                     .attr(\"y1\", 0)\n//                     .attr(\"x2\", sectorStarts[i])\n//                     .attr(\"y2\", stripHeight)\n//                     .attr(\"stroke\", \"#999\")\n//                     .attr(\"stroke-width\", 1);\n//             }\n//         }\n\n//         // Draw points\n//         for (let sectorIndex = 0; sectorIndex < sectors; sectorIndex++) {\n//             const sectorPoints = pointsBySector[sectorIndex];\n//             const sectorWidth = sectorWidths[sectorIndex];\n//             const sectorStart = sectorStarts[sectorIndex];\n\n//             if (sectorPoints.length === 0) continue;\n\n//             // Create scale for dimension values in this sector\n//             const findMinMax = (points, dim) => {\n//                 const values = points.map(p => {\n//                     const coords = Object.entries(p).filter(([key]) => key !== \"Point_ID\");\n//                     return coords[dim][1]; // Get the value for this dimension\n//                 });\n//                 return [Math.min(...values), Math.max(...values)];\n//             };\n\n//             // Set up k equidistant vertical lines within the sector\n//             const k = lastSubspace.length; // number of dimensions\n//             const lineSpacing = sectorWidth / (k + 1);\n\n//             // Draw vertical dimension lines\n//             for (let dim = 0; dim < k; dim++) {\n//                 const lineX = sectorStart + (dim + 1) * lineSpacing;\n//                 const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n\n//                 // Draw dimension line\n//                 g.append(\"line\")\n//                     .attr(\"x1\", lineX)\n//                     .attr(\"y1\", 5)\n//                     .attr(\"x2\", lineX)\n//                     .attr(\"y2\", stripHeight - 5)\n//                     .attr(\"stroke\", \"#ddd\")\n//                     .attr(\"stroke-width\", 1)\n//                     .attr(\"stroke-dasharray\", \"3,3\");\n\n//                 // Draw dimension label\n//                 g.append(\"text\")\n//                     .attr(\"x\", lineX)\n//                     .attr(\"y\", 0)\n//                     .attr(\"text-anchor\", \"middle\")\n//                     .attr(\"font-size\", \"9px\")\n//                     .text(`D${dim}`);\n\n//                 // Draw min/max labels\n//                 g.append(\"text\")\n//                     .attr(\"x\", lineX - 15)\n//                     .attr(\"y\", stripHeight - 5)\n//                     .attr(\"text-anchor\", \"end\")\n//                     .attr(\"font-size\", \"8px\")\n//                     .text(`${minVal.toFixed(1)}`);\n\n//                 g.append(\"text\")\n//                     .attr(\"x\", lineX + 15)\n//                     .attr(\"y\", stripHeight - 5)\n//                     .attr(\"text-anchor\", \"start\")\n//                     .attr(\"font-size\", \"8px\")\n//                     .text(`${maxVal.toFixed(1)}`);\n\n//                 // Create a y-scale for this dimension\n//                 const yScale = d3.scaleLinear()\n//                     .domain([minVal, maxVal])\n//                     .range([stripHeight - 10, 10]);\n\n//                 // Plot points on this dimension line\n//                 sectorPoints.forEach(point => {\n//                     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//                     const value = pointData[dim][1];\n//                     const yPos = yScale(value);\n\n//                     g.append(\"circle\")\n//                         .attr(\"cx\", lineX)\n//                         .attr(\"cy\", yPos)\n//                         .attr(\"r\", 3)\n//                         .attr(\"fill\", point.Point_ID.map(id => getLabelColor(id))[0])\n//                         .attr(\"stroke\", \"white\")\n//                         .attr(\"stroke-width\", 0.5)\n//                         .style(\"cursor\", \"pointer\")\n//                         .on(\"mouseover\", (event) => {\n//                             const pointIds = point.Point_ID.join(\", \");\n//                             let associatedLabels = [];\n//                             if (labelsData && labelsData.labels) {\n//                                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                                     if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                                         associatedLabels.push(label);\n//                                     }\n//                                 });\n//                             }\n//                             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//                             tooltip\n//                                 .style(\"visibility\", \"visible\")\n//                                 .html(\n//                                     `Point_IDs: ${pointIds}<br>` +\n//                                     `Dimension ${dim}: ${value.toFixed(2)}<br>` +\n//                                     `Sector: ${sectorIndex}<br>` +\n//                                     `Label: ${labelText}`\n//                                 );\n\n//                             if (setHoveredCoordinates) {\n//                                 setHoveredCoordinates({ ...point, label: labelText });\n//                             }\n//                         })\n//                         .on(\"mousemove\", (event) => {\n//                             tooltip\n//                                 .style(\"top\", event.pageY + 10 + \"px\")\n//                                 .style(\"left\", event.pageX + 10 + \"px\");\n//                         })\n//                         .on(\"mouseout\", () => {\n//                             tooltip.style(\"visibility\", \"hidden\");\n//                             if (setHoveredCoordinates) {\n//                                 setHoveredCoordinates(null);\n//                             }\n//                         });\n//                 });\n//             }\n\n//             // Connect points from the same Point_ID\n//             const pointsById = {};\n//             sectorPoints.forEach(point => {\n//                 point.Point_ID.forEach(id => {\n//                     if (!pointsById[id]) {\n//                         pointsById[id] = { positions: [] };\n//                     }\n\n//                     const positions = [];\n//                     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n//                     for (let dim = 0; dim < k; dim++) {\n//                         const lineX = sectorStart + (dim + 1) * lineSpacing;\n//                         const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n//                         const value = pointData[dim][1];\n\n//                         const yScale = d3.scaleLinear()\n//                             .domain([minVal, maxVal])\n//                             .range([stripHeight - 10, 10]);\n\n//                         const yPos = yScale(value);\n//                         positions.push({ x: lineX, y: yPos });\n//                     }\n\n//                     pointsById[id].positions = positions;\n//                 });\n//             });\n\n//             // Draw connecting lines for each point\n//             Object.entries(pointsById).forEach(([id, data]) => {\n//                 const positions = data.positions;\n//                 if (positions.length > 1) {\n//                     for (let i = 0; i < positions.length - 1; i++) {\n//                         g.append(\"line\")\n//                             .attr(\"x1\", positions[i].x)\n//                             .attr(\"y1\", positions[i].y)\n//                             .attr(\"x2\", positions[i + 1].x)\n//                             .attr(\"y2\", positions[i + 1].y)\n//                             .attr(\"stroke\", getLabelColor(id))\n//                             .attr(\"stroke-width\", 0.7)\n//                             .attr(\"stroke-opacity\", 0.9);\n//                     }\n//                 }\n//             });\n//         }\n\n//         return () => {\n//             tooltip.remove();\n//         };\n//     }, [jsonData, labelsData, setHoveredCoordinates, stripHeight, stripMargin]);\n\n//     return (\n//         <div>\n//             <h3 style={{ marginBottom: \"10px\" }}>Horizontal Strip - Last Ring Projection</h3>\n//             <svg\n//                 ref={stripRef}\n//                 style={{ width: \"100%\", height: `${stripHeight + stripMargin.top + stripMargin.bottom}px` }}\n//             ></svg>\n//         </div>\n//     );\n// };\n\n// export default HorizontalStrip;\n\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n    const graphRef = useRef(null);\n    const stripRef = useRef(null);\n    const [viewMode, setViewMode] = useState(\"normal\");\n\n    useEffect(() => {\n        if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n            console.error(\"Invalid or empty jsonData:\", jsonData);\n            return;\n        }\n\n        if (!labelsData || typeof labelsData !== \"object\") {\n            console.error(\"Invalid labelsData:\", labelsData);\n            return;\n        }\n\n        // Shared utilities\n        const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n        const getLabelColor = (pointId) => {\n            if (!labelsData || !labelsData.labels) return \"gray\";\n            for (const label of Object.keys(labelsData.labels)) {\n                const pointList = labelsData.labels[label];\n                if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n                    return colorScale(label);\n                }\n            }\n            return \"gray\";\n        };\n\n        // Data preparation\n        const subspaces = Object.keys(jsonData);\n        subspaces.sort((a, b) => a.length - b.length);\n        const pointsData = subspaces.map((key) => ({\n            key,\n            points: jsonData[key] || [],\n            dimensions: key.length,\n            subspaceId: key,\n        }));\n        const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n        // Radial Graph Setup\n        const svg = d3.select(graphRef.current);\n        svg.selectAll(\"*\").remove();\n\n        const width = 800;\n        const height = 800;\n        const margin = 20;\n        const maxRadius = Math.min(width, height) / 2 - margin;\n\n        const g = svg\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n        // Tooltip\n        const tooltip = d3\n            .select(\"body\")\n            .append(\"div\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n            .style(\"color\", \"white\")\n            .style(\"padding\", \"5px\")\n            .style(\"border-radius\", \"4px\")\n            .style(\"font-size\", \"12px\");\n\n        // Ring and Sector Colors\n        const getRingColor = (index) => {\n            const totalRings = subspaces.length;\n            const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n            return d3.color(colorScaleInd(index));\n        };\n        const getSectorColor = (index, sectorIndex) => {\n            const baseColor = d3.hsl(getRingColor(index));\n            const isPositive = sectorIndex % 2 === 0;\n            return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n        };\n\n        // Sector Point Counts\n        const calculateSectorPointCounts = () => {\n            const sectorCounts = subspaces.map((key, index) => {\n                const sectors = 2 ** (index + 1);\n                return Array(sectors).fill(0);\n            });\n\n            subspaces.forEach((key, index) => {\n                const points = pointsData[index].points;\n                const sectors = 2 ** (index + 1);\n\n                points.forEach(point => {\n                    const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n                    const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n                    const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n                    sectorCounts[index][bitVectorIndex]++;\n                });\n            });\n\n            return sectorCounts;\n        };\n\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const rotationOffset = Math.PI / 2;\n      const lastRingIndex = subspaces.length - 1;\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const sectors = 2 ** (ringIndex + 1);\n        const totalPoints = pointsData[ringIndex].points.length || 1; \n        const minAngle = 0.05 * (Math.PI * 2) / sectors; \n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n          const angles = sectorCounts[ringIndex].map(count => {\n            return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n          });\n\n          sectorAngles[ringIndex] = angles;\n        }\n        else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** (ringIndex + 1);\n          const outerSectors = 2 ** (ringIndex + 2);\n          const ratio = outerSectors / innerSectors;\n\n          const angles = [];\n          for (let i = 0; i < innerSectors; i++) {\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx];\n            }\n            angles.push(sumAngle);\n          }\n\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n\n      return sectorAngles;\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      const rotationOffset = Math.PI / 2;\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n        // Draw sectors with their proportional angles\n        let currentAngle = rotationOffset;\n        sectorAngles[index].forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.3)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n      });\n    };\n\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = 0;\n      const anglePerSector = 2 * Math.PI / sectors;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n        const centerAngle = startAngle + (anglePerSector / 2);\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const rotationOffset = 0;\n      const pointsBySector = {};\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectors = 2 ** (index + 1);\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n\n      let currentAngle = rotationOffset;\n      const startAngles = sectorAngles.map((angle, i) => {\n        const startAngle = currentAngle;\n        currentAngle += angle;\n        return startAngle;\n      });\n\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const startAngle = startAngles[sectorIdx];\n        const sectorAngle = sectorAngles[sectorIdx];\n        const centerAngle = startAngle + (sectorAngle / 2);\n\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius =\n            innerRadius +\n            (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n            Math.max(1, totalPointsInSector);\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n        // Store Point Position\n        const pointPositions = {};\n        const storePointPosition = (point, x, y, index) => {\n            point.Point_ID.forEach((id) => {\n                if (!pointPositions[id]) {\n                    pointPositions[id] = [];\n                }\n                pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n            });\n        };\n\n        // Draw Point (Radial)\n        const drawPoint = (point, x, y, index) => {\n            g.append(\"circle\")\n                .attr(\"cx\", x)\n                .attr(\"cy\", y)\n                .attr(\"r\", 3)\n                .attr(\"fill\", \"black\")\n                .attr(\"stroke\", \"white\")\n                .attr(\"stroke-width\", 0.5)\n                .style(\"pointer-events\", \"visible\")\n                .on(\"mouseover\", (event) => {\n                    const pointIds = point.Point_ID.join(\", \");\n                    let associatedLabels = [];\n                    if (labelsData && labelsData.labels) {\n                        Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                            if (point.Point_ID.some((id) => pointList.includes(Number(id)))) {\n                                associatedLabels.push(label);\n                            }\n                        });\n                    }\n                    const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n                    tooltip\n                        .style(\"visibility\", \"visible\")\n                        .html(\n                            `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(\n                                2\n                            )})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n                        );\n                    setHoveredCoordinates({ ...point, label: labelText });\n                })\n                .on(\"mousemove\", (event) => {\n                    tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n                })\n                .on(\"mouseout\", () => {\n                    tooltip.style(\"visibility\", \"hidden\");\n                    setHoveredCoordinates(null);\n                });\n        };\n\n        // Render Radial Graph\n        if (viewMode === \"normal\") {\n            renderNormalView();\n        } else if (viewMode === \"proportional\") {\n            renderProportionalView();\n        }\n\n        // Draw Connections\n        Object.entries(pointPositions).forEach(([pointId, positions]) => {\n            if (positions.length > 1) {\n                for (let i = 0; i < positions.length - 1; i++) {\n                    const line = g\n                        .append(\"line\")\n                        .attr(\"x1\", positions[i].x)\n                        .attr(\"y1\", positions[i].y)\n                        .attr(\"x2\", positions[i + 1].x)\n                        .attr(\"y2\", positions[i + 1].y)\n                        .attr(\"stroke\", getLabelColor(pointId))\n                        .attr(\"stroke-width\", 0.7)\n                        .attr(\"stroke-opacity\", 0.9)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"mouseover\", (event) => {\n                            tooltip\n                                .style(\"visibility\", \"visible\")\n                                .html(`Connection: Point_ID ${pointId}`);\n                        })\n                        .on(\"mousemove\", (event) => {\n                            tooltip\n                                .style(\"top\", event.pageY + 10 + \"px\")\n                                .style(\"left\", event.pageX + 10 + \"px\");\n                        })\n                        .on(\"mouseout\", () => {\n                            tooltip.style(\"visibility\", \"hidden\");\n                        });\n                }\n            }\n        });\n\n        // Zoom\n        const zoom = d3.zoom().on(\"zoom\", (event) => {\n            g.attr(\"transform\", event.transform);\n        });\n        svg.call(zoom);\n\n        // Horizontal Strip Setup\n        const stripSvg = d3.select(stripRef.current);\n        stripSvg.selectAll(\"*\").remove();\n\n        const stripHeight = 100;\n        const stripMargin = { top: 20, right: 30, bottom: 30, left: 30 };\n        const stripWidth = width - stripMargin.left - stripMargin.right;\n        const stripTotalHeight = stripHeight + stripMargin.top + stripMargin.bottom;\n\n        stripSvg.attr(\"height\", stripTotalHeight);\n\n        const stripG = stripSvg\n            .append(\"g\")\n            .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n        const lastSubspace = subspaces[subspaces.length - 1];\n        if (!jsonData[lastSubspace] || !jsonData[lastSubspace].length) {\n            return; // No data for the last ring\n        }\n\n        const lastRingPoints = jsonData[lastSubspace];\n        const sectors = 2 ** lastSubspace.length;\n        const pointsBySector = {};\n\n        for (let i = 0; i < sectors; i++) {\n            pointsBySector[i] = [];\n        }\n\n        lastRingPoints.forEach((point) => {\n            const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n            const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n            const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n            pointsBySector[sectorIndex].push(point);\n        });\n\n        const totalPoints = lastRingPoints.length;\n        const sectorWidths = {};\n        let sectorStarts = {};\n        let currentStart = 0;\n\n        for (let i = 0; i < sectors; i++) {\n            const sectorPoints = pointsBySector[i].length;\n            const proportion = sectorPoints / totalPoints;\n            sectorWidths[i] = stripWidth * proportion;\n            sectorStarts[i] = currentStart;\n            currentStart += sectorWidths[i];\n        }\n\n        // Draw Sector Backgrounds (Strip)\n        for (let i = 0; i < sectors; i++) {\n            const sectorPoints = pointsBySector[i].length;\n            if (sectorPoints === 0) continue;\n\n            stripG\n                .append(\"rect\")\n                .attr(\"x\", sectorStarts[i])\n                .attr(\"y\", 0)\n                .attr(\"width\", sectorWidths[i])\n                .attr(\"height\", stripHeight)\n                .attr(\"fill\", i % 2 === 0 ? \"#f0f0f0\" : \"#e0e0e0\")\n                .attr(\"stroke\", \"#ccc\")\n                .attr(\"stroke-width\", 0.5);\n\n            stripG\n                .append(\"text\")\n                .attr(\"x\", sectorStarts[i] + sectorWidths[i] / 2)\n                .attr(\"y\", stripHeight + 20)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"font-size\", \"10px\")\n                .text(`Sector ${i} (${sectorPoints})`);\n        }\n\n        // Draw Dividing Lines (Strip)\n        for (let i = 1; i < sectors; i++) {\n            if (sectorStarts[i] > 0) {\n                stripG\n                    .append(\"line\")\n                    .attr(\"x1\", sectorStarts[i])\n                    .attr(\"y1\", 0)\n                    .attr(\"x2\", sectorStarts[i])\n                    .attr(\"y2\", stripHeight)\n                    .attr(\"stroke\", \"#999\")\n                    .attr(\"stroke-width\", 1);\n            }\n        }\n\n        // Draw Points (Strip)\n        for (let sectorIndex = 0; sectorIndex < sectors; sectorIndex++) {\n            const sectorPoints = pointsBySector[sectorIndex];\n            const sectorWidth = sectorWidths[sectorIndex];\n            const sectorStart = sectorStarts[sectorIndex];\n\n            if (sectorPoints.length === 0) continue;\n\n            const findMinMax = (points, dim) => {\n                const values = points.map((p) => {\n                    const coords = Object.entries(p).filter(([key]) => key !== \"Point_ID\");\n                    return coords[dim][1];\n                });\n                return [Math.min(...values), Math.max(...values)];\n            };\n\n            const k = lastSubspace.length;\n            const lineSpacing = sectorWidth / (k + 1);\n\n            for (let dim = 0; dim < k; dim++) {\n                const lineX = sectorStart + (dim + 1) * lineSpacing;\n                const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n\n                stripG\n                    .append(\"line\")\n                    .attr(\"x1\", lineX)\n                    .attr(\"y1\", 5)\n                    .attr(\"x2\", lineX)\n                    .attr(\"y2\", stripHeight - 5)\n                    .attr(\"stroke\", \"#ddd\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"3,3\");\n\n                stripG\n                    .append(\"text\")\n                    .attr(\"x\", lineX)\n                    .attr(\"y\", 0)\n                    .attr(\"text-anchor\", \"middle\")\n                    .attr(\"font-size\", \"9px\")\n                    .text(`D${dim}`);\n\n                stripG\n                    .append(\"text\")\n                    .attr(\"x\", lineX - 15)\n                    .attr(\"y\", stripHeight - 5)\n                    .attr(\"text-anchor\", \"end\")\n                    .attr(\"font-size\", \"8px\")\n                    .text(`${minVal.toFixed(1)}`);\n\n                stripG\n                    .append(\"text\")\n                    .attr(\"x\", lineX + 15)\n                    .attr(\"y\", stripHeight - 5)\n                    .attr(\"text-anchor\", \"start\")\n                    .attr(\"font-size\", \"8px\")\n                    .text(`${maxVal.toFixed(1)}`);\n\n                const yScale = d3\n                    .scaleLinear()\n                    .domain([minVal, maxVal])\n                    .range([stripHeight - 10, 10]);\n\n                sectorPoints.forEach((point) => {\n                    const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n                    const value = pointData[dim][1];\n                    const yPos = yScale(value);\n\n                    stripG\n                        .append(\"circle\")\n                        .attr(\"cx\", lineX)\n                        .attr(\"cy\", yPos)\n                        .attr(\"r\", 3)\n                        .attr(\"fill\", point.Point_ID.map((id) => getLabelColor(id))[0])\n                        .attr(\"stroke\", \"white\")\n                        .attr(\"stroke-width\", 0.5)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"mouseover\", (event) => {\n                            const pointIds = point.Point_ID.join(\", \");\n                            let associatedLabels = [];\n                            if (labelsData && labelsData.labels) {\n                                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                                    if (point.Point_ID.some((id) => pointList.includes(Number(id)))) {\n                                        associatedLabels.push(label);\n                                    }\n                                });\n                            }\n                            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n                            tooltip\n                                .style(\"visibility\", \"visible\")\n                                .html(\n                                    `Point_IDs: ${pointIds}<br>` +\n                                    `Dimension ${dim}: ${value.toFixed(2)}<br>` +\n                                    `Sector: ${sectorIndex}<br>` +\n                                    `Label: ${labelText}`\n                                );\n\n                            setHoveredCoordinates({ ...point, label: labelText });\n                        })\n                        .on(\"mousemove\", (event) => {\n                            tooltip\n                                .style(\"top\", event.pageY + 10 + \"px\")\n                                .style(\"left\", event.pageX + 10 + \"px\");\n                        })\n                        .on(\"mouseout\", () => {\n                            tooltip.style(\"visibility\", \"hidden\");\n                            setHoveredCoordinates(null);\n                        });\n                });\n            }\n\n            // Connect Points (Strip)\n            const pointsById = {};\n            sectorPoints.forEach((point) => {\n                point.Point_ID.forEach((id) => {\n                    if (!pointsById[id]) {\n                        pointsById[id] = { positions: [] };\n                    }\n\n                    const positions = [];\n                    const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n                    for (let dim = 0; dim < k; dim++) {\n                        const lineX = sectorStart + (dim + 1) * lineSpacing;\n                        const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n                        const value = pointData[dim][1];\n\n                        const yScale = d3\n                            .scaleLinear()\n                            .domain([minVal, maxVal])\n                            .range([stripHeight - 10, 10]);\n\n                        const yPos = yScale(value);\n                        positions.push({ x: lineX, y: yPos });\n                    }\n\n                    pointsById[id].positions = positions;\n                });\n            });\n\n            Object.entries(pointsById).forEach(([id, data]) => {\n                const positions = data.positions;\n                if (positions.length > 1) {\n                    for (let i = 0; i < positions.length - 1; i++) {\n                        stripG\n                            .append(\"line\")\n                            .attr(\"x1\", positions[i].x)\n                            .attr(\"y1\", positions[i].y)\n                            .attr(\"x2\", positions[i + 1].x)\n                            .attr(\"y2\", positions[i + 1].y)\n                            .attr(\"stroke\", getLabelColor(id))\n                            .attr(\"stroke-width\", 0.7)\n                            .attr(\"stroke-opacity\", 0.9);\n                    }\n                }\n            });\n        }\n\n        // Cleanup\n        return () => {\n            tooltip.remove();\n        };\n    }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n    return (\n        <div style={{ width: \"100%\", height: \"100%\" }}>\n            <div style={{ marginBottom: \"10px\" }}>\n                <button\n                    onClick={() => setViewMode(\"normal\")}\n                    style={{\n                        marginRight: \"10px\",\n                        padding: \"5px 10px\",\n                        backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n                        color: viewMode === \"normal\" ? \"white\" : \"black\",\n                    }}\n                >\n                    Normal View\n                </button>\n                <button\n                    onClick={() => setViewMode(\"proportional\")}\n                    style={{\n                        padding: \"5px 10px\",\n                        backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n                        color: viewMode === \"proportional\" ? \"white\" : \"black\",\n                    }}\n                >\n                    Proportional View\n                </button>\n            </div>\n            <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n            <h3 style={{ margin: \"20px 0 10px\" }}>Horizontal Strip - Last Ring Projection</h3>\n            <svg\n                ref={stripRef}\n                style={{ width: \"100%\", height: \"150px\" }}\n            ></svg>\n        </div>\n    );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}