{"ast":null,"code":"// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //       //   g.append(\"text\")\n// //       //     .attr(\"transform\", (d) => {\n// //       //       const midAngle = (startAngle + endAngle) / 2;\n// //       //       const textRadius = (innerRadius + outerRadius) / 2;\n// //       //       const x = textRadius * Math.cos(Math.PI / 2 - midAngle);\n// //       //       const y = textRadius * Math.sin(Math.PI / 2 - midAngle);\n// //       //       let angleDeg = ((midAngle - Math.PI / 2) * 180) / Math.PI;\n// //       //       let rotation = (angleDeg > 90 && angleDeg < 270) ? 0 : 0;\n// //       //       return `translate(${x}, ${y}) rotate(${rotation})`;\n// //       //     })\n// //       //     .attr(\"text-anchor\", \"middle\")\n// //       //     .attr(\"alignment-baseline\", \"middle\")\n// //       //     .attr(\"font-size\", \"14px\")\n// //       //     .attr(\"fill\", \"black\")\n// //       //     .attr(\"font-weight\", \"normal\")\n// //       //     .text(\n// //       //       i\n// //       //         .toString(2)\n// //       //         .padStart(index + 1, \"0\")\n// //       //         .replace(/0/g, \"*\")\n// //       //         .replace(/1/g, \"0\")\n// //       //         .replace(/\\*/g, \"1\")\n// //       //     );\n// //       }\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                   )\n// //                 })\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n// //               highlightedElements = { line, circles, originalColor };\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n// //             });\n// //         }\n// //       }\n// //     });\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = () => {\n//       console.log(\"Starting calculateProportionalAngles...\");\n//       console.log(\"pointsData:\", pointsData);\n\n//       if (pointsData.length === 0) {\n//         console.error(\"No points data available\");\n//         return [];\n//       }\n\n//       const lastRing = pointsData[pointsData.length - 1];\n//       const lastRingPoints = lastRing.points || [];\n//       const sectorsCount = Math.max(1, 2 ** lastRing.dimensions);\n\n//       console.log(\"Last ring:\", lastRing);\n//       console.log(\"Last ring points length:\", lastRingPoints.length);\n//       console.log(\"Sectors count:\", sectorsCount);\n\n//       // Fallback for empty or invalid last ring\n//       if (lastRingPoints.length === 0 || !Number.isFinite(sectorsCount)) {\n//         console.warn(\"Invalid last ring data, using equal angles\");\n//         return pointsData.map((_, i) => {\n//           const sectorCount = Math.max(1, 2 ** (i + 1));\n//           console.log(`Ring ${i} sector count: ${sectorCount}`);\n//           return Array(sectorCount).fill(2 * Math.PI / sectorCount);\n//         });\n//       }\n\n//       const pointCounts = new Array(sectorsCount).fill(0);\n//       console.log(\"Initialized pointCounts:\", pointCounts);\n\n//       lastRingPoints.forEach((point, idx) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectorIndex = parseInt(bitVector, 2);\n//         if (sectorIndex >= 0 && sectorIndex < sectorsCount) {\n//           pointCounts[sectorIndex]++;\n//         } else {\n//           console.warn(`Point ${idx}: Invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n//         }\n//       });\n\n//       console.log(\"Point counts per sector:\", pointCounts);\n\n//       const minAngle = Math.PI / 180; // 1 degree minimum\n//       const totalAngle = 2 * Math.PI;\n//       const totalNonEmptyPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n//       const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n//       console.log(\"Total non-empty points:\", totalNonEmptyPoints);\n//       console.log(\"Remaining angle:\", remainingAngle);\n\n//       const sectorAngles = pointCounts.map((count, idx) => {\n//         const angle = count > 0\n//           ? minAngle + (count / totalNonEmptyPoints) * remainingAngle\n//           : minAngle;\n//         console.log(`Sector ${idx} angle: ${angle}`);\n//         return angle;\n//       });\n\n//       console.log(\"Sector angles:\", sectorAngles);\n\n//       // Propagate angles to inner rings\n//       const ringAngles = [sectorAngles];\n//       for (let i = pointsData.length - 2; i >= 0; i--) {\n//         const prevAngles = ringAngles[0];\n//         const sectorCount = Math.max(1, 2 ** (i + 1));\n//         const currAngles = new Array(sectorCount);\n//         console.log(`Propagating to ring ${i}, expected sectors: ${sectorCount}`);\n\n//         for (let j = 0; j < sectorCount; j++) {\n//           const angle1 = prevAngles[j * 2] || 0;\n//           const angle2 = prevAngles[j * 2 + 1] || 0;\n//           currAngles[j] = angle1 + angle2;\n//           console.log(`Ring ${i}, sector ${j}: ${currAngles[j]} (from ${angle1} + ${angle2})`);\n//         }\n//         ringAngles.unshift(currAngles);\n//       }\n\n//       console.log(\"Final ring angles:\", ringAngles);\n//       return ringAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           g.append(\"text\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", -outerRadius - 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"font-size\", \"16px\")\n//             .attr(\"fill\", \"red\")\n//             .attr(\"font-weight\", \"bold\")\n//             .text(ringLabels[index]);\n//         }\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const ringAngles = calculateProportionalAngles();\n//       console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n//       if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n//         console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n//         renderNormalView();\n//         return;\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         let currentAngle = Math.PI / 2;\n\n//         ringAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nconst calculateProportionalAngles = () => {\n  console.log(\"Starting calculateProportionalAngles...\");\n  console.log(\"pointsData:\", pointsData);\n  if (pointsData.length === 0) {\n    console.error(\"No points data available\");\n    return [];\n  }\n  const lastRing = pointsData[pointsData.length - 1];\n  const lastRingPoints = lastRing.points || [];\n  const sectorsCount = Math.max(1, 2 ** lastRing.dimensions);\n  const totalAngle = 2 * Math.PI;\n\n  // If no points in last ring, distribute angles equally\n  if (lastRingPoints.length === 0) {\n    console.warn(\"Last ring has no points, using equal angles\");\n    return pointsData.map((_, i) => {\n      const sectorCount = Math.max(1, 2 ** (i + 1));\n      return Array(sectorCount).fill(totalAngle / sectorCount);\n    });\n  }\n  const pointCounts = new Array(sectorsCount).fill(0);\n  lastRingPoints.forEach(point => {\n    const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    // Normalize coordinates to binary (0 or 1) based on sign\n    const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n    const sectorIndex = Math.min(parseInt(bitVector, 2), sectorsCount - 1); // Cap index\n    pointCounts[sectorIndex]++;\n  });\n  const minAngle = Math.PI / 180; // 1 degree\n  const totalNonEmptyPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n  const remainingAngle = totalAngle - sectorsCount * minAngle;\n  const sectorAngles = pointCounts.map(count => count > 0 ? minAngle + count / totalNonEmptyPoints * remainingAngle : minAngle);\n\n  // Ensure total angle is exactly 2π\n  const currentTotal = sectorAngles.reduce((sum, angle) => sum + angle, 0);\n  const correctionFactor = totalAngle / currentTotal;\n  const adjustedSectorAngles = sectorAngles.map(angle => angle * correctionFactor);\n\n  // Propagate to inner rings\n  const ringAngles = [adjustedSectorAngles];\n  for (let i = pointsData.length - 2; i >= 0; i--) {\n    const prevAngles = ringAngles[0];\n    const sectorCount = Math.max(1, 2 ** (i + 1));\n    const currAngles = new Array(sectorCount).fill(0);\n    for (let j = 0; j < sectorCount; j++) {\n      const angle1 = prevAngles[j * 2] || 0;\n      const angle2 = prevAngles[j * 2 + 1] || 0;\n      currAngles[j] = angle1 + angle2;\n    }\n    ringAngles.unshift(currAngles);\n  }\n  console.log(\"Final ring angles:\", ringAngles);\n  return ringAngles;\n};\nconst renderProportionalView = () => {\n  const ringAngles = calculateProportionalAngles();\n  console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n  if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n    console.error(\"Invalid ring angles:\", ringAngles);\n    renderNormalView(); // Fallback with explicit logging\n    return;\n  }\n  subspaces.forEach((key, index) => {\n    if (!ringVisibility[key]) return;\n    const innerRadius = index / subspaces.length * maxRadius;\n    const outerRadius = (index + 1) / subspaces.length * maxRadius;\n    let currentAngle = Math.PI / 2;\n    ringAngles[index].forEach((angle, i) => {\n      const startAngle = currentAngle;\n      const endAngle = currentAngle + angle;\n      g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n      currentAngle = endAngle;\n    });\n    g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n    renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n  });\n};","map":{"version":3,"names":["calculateProportionalAngles","console","log","pointsData","length","error","lastRing","lastRingPoints","points","sectorsCount","Math","max","dimensions","totalAngle","PI","warn","map","_","i","sectorCount","Array","fill","pointCounts","forEach","point","pointData","Object","entries","filter","key","bitVector","coord","join","sectorIndex","min","parseInt","minAngle","totalNonEmptyPoints","reduce","sum","count","remainingAngle","sectorAngles","currentTotal","angle","correctionFactor","adjustedSectorAngles","ringAngles","prevAngles","currAngles","j","angle1","angle2","unshift","renderProportionalView","some","arr","isArray","renderNormalView","subspaces","index","ringVisibility","innerRadius","maxRadius","outerRadius","currentAngle","startAngle","endAngle","g","append","attr","d3","arc","getSectorColor","style","text","ringLabels","renderPoints"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //       //   g.append(\"text\")\n// //       //     .attr(\"transform\", (d) => {\n// //       //       const midAngle = (startAngle + endAngle) / 2;\n// //       //       const textRadius = (innerRadius + outerRadius) / 2;\n// //       //       const x = textRadius * Math.cos(Math.PI / 2 - midAngle);\n// //       //       const y = textRadius * Math.sin(Math.PI / 2 - midAngle);\n// //       //       let angleDeg = ((midAngle - Math.PI / 2) * 180) / Math.PI;\n// //       //       let rotation = (angleDeg > 90 && angleDeg < 270) ? 0 : 0;\n// //       //       return `translate(${x}, ${y}) rotate(${rotation})`;\n// //       //     })\n// //       //     .attr(\"text-anchor\", \"middle\")\n// //       //     .attr(\"alignment-baseline\", \"middle\")\n// //       //     .attr(\"font-size\", \"14px\")\n// //       //     .attr(\"fill\", \"black\")\n// //       //     .attr(\"font-weight\", \"normal\")\n// //       //     .text(\n// //       //       i\n// //       //         .toString(2)\n// //       //         .padStart(index + 1, \"0\")\n// //       //         .replace(/0/g, \"*\")\n// //       //         .replace(/1/g, \"0\")\n// //       //         .replace(/\\*/g, \"1\")\n// //       //     );\n// //       }\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                   )\n// //                 })\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n// //               highlightedElements = { line, circles, originalColor };\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n// //             });\n// //         }\n// //       }\n// //     });\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = () => {\n//       console.log(\"Starting calculateProportionalAngles...\");\n//       console.log(\"pointsData:\", pointsData);\n\n//       if (pointsData.length === 0) {\n//         console.error(\"No points data available\");\n//         return [];\n//       }\n\n//       const lastRing = pointsData[pointsData.length - 1];\n//       const lastRingPoints = lastRing.points || [];\n//       const sectorsCount = Math.max(1, 2 ** lastRing.dimensions);\n\n//       console.log(\"Last ring:\", lastRing);\n//       console.log(\"Last ring points length:\", lastRingPoints.length);\n//       console.log(\"Sectors count:\", sectorsCount);\n\n//       // Fallback for empty or invalid last ring\n//       if (lastRingPoints.length === 0 || !Number.isFinite(sectorsCount)) {\n//         console.warn(\"Invalid last ring data, using equal angles\");\n//         return pointsData.map((_, i) => {\n//           const sectorCount = Math.max(1, 2 ** (i + 1));\n//           console.log(`Ring ${i} sector count: ${sectorCount}`);\n//           return Array(sectorCount).fill(2 * Math.PI / sectorCount);\n//         });\n//       }\n\n//       const pointCounts = new Array(sectorsCount).fill(0);\n//       console.log(\"Initialized pointCounts:\", pointCounts);\n\n//       lastRingPoints.forEach((point, idx) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectorIndex = parseInt(bitVector, 2);\n//         if (sectorIndex >= 0 && sectorIndex < sectorsCount) {\n//           pointCounts[sectorIndex]++;\n//         } else {\n//           console.warn(`Point ${idx}: Invalid sector index ${sectorIndex} for bitVector ${bitVector}`);\n//         }\n//       });\n\n//       console.log(\"Point counts per sector:\", pointCounts);\n\n//       const minAngle = Math.PI / 180; // 1 degree minimum\n//       const totalAngle = 2 * Math.PI;\n//       const totalNonEmptyPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n//       const remainingAngle = totalAngle - (sectorsCount * minAngle);\n\n//       console.log(\"Total non-empty points:\", totalNonEmptyPoints);\n//       console.log(\"Remaining angle:\", remainingAngle);\n\n//       const sectorAngles = pointCounts.map((count, idx) => {\n//         const angle = count > 0\n//           ? minAngle + (count / totalNonEmptyPoints) * remainingAngle\n//           : minAngle;\n//         console.log(`Sector ${idx} angle: ${angle}`);\n//         return angle;\n//       });\n\n//       console.log(\"Sector angles:\", sectorAngles);\n\n//       // Propagate angles to inner rings\n//       const ringAngles = [sectorAngles];\n//       for (let i = pointsData.length - 2; i >= 0; i--) {\n//         const prevAngles = ringAngles[0];\n//         const sectorCount = Math.max(1, 2 ** (i + 1));\n//         const currAngles = new Array(sectorCount);\n//         console.log(`Propagating to ring ${i}, expected sectors: ${sectorCount}`);\n\n//         for (let j = 0; j < sectorCount; j++) {\n//           const angle1 = prevAngles[j * 2] || 0;\n//           const angle2 = prevAngles[j * 2 + 1] || 0;\n//           currAngles[j] = angle1 + angle2;\n//           console.log(`Ring ${i}, sector ${j}: ${currAngles[j]} (from ${angle1} + ${angle2})`);\n//         }\n//         ringAngles.unshift(currAngles);\n//       }\n\n//       console.log(\"Final ring angles:\", ringAngles);\n//       return ringAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           g.append(\"text\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", -outerRadius - 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"font-size\", \"16px\")\n//             .attr(\"fill\", \"red\")\n//             .attr(\"font-weight\", \"bold\")\n//             .text(ringLabels[index]);\n//         }\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const ringAngles = calculateProportionalAngles();\n//       console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n//       if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n//         console.error(\"Invalid ring angles, falling back to normal view:\", ringAngles);\n//         renderNormalView();\n//         return;\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         let currentAngle = Math.PI / 2;\n\n//         ringAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nconst calculateProportionalAngles = () => {\n  console.log(\"Starting calculateProportionalAngles...\");\n  console.log(\"pointsData:\", pointsData);\n\n  if (pointsData.length === 0) {\n    console.error(\"No points data available\");\n    return [];\n  }\n\n  const lastRing = pointsData[pointsData.length - 1];\n  const lastRingPoints = lastRing.points || [];\n  const sectorsCount = Math.max(1, 2 ** lastRing.dimensions);\n  const totalAngle = 2 * Math.PI;\n\n  // If no points in last ring, distribute angles equally\n  if (lastRingPoints.length === 0) {\n    console.warn(\"Last ring has no points, using equal angles\");\n    return pointsData.map((_, i) => {\n      const sectorCount = Math.max(1, 2 ** (i + 1));\n      return Array(sectorCount).fill(totalAngle / sectorCount);\n    });\n  }\n\n  const pointCounts = new Array(sectorsCount).fill(0);\n  lastRingPoints.forEach((point) => {\n    const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    // Normalize coordinates to binary (0 or 1) based on sign\n    const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    const sectorIndex = Math.min(parseInt(bitVector, 2), sectorsCount - 1); // Cap index\n    pointCounts[sectorIndex]++;\n  });\n\n  const minAngle = Math.PI / 180; // 1 degree\n  const totalNonEmptyPoints = Math.max(1, pointCounts.reduce((sum, count) => sum + count, 0));\n  const remainingAngle = totalAngle - sectorsCount * minAngle;\n\n  const sectorAngles = pointCounts.map((count) =>\n    count > 0 ? minAngle + (count / totalNonEmptyPoints) * remainingAngle : minAngle\n  );\n\n  // Ensure total angle is exactly 2π\n  const currentTotal = sectorAngles.reduce((sum, angle) => sum + angle, 0);\n  const correctionFactor = totalAngle / currentTotal;\n  const adjustedSectorAngles = sectorAngles.map(angle => angle * correctionFactor);\n\n  // Propagate to inner rings\n  const ringAngles = [adjustedSectorAngles];\n  for (let i = pointsData.length - 2; i >= 0; i--) {\n    const prevAngles = ringAngles[0];\n    const sectorCount = Math.max(1, 2 ** (i + 1));\n    const currAngles = new Array(sectorCount).fill(0);\n\n    for (let j = 0; j < sectorCount; j++) {\n      const angle1 = prevAngles[j * 2] || 0;\n      const angle2 = prevAngles[j * 2 + 1] || 0;\n      currAngles[j] = angle1 + angle2;\n    }\n    ringAngles.unshift(currAngles);\n  }\n\n  console.log(\"Final ring angles:\", ringAngles);\n  return ringAngles;\n};\n\nconst renderProportionalView = () => {\n  const ringAngles = calculateProportionalAngles();\n  console.log(\"Rendering proportional view with ringAngles:\", ringAngles);\n\n  if (!ringAngles || ringAngles.length !== pointsData.length || ringAngles.some(arr => !arr || !Array.isArray(arr))) {\n    console.error(\"Invalid ring angles:\", ringAngles);\n    renderNormalView(); // Fallback with explicit logging\n    return;\n  }\n\n  subspaces.forEach((key, index) => {\n    if (!ringVisibility[key]) return;\n    const innerRadius = (index / subspaces.length) * maxRadius;\n    const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n    let currentAngle = Math.PI / 2;\n\n    ringAngles[index].forEach((angle, i) => {\n      const startAngle = currentAngle;\n      const endAngle = currentAngle + angle;\n\n      g.append(\"path\")\n        .attr(\"d\", d3.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle)\n        )\n        .attr(\"fill\", getSectorColor(index, i))\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 0.5)\n        .style(\"cursor\", \"pointer\");\n\n      currentAngle = endAngle;\n    });\n\n    g.append(\"text\")\n      .attr(\"x\", 0)\n      .attr(\"y\", -outerRadius - 5)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"16px\")\n      .attr(\"fill\", \"red\")\n      .attr(\"font-weight\", \"bold\")\n      .text(ringLabels[index]);\n\n    renderPoints(index, innerRadius, outerRadius, ringAngles[index]);\n  });\n};"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}