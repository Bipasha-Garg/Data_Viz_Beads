{"ast":null,"code":"// Here points are on boundary ________________________________________\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     // Dynamically extract subspace keys\n//     const subspaceKeys = Object.keys(jsonData);\n\n//     // Set up container dimensions\n//     const container = d3.select(graphRef.current.parentNode);\n//     const width = container.node().getBoundingClientRect().width;\n//     const height = container.node().getBoundingClientRect().height;\n//     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//     const svg = d3\n//       .select(graphRef.current)\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n//       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Calculate center and square spacing\n//     const centerX = width / 2;\n//     const centerY = height / 2;\n//     const squareSpacing = 200; // Distance between consecutive squares\n\n//     const nodes = [];\n//     const links = [];\n\n//     // Function to calculate node positions on the square's perimeter\n//     const calculateSquarePerimeterPositions = (numPoints, squareIndex) => {\n//       const size = squareSpacing * (squareIndex + 1); // Square size grows with the index\n//       const positions = [];\n//       const pointsPerSide = Math.ceil(numPoints / 4);\n//       const sideLength = size;\n\n//       for (let i = 0; i < numPoints; i++) {\n//         const side = Math.floor(i / pointsPerSide); // Determine which side of the square\n//         const offset = i % pointsPerSide;\n//         let x, y;\n\n//         if (side === 0) {\n//           // Top side\n//           x = centerX - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//           y = centerY - sideLength / 2;\n//         } else if (side === 1) {\n//           // Right side\n//           x = centerX + sideLength / 2;\n//           y = centerY - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//         } else if (side === 2) {\n//           // Bottom side\n//           x = centerX + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//           y = centerY + sideLength / 2;\n//         } else {\n//           // Left side\n//           x = centerX - sideLength / 2;\n//           y = centerY + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//         }\n\n//         positions.push({ x, y });\n//       }\n//       return positions;\n//     };\n\n//     // Build hierarchical nodes and links\n//     subspaceKeys.forEach((subspace, index) => {\n//       const points = jsonData[subspace];\n//       const positions = calculateSquarePerimeterPositions(points.length, index);\n\n//       points.forEach((point, i) => {\n//         const id = `${subspace}-${i}`;\n//         const node = {\n//           id,\n//           ...point,\n//           x: positions[i].x,\n//           y: positions[i].y,\n//         };\n//         nodes.push(node);\n\n//         // Add links to the previous square\n//         if (index > 0) {\n//           links.push({\n//             source: nodes[nodes.length - points.length - i - 1].id,\n//             target: id,\n//           });\n//         }\n//       });\n//     });\n\n//     // Draw squares\n//     subspaceKeys.forEach((_, index) => {\n//       const size = squareSpacing * (index + 1);\n//       svg\n//         .append(\"rect\")\n//         .attr(\"x\", centerX - size / 2)\n//         .attr(\"y\", centerY - size / 2)\n//         .attr(\"width\", size)\n//         .attr(\"height\", size)\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke\", \"#ddd\")\n//         .attr(\"stroke-width\", 2);\n//     });\n\n//     // Draw links\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"links\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"x1\", (d) => nodes.find((node) => node.id === d.source)?.x)\n//       .attr(\"y1\", (d) => nodes.find((node) => node.id === d.source)?.y)\n//       .attr(\"x2\", (d) => nodes.find((node) => node.id === d.target)?.x)\n//       .attr(\"y2\", (d) => nodes.find((node) => node.id === d.target)?.y)\n//       .attr(\"stroke\", \"#aaa\")\n//       .attr(\"stroke-width\", 1);\n\n//     // Draw nodes\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"nodes\")\n//       .selectAll(\"circle\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"r\", 5)\n//       .attr(\"cx\", (d) => d.x)\n//       .attr(\"cy\", (d) => d.y)\n//       .attr(\"fill\", (d, i) =>\n//         i < jsonData[subspaceKeys[0]].length\n//           ? \"red\"\n//           : i < jsonData[subspaceKeys[1]].length\n//           ? \"blue\"\n//           : \"green\"\n//       )\n//       .on(\"mouseover\", (event, d) => {\n//         setHoveredCoordinates({\n//           ...d,\n//           id: d.id,\n//         });\n//       });\n\n//     // Add tooltips\n//     svg\n//       .selectAll(\"circle\")\n//       .append(\"title\")\n//       .text((d) => `ID: ${d.id}`);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n// // box mei points________________________________________\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     // Extract subspaces (keys like \"x\", \"xy\", \"xyz\") from jsonData\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width =400; // Canvas width\n//     const height =400; // Canvas height\n//     const margin = 20;\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Compute square sizes\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n//     const squareStep = maxSquareSize / (2 * subspaces.length);\n\n//     // Draw concentric squares\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\n//         \"transform\",\n//         `translate(${width / 2}, ${height / 2})` // Center alignment\n//       );\n\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize - 2 * index * squareStep;\n\n//       // Draw the square for the current subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke-width\", 1);\n\n//       // Scale for plotting points inside the current square\n//       const scaleX = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n//       const scaleY = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n\n//       // Plot the points for this subspace\n//       g.selectAll(`.point-${subspace.key}`)\n//         .data(subspace.points)\n//         .enter()\n//         .append(\"circle\")\n//         .attr(\"cx\", (d) => scaleX(d.x))\n//         .attr(\"cy\", (d) => (d.y !== undefined ? scaleY(d.y) : 0))\n//         .attr(\"r\", 4)\n//         .attr(\"fill\", \"steelblue\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 1)\n//         .append(\"title\") // Tooltip for the point\n//         .text((d) => `ID: ${d.Point_ID}`);\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with largest square and reduce size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize =\n//         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke-width\", 1);\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = (squareSize / 2) * Math.cos(angle);\n//         const y1 = (squareSize / 2) * Math.sin(angle);\n\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"gray\")\n//           .attr(\"stroke-width\", 1);\n//       }\n\n//       // Scale for plotting points\n//       const scaleX = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n//       const scaleY = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n\n//       // Plot points within their respective square\n//       g.selectAll(`.point-${subspace.key}`)\n//         .data(subspace.points)\n//         .enter()\n//         .append(\"circle\")\n//         .attr(\"cx\", (d) => scaleX(d.x))\n//         .attr(\"cy\", (d) => scaleY(d.y || 0)) // Default y = 0 if not defined\n//         .attr(\"r\", 4)\n//         .attr(\"fill\", \"steelblue\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 1)\n//         .append(\"title\")\n//         .text((d) => `ID: ${d.Point_ID}`);\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;","map":{"version":3,"names":[],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// Here points are on boundary ________________________________________\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     // Dynamically extract subspace keys\n//     const subspaceKeys = Object.keys(jsonData);\n\n//     // Set up container dimensions\n//     const container = d3.select(graphRef.current.parentNode);\n//     const width = container.node().getBoundingClientRect().width;\n//     const height = container.node().getBoundingClientRect().height;\n//     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//     const svg = d3\n//       .select(graphRef.current)\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n//       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Calculate center and square spacing\n//     const centerX = width / 2;\n//     const centerY = height / 2;\n//     const squareSpacing = 200; // Distance between consecutive squares\n\n//     const nodes = [];\n//     const links = [];\n\n//     // Function to calculate node positions on the square's perimeter\n//     const calculateSquarePerimeterPositions = (numPoints, squareIndex) => {\n//       const size = squareSpacing * (squareIndex + 1); // Square size grows with the index\n//       const positions = [];\n//       const pointsPerSide = Math.ceil(numPoints / 4);\n//       const sideLength = size;\n\n//       for (let i = 0; i < numPoints; i++) {\n//         const side = Math.floor(i / pointsPerSide); // Determine which side of the square\n//         const offset = i % pointsPerSide;\n//         let x, y;\n\n//         if (side === 0) {\n//           // Top side\n//           x = centerX - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//           y = centerY - sideLength / 2;\n//         } else if (side === 1) {\n//           // Right side\n//           x = centerX + sideLength / 2;\n//           y = centerY - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//         } else if (side === 2) {\n//           // Bottom side\n//           x = centerX + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//           y = centerY + sideLength / 2;\n//         } else {\n//           // Left side\n//           x = centerX - sideLength / 2;\n//           y = centerY + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//         }\n\n//         positions.push({ x, y });\n//       }\n//       return positions;\n//     };\n\n//     // Build hierarchical nodes and links\n//     subspaceKeys.forEach((subspace, index) => {\n//       const points = jsonData[subspace];\n//       const positions = calculateSquarePerimeterPositions(points.length, index);\n\n//       points.forEach((point, i) => {\n//         const id = `${subspace}-${i}`;\n//         const node = {\n//           id,\n//           ...point,\n//           x: positions[i].x,\n//           y: positions[i].y,\n//         };\n//         nodes.push(node);\n\n//         // Add links to the previous square\n//         if (index > 0) {\n//           links.push({\n//             source: nodes[nodes.length - points.length - i - 1].id,\n//             target: id,\n//           });\n//         }\n//       });\n//     });\n\n//     // Draw squares\n//     subspaceKeys.forEach((_, index) => {\n//       const size = squareSpacing * (index + 1);\n//       svg\n//         .append(\"rect\")\n//         .attr(\"x\", centerX - size / 2)\n//         .attr(\"y\", centerY - size / 2)\n//         .attr(\"width\", size)\n//         .attr(\"height\", size)\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke\", \"#ddd\")\n//         .attr(\"stroke-width\", 2);\n//     });\n\n//     // Draw links\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"links\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"x1\", (d) => nodes.find((node) => node.id === d.source)?.x)\n//       .attr(\"y1\", (d) => nodes.find((node) => node.id === d.source)?.y)\n//       .attr(\"x2\", (d) => nodes.find((node) => node.id === d.target)?.x)\n//       .attr(\"y2\", (d) => nodes.find((node) => node.id === d.target)?.y)\n//       .attr(\"stroke\", \"#aaa\")\n//       .attr(\"stroke-width\", 1);\n\n//     // Draw nodes\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"nodes\")\n//       .selectAll(\"circle\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"r\", 5)\n//       .attr(\"cx\", (d) => d.x)\n//       .attr(\"cy\", (d) => d.y)\n//       .attr(\"fill\", (d, i) =>\n//         i < jsonData[subspaceKeys[0]].length\n//           ? \"red\"\n//           : i < jsonData[subspaceKeys[1]].length\n//           ? \"blue\"\n//           : \"green\"\n//       )\n//       .on(\"mouseover\", (event, d) => {\n//         setHoveredCoordinates({\n//           ...d,\n//           id: d.id,\n//         });\n//       });\n\n//     // Add tooltips\n//     svg\n//       .selectAll(\"circle\")\n//       .append(\"title\")\n//       .text((d) => `ID: ${d.id}`);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n\n// // box mei points________________________________________\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     // Extract subspaces (keys like \"x\", \"xy\", \"xyz\") from jsonData\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width =400; // Canvas width\n//     const height =400; // Canvas height\n//     const margin = 20;\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Compute square sizes\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n//     const squareStep = maxSquareSize / (2 * subspaces.length);\n\n//     // Draw concentric squares\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\n//         \"transform\",\n//         `translate(${width / 2}, ${height / 2})` // Center alignment\n//       );\n\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize - 2 * index * squareStep;\n\n//       // Draw the square for the current subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke-width\", 1);\n\n//       // Scale for plotting points inside the current square\n//       const scaleX = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n//       const scaleY = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n\n//       // Plot the points for this subspace\n//       g.selectAll(`.point-${subspace.key}`)\n//         .data(subspace.points)\n//         .enter()\n//         .append(\"circle\")\n//         .attr(\"cx\", (d) => scaleX(d.x))\n//         .attr(\"cy\", (d) => (d.y !== undefined ? scaleY(d.y) : 0))\n//         .attr(\"r\", 4)\n//         .attr(\"fill\", \"steelblue\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 1)\n//         .append(\"title\") // Tooltip for the point\n//         .text((d) => `ID: ${d.Point_ID}`);\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with largest square and reduce size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize =\n//         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke-width\", 1);\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = (squareSize / 2) * Math.cos(angle);\n//         const y1 = (squareSize / 2) * Math.sin(angle);\n\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"gray\")\n//           .attr(\"stroke-width\", 1);\n//       }\n\n//       // Scale for plotting points\n//       const scaleX = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n//       const scaleY = d3\n//         .scaleLinear()\n//         .domain([-1, 1])\n//         .range([-squareSize / 2, squareSize / 2]);\n\n//       // Plot points within their respective square\n//       g.selectAll(`.point-${subspace.key}`)\n//         .data(subspace.points)\n//         .enter()\n//         .append(\"circle\")\n//         .attr(\"cx\", (d) => scaleX(d.x))\n//         .attr(\"cy\", (d) => scaleY(d.y || 0)) // Default y = 0 if not defined\n//         .attr(\"r\", 4)\n//         .attr(\"fill\", \"steelblue\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 1)\n//         .append(\"title\")\n//         .text((d) => `ID: ${d.Point_ID}`);\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}