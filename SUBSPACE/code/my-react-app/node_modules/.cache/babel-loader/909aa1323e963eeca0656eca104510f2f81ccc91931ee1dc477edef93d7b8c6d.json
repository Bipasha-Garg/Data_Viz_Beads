{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n// //     const calculateSectorPointCounts = () => {\n// //       const sectorCounts = subspaces.map((key, index) => {\n// //         const sectors = 2 ** (index + 1);\n// //         return Array(sectors).fill(0);\n// //       });\n\n// //       subspaces.forEach((key, index) => {\n// //         const points = pointsData[index].points;\n// //         const sectors = 2 ** (index + 1);\n\n// //         points.forEach(point => {\n// //           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n// //           sectorCounts[index][bitVectorIndex]++;\n// //         });\n// //       });\n\n// //       return sectorCounts;\n// //     };\n\n// //     const calculateRecursiveSectorAngles = () => {\n// //       const sectorCounts = calculateSectorPointCounts();\n// //       const sectorAngles = [];\n// //       const rotationOffset = Math.PI / 2;\n// //       const lastRingIndex = subspaces.length - 1;\n// //       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n// //         const sectors = 2 ** (ringIndex + 1);\n// //         const totalPoints = pointsData[ringIndex].points.length || 1; \n// //         const minAngle = 0.05 * (Math.PI * 2) / sectors; \n// //         if (ringIndex === lastRingIndex) {\n// //           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n// //           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n// //           const angles = sectorCounts[ringIndex].map(count => {\n// //             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n// //           });\n\n// //           sectorAngles[ringIndex] = angles;\n// //         }\n// //         else {\n// //           const outerAngles = sectorAngles[ringIndex + 1];\n// //           const innerSectors = 2 ** (ringIndex + 1);\n// //           const outerSectors = 2 ** (ringIndex + 2);\n// //           const ratio = outerSectors / innerSectors;\n\n// //           const angles = [];\n// //           for (let i = 0; i < innerSectors; i++) {\n// //             let sumAngle = 0;\n// //             for (let j = 0; j < ratio; j++) {\n// //               const outerIdx = i * ratio + j;\n// //               sumAngle += outerAngles[outerIdx];\n// //             }\n// //             angles.push(sumAngle);\n// //           }\n\n// //           sectorAngles[ringIndex] = angles;\n// //         }\n// //       }\n\n// //       return sectorAngles;\n// //     };\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n// //         }\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n// //     const renderProportionalView = () => {\n// //       const sectorAngles = calculateRecursiveSectorAngles();\n// //       const rotationOffset = Math.PI / 2;\n\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n// //         // Draw sectors with their proportional angles\n// //         let currentAngle = rotationOffset;\n// //         sectorAngles[index].forEach((angle, i) => {\n// //           const startAngle = currentAngle;\n// //           const endAngle = currentAngle + angle;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           currentAngle = endAngle;\n// //         });\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n// //       });\n// //     };\n\n// //     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n// //       const rotationOffset = 0;\n// //       const anglePerSector = 2 * Math.PI / sectors;\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n// //         const centerAngle = startAngle + (anglePerSector / 2);\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         storePointPosition(point, x, y, index);\n// //         drawPoint(point, x, y, index);\n// //       });\n// //     };\n\n// //     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n// //       const rotationOffset = 0;\n// //       const pointsBySector = {};\n// //       pointsData[index].points.forEach(point => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const sectors = 2 ** (index + 1);\n// //         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         if (!pointsBySector[sectorIndex]) {\n// //           pointsBySector[sectorIndex] = [];\n// //         }\n// //         pointsBySector[sectorIndex].push(point);\n// //       });\n\n// //       let currentAngle = rotationOffset;\n// //       const startAngles = sectorAngles.map((angle, i) => {\n// //         const startAngle = currentAngle;\n// //         currentAngle += angle;\n// //         return startAngle;\n// //       });\n\n// //       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n// //         const sectorIdx = parseInt(sectorIndex);\n// //         const startAngle = startAngles[sectorIdx];\n// //         const sectorAngle = sectorAngles[sectorIdx];\n// //         const centerAngle = startAngle + (sectorAngle / 2);\n\n// //         points.forEach((point, i) => {\n// //           const totalPointsInSector = points.length;\n// //           const clusterFactor = 0.9;\n// //           const overlapRadius =\n// //             innerRadius +\n// //             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n// //             Math.max(1, totalPointsInSector);\n\n// //           const x = overlapRadius * Math.cos(centerAngle);\n// //           const y = overlapRadius * Math.sin(centerAngle);\n\n// //           storePointPosition(point, x, y, index);\n// //           drawPoint(point, x, y, index);\n// //         });\n// //       });\n// //     };\n\n// //     const storePointPosition = (point, x, y, index) => {\n// //       point.Point_ID.forEach((id) => {\n// //         if (!pointPositions[id]) {\n// //           pointPositions[id] = [];\n// //         }\n// //         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //       });\n// //     };\n\n// //     const drawPoint = (point, x, y, index) => {\n// //       g.append(\"circle\")\n// //         .attr(\"cx\", x)\n// //         .attr(\"cy\", y)\n// //         .attr(\"r\", 3)\n// //         .attr(\"fill\", \"black\")\n// //         .attr(\"stroke\", \"white\")\n// //         .attr(\"stroke-width\", 0.5)\n// //         .style(\"pointer-events\", \"visible\")\n// //         .on(\"mouseover\", (event) => {\n// //           const pointIds = point.Point_ID.join(\", \");\n// //           let associatedLabels = [];\n// //           if (labelsData && labelsData.labels) {\n// //             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                 associatedLabels.push(label);\n// //               }\n// //             });\n// //           }\n// //           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //           tooltip\n// //             .style(\"visibility\", \"visible\")\n// //             .html(\n// //               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //             );\n// //           setHoveredCoordinates({ ...point, label: labelText });\n// //         })\n// //         .on(\"mousemove\", (event) => {\n// //           tooltip\n// //             .style(\"top\", event.pageY + 10 + \"px\")\n// //             .style(\"left\", event.pageX + 10 + \"px\");\n// //         })\n// //         .on(\"mouseout\", () => {\n// //           tooltip.style(\"visibility\", \"hidden\");\n// //           setHoveredCoordinates(null);\n// //         });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } else if (viewMode === \"proportional\") {\n// //       renderProportionalView();\n// //     }\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.7)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const stripRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     const calculateSectorPointCounts = () => {\n//       const sectorCounts = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         return Array(sectors).fill(0);\n//       });\n\n//       subspaces.forEach((key, index) => {\n//         const points = pointsData[index].points;\n//         const sectors = 2 ** (index + 1);\n\n//         points.forEach(point => {\n//           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//           sectorCounts[index][bitVectorIndex]++;\n//         });\n//       });\n\n//       return sectorCounts;\n//     };\n\n//     const calculateRecursiveSectorAngles = () => {\n//       const sectorCounts = calculateSectorPointCounts();\n//       const sectorAngles = [];\n//       const rotationOffset = Math.PI / 2;\n//       const lastRingIndex = subspaces.length - 1;\n//       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n//         const sectors = 2 ** (ringIndex + 1);\n//         const totalPoints = pointsData[ringIndex].points.length || 1;\n//         const minAngle = 0.05 * (Math.PI * 2) / sectors;\n//         if (ringIndex === lastRingIndex) {\n//           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n//           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n//           const angles = sectorCounts[ringIndex].map(count => {\n//             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n//           });\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//         else {\n//           const outerAngles = sectorAngles[ringIndex + 1];\n//           const innerSectors = 2 ** (ringIndex + 1);\n//           const outerSectors = 2 ** (ringIndex + 2);\n//           const ratio = outerSectors / innerSectors;\n\n//           const angles = [];\n//           for (let i = 0; i < innerSectors; i++) {\n//             let sumAngle = 0;\n//             for (let j = 0; j < ratio; j++) {\n//               const outerIdx = i * ratio + j;\n//               sumAngle += outerAngles[outerIdx];\n//             }\n//             angles.push(sumAngle);\n//           }\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//       }\n\n//       return sectorAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const sectorAngles = calculateRecursiveSectorAngles();\n//       const rotationOffset = Math.PI / 2;\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n//         let currentAngle = rotationOffset;\n//         sectorAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n//       });\n//     };\n\n//     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n//       const rotationOffset = 0;\n//       const anglePerSector = 2 * Math.PI / sectors;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n//         const centerAngle = startAngle + (anglePerSector / 2);\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         storePointPosition(point, x, y, index);\n//         drawPoint(point, x, y, index);\n//       });\n//     };\n\n//     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n//       const rotationOffset = 0;\n//       const pointsBySector = {};\n//       pointsData[index].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectors = 2 ** (index + 1);\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       let currentAngle = rotationOffset;\n//       const startAngles = sectorAngles.map((angle, i) => {\n//         const startAngle = currentAngle;\n//         currentAngle += angle;\n//         return startAngle;\n//       });\n\n//       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n//         const sectorIdx = parseInt(sectorIndex);\n//         const startAngle = startAngles[sectorIdx];\n//         const sectorAngle = sectorAngles[sectorIdx];\n//         const centerAngle = startAngle + (sectorAngle / 2);\n\n//         points.forEach((point, i) => {\n//           const totalPointsInSector = points.length;\n//           const clusterFactor = 0.9;\n//           const overlapRadius =\n//             innerRadius +\n//             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n//             Math.max(1, totalPointsInSector);\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n\n//           storePointPosition(point, x, y, index);\n//           drawPoint(point, x, y, index);\n//         });\n//       });\n//     };\n\n//     const storePointPosition = (point, x, y, index) => {\n//       point.Point_ID.forEach((id) => {\n//         if (!pointPositions[id]) {\n//           pointPositions[id] = [];\n//         }\n//         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//       });\n//     };\n\n//     const drawPoint = (point, x, y, index) => {\n//       g.append(\"circle\")\n//         .attr(\"cx\", x)\n//         .attr(\"cy\", y)\n//         .attr(\"r\", 3)\n//         .attr(\"fill\", \"black\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 0.5)\n//         .style(\"pointer-events\", \"visible\")\n//         .on(\"mouseover\", (event) => {\n//           const pointIds = point.Point_ID.join(\", \");\n//           let associatedLabels = [];\n//           if (labelsData && labelsData.labels) {\n//             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                 associatedLabels.push(label);\n//               }\n//             });\n//           }\n//           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//           tooltip\n//             .style(\"visibility\", \"visible\")\n//             .html(\n//               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//             );\n//           setHoveredCoordinates({ ...point, label: labelText });\n//         })\n//         .on(\"mousemove\", (event) => {\n//           tooltip\n//             .style(\"top\", event.pageY + 10 + \"px\")\n//             .style(\"left\", event.pageX + 10 + \"px\");\n//         })\n//         .on(\"mouseout\", () => {\n//           tooltip.style(\"visibility\", \"hidden\");\n//           setHoveredCoordinates(null);\n//         });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.7)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     // Add strip visualization for the last ring\n//     const strip = d3.select(stripRef.current);\n//     strip.selectAll(\"*\").remove();\n\n//     const lastRingIndex = subspaces.length - 1;\n//     const lastRingKey = subspaces[lastRingIndex];\n\n//     if (ringVisibility[lastRingKey]) {\n//       const stripWidth = 800;\n//       const stripHeight = 200;\n//       const stripMargin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//       const stripG = strip\n//         .attr(\"width\", stripWidth)\n//         .attr(\"height\", stripHeight)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n//       const sectors = 2 ** (lastRingIndex + 1);\n//       const sectorWidth = (stripWidth - stripMargin.left - stripMargin.right) / sectors;\n//       const availableHeight = stripHeight - stripMargin.top - stripMargin.bottom;\n\n//       // Group points by sector\n//       const pointsBySector = {};\n//       pointsData[lastRingIndex].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       // Draw sectors in the strip\n//       for (let i = 0; i < sectors; i++) {\n//         const sectorX = i * sectorWidth;\n\n//         // Draw sector background\n//         stripG.append(\"rect\")\n//           .attr(\"x\", sectorX)\n//           .attr(\"y\", 0)\n//           .attr(\"width\", sectorWidth)\n//           .attr(\"height\", availableHeight)\n//           .attr(\"fill\", getSectorColor(lastRingIndex, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         const sectorPoints = pointsBySector[i] || [];\n//         const numPoints = sectorPoints.length;\n\n//         if (numPoints > 0) {\n//           // Calculate min and max values for this sector\n//           const values = sectorPoints.map(point => {\n//             const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//             return coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n//           });\n\n//           const minValue = Math.min(...values);\n//           const maxValue = Math.max(...values);\n//           const valueRange = maxValue - minValue || 1; // Avoid division by zero\n\n//           // Draw horizontal lines for each point\n//           const lineSpacing = availableHeight / (numPoints + 1);\n\n//           sectorPoints.forEach((point, j) => {\n//             const y = (j + 1) * lineSpacing;\n\n//             // Draw the horizontal line\n//             stripG.append(\"line\")\n//               .attr(\"x1\", sectorX)\n//               .attr(\"y1\", y)\n//               .attr(\"x2\", sectorX + sectorWidth)\n//               .attr(\"y2\", y)\n//               .attr(\"stroke\", \"#ddd\")\n//               .attr(\"stroke-width\", 1);\n\n//             // Calculate point position based on its value\n//             const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//             const value = coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n//             const normalizedValue = (value - minValue) / valueRange;\n//             const x = sectorX + normalizedValue * sectorWidth;\n\n//             // Draw the point\n//             stripG.append(\"circle\")\n//               .attr(\"cx\", x)\n//               .attr(\"cy\", y)\n//               .attr(\"r\", 3)\n//               .attr(\"fill\", \"black\")\n//               .attr(\"stroke\", \"white\")\n//               .attr(\"stroke-width\", 0.5)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 const pointIds = point.Point_ID.join(\", \");\n//                 let associatedLabels = [];\n//                 if (labelsData && labelsData.labels) {\n//                   Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                     if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                       associatedLabels.push(label);\n//                     }\n//                   });\n//                 }\n//                 const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(\n//                     `Point_IDs: ${pointIds}<br>Value: ${value.toFixed(2)}<br>Sector: ${i}<br>Label: ${labelText}`\n//                   );\n//                 setHoveredCoordinates({ ...point, label: labelText });\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//                 setHoveredCoordinates(null);\n//               });\n//           });\n//         }\n\n//         // Add sector label\n//         stripG.append(\"text\")\n//           .attr(\"x\", sectorX + sectorWidth / 2)\n//           .attr(\"y\", availableHeight + 15)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .text(`Sector ${i}`);\n//       }\n\n//       // Add title for the strip\n//       stripG.append(\"text\")\n//         .attr(\"x\", (stripWidth - stripMargin.left - stripMargin.right) / 2)\n//         .attr(\"y\", -5)\n//         .attr(\"text-anchor\", \"middle\")\n//         .attr(\"font-size\", \"16px\")\n//         .attr(\"font-weight\", \"bold\")\n//         .text(`Linear Strip Visualization - Ring ${ringLabels[lastRingIndex]}`);\n//     }\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//       <svg ref={stripRef} style={{ width: \"100%\", height: \"200px\", marginTop: \"20px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const stripRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const calculateSectorPointCounts = () => {\n      const sectorCounts = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        return Array(sectors).fill(0);\n      });\n      subspaces.forEach((key, index) => {\n        const points = pointsData[index].points;\n        const sectors = 2 ** (index + 1);\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n      return sectorCounts;\n    };\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const lastRingIndex = subspaces.length - 1;\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const sectors = 2 ** (ringIndex + 1);\n        const totalPoints = pointsData[ringIndex].points.length || 1;\n        const minAngle = 0.05 * (Math.PI * 2) / sectors;\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const remainingAngle = 2 * Math.PI - minAngle * emptySectors;\n          const angles = sectorCounts[ringIndex].map(count => {\n            return count === 0 ? minAngle : count / totalPoints * remainingAngle;\n          });\n          sectorAngles[ringIndex] = angles;\n        } else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** (ringIndex + 1);\n          const outerSectors = 2 ** (ringIndex + 2);\n          const ratio = outerSectors / innerSectors;\n          const angles = [];\n          for (let i = 0; i < innerSectors; i++) {\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx];\n            }\n            angles.push(sumAngle);\n          }\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n      return sectorAngles;\n    };\n\n    // Function to get the sector just above 3 o'clock\n    const getStartingSector = totalSectors => {\n      // For a circle with sectors starting from a fixed position,\n      // we need to identify which sector is just above 3 o'clock going anticlockwise\n      // 3 o'clock is at angle 0, going anticlockwise means negative angles\n      // Each sector spans an angle of 2π/totalSectors\n      const sectorAngle = 2 * Math.PI / totalSectors;\n\n      // Find the sector that contains the point just above 3 o'clock (small negative angle)\n      // We want the sector that would be at approximately -0.1 radians (slightly above 3 o'clock)\n      const targetAngle = -0.1;\n      const sectorIndex = Math.floor((targetAngle + 2 * Math.PI) % (2 * Math.PI) / sectorAngle);\n      return sectorIndex;\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n\n        // Calculate rotation offset based on the desired starting sector\n        const startingSector = getStartingSector(sectors);\n        const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n        for (let i = 0; i < sectors; i++) {\n          // Adjust for anticlockwise ordering\n          const adjustedIndex = sectors - i - 1;\n          const startAngle = 2 * Math.PI * adjustedIndex / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (adjustedIndex + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n\n        // Calculate rotation offset based on the desired starting sector\n        const startingSector = getStartingSector(sectors);\n        const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n        let currentAngle = rotationOffset;\n        // Render anticlockwise\n        for (let i = sectors - 1; i >= 0; i--) {\n          const angle = sectorAngles[index][i];\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, sectors - 1 - i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n      });\n    };\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const startingSector = getStartingSector(sectors);\n      const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n      const anglePerSector = 2 * Math.PI / sectors;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        // Adjust for anticlockwise ordering\n        const adjustedIndex = sectors - bitVectorIndex - 1;\n        const startAngle = anglePerSector * adjustedIndex + rotationOffset;\n        const centerAngle = startAngle + anglePerSector / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const sectors = 2 ** (index + 1);\n      const startingSector = getStartingSector(sectors);\n      const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n      const pointsBySector = {};\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n      let currentAngle = rotationOffset;\n      const startAngles = [];\n      // Calculate anticlockwise angles\n      for (let i = sectors - 1; i >= 0; i--) {\n        startAngles[i] = currentAngle;\n        currentAngle += sectorAngles[index][i];\n      }\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const adjustedIdx = sectors - 1 - sectorIdx;\n        const startAngle = startAngles[adjustedIdx];\n        const sectorAngle = sectorAngles[index][sectorIdx];\n        const centerAngle = startAngle + sectorAngle / 2;\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector)) / Math.max(1, totalPointsInSector);\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n    const storePointPosition = (point, x, y, index) => {\n      point.Point_ID.forEach(id => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({\n          x,\n          y,\n          point,\n          subspaceId: pointsData[index].key\n        });\n      });\n    };\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n        const pointIds = point.Point_ID.join(\", \");\n        let associatedLabels = [];\n        if (labelsData && labelsData.labels) {\n          Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n            if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n              associatedLabels.push(label);\n            }\n          });\n        }\n        const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n        tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n        setHoveredCoordinates({\n          ...point,\n          label: labelText\n        });\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.style(\"visibility\", \"hidden\");\n        setHoveredCoordinates(null);\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.7).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    // Add strip visualization for the last ring\n    const strip = d3.select(stripRef.current);\n    strip.selectAll(\"*\").remove();\n    const lastRingIndex = subspaces.length - 1;\n    const lastRingKey = subspaces[lastRingIndex];\n    if (ringVisibility[lastRingKey]) {\n      const stripWidth = 800;\n      const stripHeight = 200;\n      const stripMargin = {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      };\n      const stripG = strip.attr(\"width\", stripWidth).attr(\"height\", stripHeight).append(\"g\").attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n      const sectors = 2 ** (lastRingIndex + 1);\n      const sectorWidth = (stripWidth - stripMargin.left - stripMargin.right) / sectors;\n      const availableHeight = stripHeight - stripMargin.top - stripMargin.bottom;\n\n      // Group points by sector\n      const pointsBySector = {};\n      pointsData[lastRingIndex].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n\n      // Calculate the starting sector for the strip\n      const startingSector = getStartingSector(sectors);\n\n      // Draw sectors in the strip, starting from the correct sector and going anticlockwise\n      for (let i = 0; i < sectors; i++) {\n        // Calculate the original sector index based on anticlockwise ordering\n        const originalSectorIndex = (startingSector + i) % sectors;\n        const sectorX = i * sectorWidth;\n\n        // Draw sector background\n        stripG.append(\"rect\").attr(\"x\", sectorX).attr(\"y\", 0).attr(\"width\", sectorWidth).attr(\"height\", availableHeight).attr(\"fill\", getSectorColor(lastRingIndex, originalSectorIndex)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n        const sectorPoints = pointsBySector[originalSectorIndex] || [];\n        const numPoints = sectorPoints.length;\n        if (numPoints > 0) {\n          // Calculate min and max values for this sector\n          const values = sectorPoints.map(point => {\n            const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n            return coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n          });\n          const minValue = Math.min(...values);\n          const maxValue = Math.max(...values);\n          const valueRange = maxValue - minValue || 1; // Avoid division by zero\n\n          // Draw horizontal lines for each point\n          const lineSpacing = availableHeight / (numPoints + 1);\n          sectorPoints.forEach((point, j) => {\n            const y = (j + 1) * lineSpacing;\n\n            // Draw the horizontal line\n            stripG.append(\"line\").attr(\"x1\", sectorX).attr(\"y1\", y).attr(\"x2\", sectorX + sectorWidth).attr(\"y2\", y).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1);\n\n            // Calculate point position based on its value\n            const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n            const value = coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n            const normalizedValue = (value - minValue) / valueRange;\n            const x = sectorX + normalizedValue * sectorWidth;\n\n            // Draw the point\n            stripG.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n              const pointIds = point.Point_ID.join(\", \");\n              let associatedLabels = [];\n              if (labelsData && labelsData.labels) {\n                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                  if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                    associatedLabels.push(label);\n                  }\n                });\n              }\n              const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n              tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Value: ${value.toFixed(2)}<br>Sector: ${originalSectorIndex}<br>Label: ${labelText}`);\n              setHoveredCoordinates({\n                ...point,\n                label: labelText\n              });\n            }).on(\"mousemove\", event => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            }).on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n              setHoveredCoordinates(null);\n            });\n          });\n        }\n\n        // Add sector label\n        stripG.append(\"text\").attr(\"x\", sectorX + sectorWidth / 2).attr(\"y\", availableHeight + 15).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").text(`Sector ${originalSectorIndex}`);\n      }\n\n      // Add title for the strip\n      stripG.append(\"text\").attr(\"x\", (stripWidth - stripMargin.left - stripMargin.right) / 2).attr(\"y\", -5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"font-weight\", \"bold\").text(`Linear Strip Visualization - Ring ${ringLabels[lastRingIndex]}`);\n    }\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1568,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1556,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1579,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: stripRef,\n      style: {\n        width: \"100%\",\n        height: \"200px\",\n        marginTop: \"20px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1580,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1555,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"Lnq4kaJf8FClvngoFHBjv0qR1/w=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","stripRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateSectorPointCounts","sectorCounts","sectors","fill","forEach","point","pointData","entries","filter","bitVector","coord","join","bitVectorIndex","parseInt","calculateRecursiveSectorAngles","sectorAngles","lastRingIndex","ringIndex","totalPoints","minAngle","PI","emptySectors","count","remainingAngle","angles","outerAngles","innerSectors","outerSectors","ratio","sumAngle","j","outerIdx","push","getStartingSector","totalSectors","sectorAngle","targetAngle","floor","renderNormalView","innerRadius","outerRadius","startingSector","rotationOffset","adjustedIndex","startAngle","endAngle","arc","text","renderPointsNormal","renderProportionalView","currentAngle","angle","renderPointsProportional","anglePerSector","centerAngle","clusterFactor","overlapRadius","x","cos","y","sin","storePointPosition","drawPoint","pointsBySector","startAngles","sectorIdx","adjustedIdx","totalPointsInSector","max","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","zoom","transform","call","strip","lastRingKey","stripWidth","stripHeight","stripMargin","top","right","bottom","left","stripG","sectorWidth","availableHeight","originalSectorIndex","sectorX","sectorPoints","numPoints","values","coords","reduce","sum","abs","minValue","maxValue","valueRange","lineSpacing","value","normalizedValue","display","flexDirection","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","marginTop","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n// //     const calculateSectorPointCounts = () => {\n// //       const sectorCounts = subspaces.map((key, index) => {\n// //         const sectors = 2 ** (index + 1);\n// //         return Array(sectors).fill(0);\n// //       });\n\n// //       subspaces.forEach((key, index) => {\n// //         const points = pointsData[index].points;\n// //         const sectors = 2 ** (index + 1);\n\n// //         points.forEach(point => {\n// //           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n// //           sectorCounts[index][bitVectorIndex]++;\n// //         });\n// //       });\n\n// //       return sectorCounts;\n// //     };\n\n// //     const calculateRecursiveSectorAngles = () => {\n// //       const sectorCounts = calculateSectorPointCounts();\n// //       const sectorAngles = [];\n// //       const rotationOffset = Math.PI / 2;\n// //       const lastRingIndex = subspaces.length - 1;\n// //       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n// //         const sectors = 2 ** (ringIndex + 1);\n// //         const totalPoints = pointsData[ringIndex].points.length || 1; \n// //         const minAngle = 0.05 * (Math.PI * 2) / sectors; \n// //         if (ringIndex === lastRingIndex) {\n// //           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n// //           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n// //           const angles = sectorCounts[ringIndex].map(count => {\n// //             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n// //           });\n\n// //           sectorAngles[ringIndex] = angles;\n// //         }\n// //         else {\n// //           const outerAngles = sectorAngles[ringIndex + 1];\n// //           const innerSectors = 2 ** (ringIndex + 1);\n// //           const outerSectors = 2 ** (ringIndex + 2);\n// //           const ratio = outerSectors / innerSectors;\n\n// //           const angles = [];\n// //           for (let i = 0; i < innerSectors; i++) {\n// //             let sumAngle = 0;\n// //             for (let j = 0; j < ratio; j++) {\n// //               const outerIdx = i * ratio + j;\n// //               sumAngle += outerAngles[outerIdx];\n// //             }\n// //             angles.push(sumAngle);\n// //           }\n\n// //           sectorAngles[ringIndex] = angles;\n// //         }\n// //       }\n\n// //       return sectorAngles;\n// //     };\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n// //         }\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n// //     const renderProportionalView = () => {\n// //       const sectorAngles = calculateRecursiveSectorAngles();\n// //       const rotationOffset = Math.PI / 2;\n\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n// //         // Draw sectors with their proportional angles\n// //         let currentAngle = rotationOffset;\n// //         sectorAngles[index].forEach((angle, i) => {\n// //           const startAngle = currentAngle;\n// //           const endAngle = currentAngle + angle;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           currentAngle = endAngle;\n// //         });\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n// //       });\n// //     };\n\n// //     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n// //       const rotationOffset = 0;\n// //       const anglePerSector = 2 * Math.PI / sectors;\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n// //         const centerAngle = startAngle + (anglePerSector / 2);\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         storePointPosition(point, x, y, index);\n// //         drawPoint(point, x, y, index);\n// //       });\n// //     };\n\n// //     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n// //       const rotationOffset = 0;\n// //       const pointsBySector = {};\n// //       pointsData[index].points.forEach(point => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const sectors = 2 ** (index + 1);\n// //         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         if (!pointsBySector[sectorIndex]) {\n// //           pointsBySector[sectorIndex] = [];\n// //         }\n// //         pointsBySector[sectorIndex].push(point);\n// //       });\n\n// //       let currentAngle = rotationOffset;\n// //       const startAngles = sectorAngles.map((angle, i) => {\n// //         const startAngle = currentAngle;\n// //         currentAngle += angle;\n// //         return startAngle;\n// //       });\n\n// //       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n// //         const sectorIdx = parseInt(sectorIndex);\n// //         const startAngle = startAngles[sectorIdx];\n// //         const sectorAngle = sectorAngles[sectorIdx];\n// //         const centerAngle = startAngle + (sectorAngle / 2);\n\n// //         points.forEach((point, i) => {\n// //           const totalPointsInSector = points.length;\n// //           const clusterFactor = 0.9;\n// //           const overlapRadius =\n// //             innerRadius +\n// //             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n// //             Math.max(1, totalPointsInSector);\n\n// //           const x = overlapRadius * Math.cos(centerAngle);\n// //           const y = overlapRadius * Math.sin(centerAngle);\n\n// //           storePointPosition(point, x, y, index);\n// //           drawPoint(point, x, y, index);\n// //         });\n// //       });\n// //     };\n\n// //     const storePointPosition = (point, x, y, index) => {\n// //       point.Point_ID.forEach((id) => {\n// //         if (!pointPositions[id]) {\n// //           pointPositions[id] = [];\n// //         }\n// //         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //       });\n// //     };\n\n// //     const drawPoint = (point, x, y, index) => {\n// //       g.append(\"circle\")\n// //         .attr(\"cx\", x)\n// //         .attr(\"cy\", y)\n// //         .attr(\"r\", 3)\n// //         .attr(\"fill\", \"black\")\n// //         .attr(\"stroke\", \"white\")\n// //         .attr(\"stroke-width\", 0.5)\n// //         .style(\"pointer-events\", \"visible\")\n// //         .on(\"mouseover\", (event) => {\n// //           const pointIds = point.Point_ID.join(\", \");\n// //           let associatedLabels = [];\n// //           if (labelsData && labelsData.labels) {\n// //             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                 associatedLabels.push(label);\n// //               }\n// //             });\n// //           }\n// //           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //           tooltip\n// //             .style(\"visibility\", \"visible\")\n// //             .html(\n// //               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //             );\n// //           setHoveredCoordinates({ ...point, label: labelText });\n// //         })\n// //         .on(\"mousemove\", (event) => {\n// //           tooltip\n// //             .style(\"top\", event.pageY + 10 + \"px\")\n// //             .style(\"left\", event.pageX + 10 + \"px\");\n// //         })\n// //         .on(\"mouseout\", () => {\n// //           tooltip.style(\"visibility\", \"hidden\");\n// //           setHoveredCoordinates(null);\n// //         });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } else if (viewMode === \"proportional\") {\n// //       renderProportionalView();\n// //     }\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.7)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const stripRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     const calculateSectorPointCounts = () => {\n//       const sectorCounts = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         return Array(sectors).fill(0);\n//       });\n\n//       subspaces.forEach((key, index) => {\n//         const points = pointsData[index].points;\n//         const sectors = 2 ** (index + 1);\n\n//         points.forEach(point => {\n//           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//           sectorCounts[index][bitVectorIndex]++;\n//         });\n//       });\n\n//       return sectorCounts;\n//     };\n\n//     const calculateRecursiveSectorAngles = () => {\n//       const sectorCounts = calculateSectorPointCounts();\n//       const sectorAngles = [];\n//       const rotationOffset = Math.PI / 2;\n//       const lastRingIndex = subspaces.length - 1;\n//       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n//         const sectors = 2 ** (ringIndex + 1);\n//         const totalPoints = pointsData[ringIndex].points.length || 1;\n//         const minAngle = 0.05 * (Math.PI * 2) / sectors;\n//         if (ringIndex === lastRingIndex) {\n//           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n//           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n//           const angles = sectorCounts[ringIndex].map(count => {\n//             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n//           });\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//         else {\n//           const outerAngles = sectorAngles[ringIndex + 1];\n//           const innerSectors = 2 ** (ringIndex + 1);\n//           const outerSectors = 2 ** (ringIndex + 2);\n//           const ratio = outerSectors / innerSectors;\n\n//           const angles = [];\n//           for (let i = 0; i < innerSectors; i++) {\n//             let sumAngle = 0;\n//             for (let j = 0; j < ratio; j++) {\n//               const outerIdx = i * ratio + j;\n//               sumAngle += outerAngles[outerIdx];\n//             }\n//             angles.push(sumAngle);\n//           }\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//       }\n\n//       return sectorAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const sectorAngles = calculateRecursiveSectorAngles();\n//       const rotationOffset = Math.PI / 2;\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n//         let currentAngle = rotationOffset;\n//         sectorAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n//       });\n//     };\n\n//     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n//       const rotationOffset = 0;\n//       const anglePerSector = 2 * Math.PI / sectors;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n//         const centerAngle = startAngle + (anglePerSector / 2);\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         storePointPosition(point, x, y, index);\n//         drawPoint(point, x, y, index);\n//       });\n//     };\n\n//     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n//       const rotationOffset = 0;\n//       const pointsBySector = {};\n//       pointsData[index].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectors = 2 ** (index + 1);\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       let currentAngle = rotationOffset;\n//       const startAngles = sectorAngles.map((angle, i) => {\n//         const startAngle = currentAngle;\n//         currentAngle += angle;\n//         return startAngle;\n//       });\n\n//       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n//         const sectorIdx = parseInt(sectorIndex);\n//         const startAngle = startAngles[sectorIdx];\n//         const sectorAngle = sectorAngles[sectorIdx];\n//         const centerAngle = startAngle + (sectorAngle / 2);\n\n//         points.forEach((point, i) => {\n//           const totalPointsInSector = points.length;\n//           const clusterFactor = 0.9;\n//           const overlapRadius =\n//             innerRadius +\n//             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n//             Math.max(1, totalPointsInSector);\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n\n//           storePointPosition(point, x, y, index);\n//           drawPoint(point, x, y, index);\n//         });\n//       });\n//     };\n\n//     const storePointPosition = (point, x, y, index) => {\n//       point.Point_ID.forEach((id) => {\n//         if (!pointPositions[id]) {\n//           pointPositions[id] = [];\n//         }\n//         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//       });\n//     };\n\n//     const drawPoint = (point, x, y, index) => {\n//       g.append(\"circle\")\n//         .attr(\"cx\", x)\n//         .attr(\"cy\", y)\n//         .attr(\"r\", 3)\n//         .attr(\"fill\", \"black\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 0.5)\n//         .style(\"pointer-events\", \"visible\")\n//         .on(\"mouseover\", (event) => {\n//           const pointIds = point.Point_ID.join(\", \");\n//           let associatedLabels = [];\n//           if (labelsData && labelsData.labels) {\n//             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                 associatedLabels.push(label);\n//               }\n//             });\n//           }\n//           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//           tooltip\n//             .style(\"visibility\", \"visible\")\n//             .html(\n//               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//             );\n//           setHoveredCoordinates({ ...point, label: labelText });\n//         })\n//         .on(\"mousemove\", (event) => {\n//           tooltip\n//             .style(\"top\", event.pageY + 10 + \"px\")\n//             .style(\"left\", event.pageX + 10 + \"px\");\n//         })\n//         .on(\"mouseout\", () => {\n//           tooltip.style(\"visibility\", \"hidden\");\n//           setHoveredCoordinates(null);\n//         });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.7)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     // Add strip visualization for the last ring\n//     const strip = d3.select(stripRef.current);\n//     strip.selectAll(\"*\").remove();\n\n//     const lastRingIndex = subspaces.length - 1;\n//     const lastRingKey = subspaces[lastRingIndex];\n\n//     if (ringVisibility[lastRingKey]) {\n//       const stripWidth = 800;\n//       const stripHeight = 200;\n//       const stripMargin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//       const stripG = strip\n//         .attr(\"width\", stripWidth)\n//         .attr(\"height\", stripHeight)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n//       const sectors = 2 ** (lastRingIndex + 1);\n//       const sectorWidth = (stripWidth - stripMargin.left - stripMargin.right) / sectors;\n//       const availableHeight = stripHeight - stripMargin.top - stripMargin.bottom;\n\n//       // Group points by sector\n//       const pointsBySector = {};\n//       pointsData[lastRingIndex].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       // Draw sectors in the strip\n//       for (let i = 0; i < sectors; i++) {\n//         const sectorX = i * sectorWidth;\n\n//         // Draw sector background\n//         stripG.append(\"rect\")\n//           .attr(\"x\", sectorX)\n//           .attr(\"y\", 0)\n//           .attr(\"width\", sectorWidth)\n//           .attr(\"height\", availableHeight)\n//           .attr(\"fill\", getSectorColor(lastRingIndex, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         const sectorPoints = pointsBySector[i] || [];\n//         const numPoints = sectorPoints.length;\n\n//         if (numPoints > 0) {\n//           // Calculate min and max values for this sector\n//           const values = sectorPoints.map(point => {\n//             const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//             return coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n//           });\n\n//           const minValue = Math.min(...values);\n//           const maxValue = Math.max(...values);\n//           const valueRange = maxValue - minValue || 1; // Avoid division by zero\n\n//           // Draw horizontal lines for each point\n//           const lineSpacing = availableHeight / (numPoints + 1);\n\n//           sectorPoints.forEach((point, j) => {\n//             const y = (j + 1) * lineSpacing;\n\n//             // Draw the horizontal line\n//             stripG.append(\"line\")\n//               .attr(\"x1\", sectorX)\n//               .attr(\"y1\", y)\n//               .attr(\"x2\", sectorX + sectorWidth)\n//               .attr(\"y2\", y)\n//               .attr(\"stroke\", \"#ddd\")\n//               .attr(\"stroke-width\", 1);\n\n//             // Calculate point position based on its value\n//             const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//             const value = coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n//             const normalizedValue = (value - minValue) / valueRange;\n//             const x = sectorX + normalizedValue * sectorWidth;\n\n//             // Draw the point\n//             stripG.append(\"circle\")\n//               .attr(\"cx\", x)\n//               .attr(\"cy\", y)\n//               .attr(\"r\", 3)\n//               .attr(\"fill\", \"black\")\n//               .attr(\"stroke\", \"white\")\n//               .attr(\"stroke-width\", 0.5)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 const pointIds = point.Point_ID.join(\", \");\n//                 let associatedLabels = [];\n//                 if (labelsData && labelsData.labels) {\n//                   Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                     if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                       associatedLabels.push(label);\n//                     }\n//                   });\n//                 }\n//                 const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(\n//                     `Point_IDs: ${pointIds}<br>Value: ${value.toFixed(2)}<br>Sector: ${i}<br>Label: ${labelText}`\n//                   );\n//                 setHoveredCoordinates({ ...point, label: labelText });\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//                 setHoveredCoordinates(null);\n//               });\n//           });\n//         }\n\n//         // Add sector label\n//         stripG.append(\"text\")\n//           .attr(\"x\", sectorX + sectorWidth / 2)\n//           .attr(\"y\", availableHeight + 15)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .text(`Sector ${i}`);\n//       }\n\n//       // Add title for the strip\n//       stripG.append(\"text\")\n//         .attr(\"x\", (stripWidth - stripMargin.left - stripMargin.right) / 2)\n//         .attr(\"y\", -5)\n//         .attr(\"text-anchor\", \"middle\")\n//         .attr(\"font-size\", \"16px\")\n//         .attr(\"font-weight\", \"bold\")\n//         .text(`Linear Strip Visualization - Ring ${ringLabels[lastRingIndex]}`);\n//     }\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//       <svg ref={stripRef} style={{ width: \"100%\", height: \"200px\", marginTop: \"20px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const stripRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const calculateSectorPointCounts = () => {\n      const sectorCounts = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        return Array(sectors).fill(0);\n      });\n\n      subspaces.forEach((key, index) => {\n        const points = pointsData[index].points;\n        const sectors = 2 ** (index + 1);\n\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n\n      return sectorCounts;\n    };\n\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const lastRingIndex = subspaces.length - 1;\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const sectors = 2 ** (ringIndex + 1);\n        const totalPoints = pointsData[ringIndex].points.length || 1;\n        const minAngle = 0.05 * (Math.PI * 2) / sectors;\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n          const angles = sectorCounts[ringIndex].map(count => {\n            return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n          });\n\n          sectorAngles[ringIndex] = angles;\n        }\n        else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** (ringIndex + 1);\n          const outerSectors = 2 ** (ringIndex + 2);\n          const ratio = outerSectors / innerSectors;\n\n          const angles = [];\n          for (let i = 0; i < innerSectors; i++) {\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx];\n            }\n            angles.push(sumAngle);\n          }\n\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n\n      return sectorAngles;\n    };\n\n    // Function to get the sector just above 3 o'clock\n    const getStartingSector = (totalSectors) => {\n      // For a circle with sectors starting from a fixed position,\n      // we need to identify which sector is just above 3 o'clock going anticlockwise\n      // 3 o'clock is at angle 0, going anticlockwise means negative angles\n      // Each sector spans an angle of 2π/totalSectors\n      const sectorAngle = (2 * Math.PI) / totalSectors;\n\n      // Find the sector that contains the point just above 3 o'clock (small negative angle)\n      // We want the sector that would be at approximately -0.1 radians (slightly above 3 o'clock)\n      const targetAngle = -0.1;\n      const sectorIndex = Math.floor(((targetAngle + 2 * Math.PI) % (2 * Math.PI)) / sectorAngle);\n\n      return sectorIndex;\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n\n        // Calculate rotation offset based on the desired starting sector\n        const startingSector = getStartingSector(sectors);\n        const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n\n        for (let i = 0; i < sectors; i++) {\n          // Adjust for anticlockwise ordering\n          const adjustedIndex = (sectors - i - 1);\n          const startAngle = (2 * Math.PI * adjustedIndex) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (adjustedIndex + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n\n        // Calculate rotation offset based on the desired starting sector\n        const startingSector = getStartingSector(sectors);\n        const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n\n        let currentAngle = rotationOffset;\n        // Render anticlockwise\n        for (let i = sectors - 1; i >= 0; i--) {\n          const angle = sectorAngles[index][i];\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, sectors - 1 - i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.3)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n      });\n    };\n\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const startingSector = getStartingSector(sectors);\n      const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n      const anglePerSector = 2 * Math.PI / sectors;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        // Adjust for anticlockwise ordering\n        const adjustedIndex = (sectors - bitVectorIndex - 1);\n        const startAngle = (anglePerSector * adjustedIndex) + rotationOffset;\n        const centerAngle = startAngle + (anglePerSector / 2);\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const sectors = 2 ** (index + 1);\n      const startingSector = getStartingSector(sectors);\n      const rotationOffset = -(startingSector * (2 * Math.PI) / sectors);\n\n      const pointsBySector = {};\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n\n      let currentAngle = rotationOffset;\n      const startAngles = [];\n      // Calculate anticlockwise angles\n      for (let i = sectors - 1; i >= 0; i--) {\n        startAngles[i] = currentAngle;\n        currentAngle += sectorAngles[index][i];\n      }\n\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const adjustedIdx = sectors - 1 - sectorIdx;\n        const startAngle = startAngles[adjustedIdx];\n        const sectorAngle = sectorAngles[index][sectorIdx];\n        const centerAngle = startAngle + (sectorAngle / 2);\n\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius =\n            innerRadius +\n            (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n            Math.max(1, totalPointsInSector);\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n\n    const storePointPosition = (point, x, y, index) => {\n      point.Point_ID.forEach((id) => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n      });\n    };\n\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"black\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 0.5)\n        .style(\"pointer-events\", \"visible\")\n        .on(\"mouseover\", (event) => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n          tooltip\n            .style(\"visibility\", \"visible\")\n            .html(\n              `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n            );\n          setHoveredCoordinates({ ...point, label: labelText });\n        })\n        .on(\"mousemove\", (event) => {\n          tooltip\n            .style(\"top\", event.pageY + 10 + \"px\")\n            .style(\"left\", event.pageX + 10 + \"px\");\n        })\n        .on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.7)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    // Add strip visualization for the last ring\n    const strip = d3.select(stripRef.current);\n    strip.selectAll(\"*\").remove();\n\n    const lastRingIndex = subspaces.length - 1;\n    const lastRingKey = subspaces[lastRingIndex];\n\n    if (ringVisibility[lastRingKey]) {\n      const stripWidth = 800;\n      const stripHeight = 200;\n      const stripMargin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n      const stripG = strip\n        .attr(\"width\", stripWidth)\n        .attr(\"height\", stripHeight)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n      const sectors = 2 ** (lastRingIndex + 1);\n      const sectorWidth = (stripWidth - stripMargin.left - stripMargin.right) / sectors;\n      const availableHeight = stripHeight - stripMargin.top - stripMargin.bottom;\n\n      // Group points by sector\n      const pointsBySector = {};\n      pointsData[lastRingIndex].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        if (!pointsBySector[sectorIndex]) {\n          pointsBySector[sectorIndex] = [];\n        }\n        pointsBySector[sectorIndex].push(point);\n      });\n\n      // Calculate the starting sector for the strip\n      const startingSector = getStartingSector(sectors);\n\n      // Draw sectors in the strip, starting from the correct sector and going anticlockwise\n      for (let i = 0; i < sectors; i++) {\n        // Calculate the original sector index based on anticlockwise ordering\n        const originalSectorIndex = (startingSector + i) % sectors;\n        const sectorX = i * sectorWidth;\n\n        // Draw sector background\n        stripG.append(\"rect\")\n          .attr(\"x\", sectorX)\n          .attr(\"y\", 0)\n          .attr(\"width\", sectorWidth)\n          .attr(\"height\", availableHeight)\n          .attr(\"fill\", getSectorColor(lastRingIndex, originalSectorIndex))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5);\n\n        const sectorPoints = pointsBySector[originalSectorIndex] || [];\n        const numPoints = sectorPoints.length;\n\n        if (numPoints > 0) {\n          // Calculate min and max values for this sector\n          const values = sectorPoints.map(point => {\n            const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n            return coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n          });\n\n          const minValue = Math.min(...values);\n          const maxValue = Math.max(...values);\n          const valueRange = maxValue - minValue || 1; // Avoid division by zero\n\n          // Draw horizontal lines for each point\n          const lineSpacing = availableHeight / (numPoints + 1);\n\n          sectorPoints.forEach((point, j) => {\n            const y = (j + 1) * lineSpacing;\n\n            // Draw the horizontal line\n            stripG.append(\"line\")\n              .attr(\"x1\", sectorX)\n              .attr(\"y1\", y)\n              .attr(\"x2\", sectorX + sectorWidth)\n              .attr(\"y2\", y)\n              .attr(\"stroke\", \"#ddd\")\n              .attr(\"stroke-width\", 1);\n\n            // Calculate point position based on its value\n            const coords = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n            const value = coords.reduce((sum, [_, coord]) => sum + Math.abs(coord), 0) / coords.length;\n            const normalizedValue = (value - minValue) / valueRange;\n            const x = sectorX + normalizedValue * sectorWidth;\n\n            // Draw the point\n            stripG.append(\"circle\")\n              .attr(\"cx\", x)\n              .attr(\"cy\", y)\n              .attr(\"r\", 3)\n              .attr(\"fill\", \"black\")\n              .attr(\"stroke\", \"white\")\n              .attr(\"stroke-width\", 0.5)\n              .style(\"cursor\", \"pointer\")\n              .on(\"mouseover\", (event) => {\n                const pointIds = point.Point_ID.join(\", \");\n                let associatedLabels = [];\n                if (labelsData && labelsData.labels) {\n                  Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                    if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                      associatedLabels.push(label);\n                    }\n                  });\n                }\n                const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n                tooltip\n                  .style(\"visibility\", \"visible\")\n                  .html(\n                    `Point_IDs: ${pointIds}<br>Value: ${value.toFixed(2)}<br>Sector: ${originalSectorIndex}<br>Label: ${labelText}`\n                  );\n                setHoveredCoordinates({ ...point, label: labelText });\n              })\n              .on(\"mousemove\", (event) => {\n                tooltip\n                  .style(\"top\", event.pageY + 10 + \"px\")\n                  .style(\"left\", event.pageX + 10 + \"px\");\n              })\n              .on(\"mouseout\", () => {\n                tooltip.style(\"visibility\", \"hidden\");\n                setHoveredCoordinates(null);\n              });\n          });\n        }\n\n        // Add sector label\n        stripG.append(\"text\")\n          .attr(\"x\", sectorX + sectorWidth / 2)\n          .attr(\"y\", availableHeight + 15)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .text(`Sector ${originalSectorIndex}`);\n      }\n\n      // Add title for the strip\n      stripG.append(\"text\")\n        .attr(\"x\", (stripWidth - stripMargin.left - stripMargin.right) / 2)\n        .attr(\"y\", -5)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"16px\")\n        .attr(\"font-weight\", \"bold\")\n        .text(`Linear Strip Visualization - Ring ${ringLabels[lastRingIndex]}`);\n    }\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n      <svg ref={stripRef} style={{ width: \"100%\", height: \"200px\", marginTop: \"20px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}