{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n\n//     // Sort subspaces by dimension in *descending* order\n//     subspaces.sort((a, b) => b.length - a.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//       subspaceId: key, // Store the subspace identifier\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the *smallest* square and increase size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n//           // Add sector labels\n//           const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n//           const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//             // .text(\n//             //   subspace.subspaceId +\n//             //     i.toString(2).padStart(subspace.dimensions, \"0\")\n//             // );\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Check if the point lies within this subspace's square.  This is critical\n//         // to prevent points from bleeding into other squares.\n//         if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\");\n//             // .text(\n//             //   `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             // );\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); // Debugging\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\",  }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    console.log(subspaces.length);\n    // Sort subspaces by dimension in *ascending* order\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      // Length of the key determines the dimensions\n      subspaceId: key // Store the subspace identifier\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Start with the *smallest* circle and increase radius for each subsequent subspace\n    pointsData.forEach((subspace, inde, ix) => {\n      const radius = maxRadius * ((index + 1) / subspaces.length);\n      const sectors = 2 ** index; // Number of sectors\n      console.log(index);\n      // Define a color scale (you can customize these colors)\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n      // Determine color based on subspace dimension\n      const subspaceColor = colorScale(subspace.dimensions % colorScale.range().length);\n\n      // Draw circle for the subspace\n      g.append(\"circle\").attr(\"r\", radius).attr(\"stroke\", \"black\") // Make the circle outline clearer\n      .attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n      .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n      // Draw sector lines (dividing the circle into equal parts)\n      if (subspace.dimensions > 0) {\n        // Only draw lines if there are sectors to divide\n        for (let i = 0; i < sectors; i++) {\n          const angle = 2 * Math.PI * i / sectors;\n          const x1 = radius * Math.cos(angle);\n          const y1 = radius * Math.sin(angle);\n          g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n\n          // Add sector labels\n          const labelX = (radius + 10) * Math.cos(angle); // Place label outside the circle\n          const labelY = (radius + 10) * Math.sin(angle);\n          g.append(\"text\").attr(\"x\", labelX).attr(\"y\", labelY + 5) // Adjust for vertical alignment\n          .attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").style(\"font-size\", \"10px\").style(\"fill\", \"black\");\n          // .text(\n          //   subspace.subspaceId +\n          //     i.toString(2).padStart(subspace.dimensions, \"0\")\n          // );\n        }\n      }\n\n      // Scale for plotting points, now relative to sector\n      const sectorRadius = radius;\n\n      // Plot points within their respective circle and sector\n      subspace.points.forEach(point => {\n        const bitPattern = point.Point_ID.toString(2).padStart(subspace.dimensions, \"0\");\n        const sectorIndex = parseInt(bitPattern, 2);\n        const sectorAngleStart = 2 * Math.PI * sectorIndex / sectors;\n        const sectorAngleEnd = 2 * Math.PI * (sectorIndex + 1) / sectors;\n\n        // Place points randomly inside the sector, further from the center\n        const minRadius = sectorRadius * 0.2;\n        const randomRadius = minRadius + Math.random() * (sectorRadius - minRadius);\n        const randomAngle = sectorAngleStart + Math.random() * (sectorAngleEnd - sectorAngleStart);\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        // Check if the point lies within this subspace's circle.  This is critical\n        // to prevent points from bleeding into other circles.\n        if (Math.sqrt(x * x + y * y) <= radius) {\n          const circle = g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).append(\"title\").text(`ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`);\n\n          // Add hover functionality\n          circle.on(\"mouseover\", function () {\n            d3.select(this).attr(\"fill\", \"red\");\n          }).on(\"mouseout\", function () {\n            d3.select(this).attr(\"fill\", \"black\");\n          });\n        } else {\n          console.warn(`Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`); // Debugging\n        }\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"600px\",\n      height: \"600px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","console","log","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","forEach","subspace","inde","ix","radius","index","sectors","colorScale","scaleOrdinal","range","subspaceColor","i","angle","PI","x1","cos","y1","sin","labelX","labelY","style","sectorRadius","point","bitPattern","Point_ID","toString","padStart","sectorIndex","parseInt","sectorAngleStart","sectorAngleEnd","minRadius","randomRadius","random","randomAngle","x","y","sqrt","circle","text","on","warn","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n\n//     // Sort subspaces by dimension in *descending* order\n//     subspaces.sort((a, b) => b.length - a.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//       subspaceId: key, // Store the subspace identifier\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the *smallest* square and increase size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize = maxSquareSize * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n\n//           // Add sector labels\n//           const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n//           const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//             // .text(\n//             //   subspace.subspaceId +\n//             //     i.toString(2).padStart(subspace.dimensions, \"0\")\n//             // );\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         // Check if the point lies within this subspace's square.  This is critical\n//         // to prevent points from bleeding into other squares.\n//         if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\");\n//             // .text(\n//             //   `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             // );\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); // Debugging\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\",  }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    console.log(subspaces.length);\n    // Sort subspaces by dimension in *ascending* order\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length, // Length of the key determines the dimensions\n      subspaceId: key, // Store the subspace identifier\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Start with the *smallest* circle and increase radius for each subsequent subspace\n    pointsData.forEach((subspace, inde,ix) => {\n      const radius = maxRadius * ((index + 1) / subspaces.length);\n      const sectors = 2 ** index; // Number of sectors\n      console.log(index);\n      // Define a color scale (you can customize these colors)\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n      // Determine color based on subspace dimension\n      const subspaceColor = colorScale(\n        subspace.dimensions % colorScale.range().length\n      );\n\n      // Draw circle for the subspace\n      g.append(\"circle\")\n        .attr(\"r\", radius)\n        .attr(\"stroke\", \"black\") // Make the circle outline clearer\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n        .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n      // Draw sector lines (dividing the circle into equal parts)\n      if (subspace.dimensions > 0) {\n        // Only draw lines if there are sectors to divide\n        for (let i = 0; i < sectors; i++) {\n          const angle = (2 * Math.PI * i) / sectors;\n          const x1 = radius * Math.cos(angle);\n          const y1 = radius * Math.sin(angle);\n\n          g.append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"y1\", 0)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 1);\n\n          // Add sector labels\n          const labelX = (radius + 10) * Math.cos(angle); // Place label outside the circle\n          const labelY = (radius + 10) * Math.sin(angle);\n\n          g.append(\"text\")\n            .attr(\"x\", labelX)\n            .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"dominant-baseline\", \"middle\")\n            .style(\"font-size\", \"10px\")\n            .style(\"fill\", \"black\");\n          // .text(\n          //   subspace.subspaceId +\n          //     i.toString(2).padStart(subspace.dimensions, \"0\")\n          // );\n        }\n      }\n\n      // Scale for plotting points, now relative to sector\n      const sectorRadius = radius;\n\n      // Plot points within their respective circle and sector\n      subspace.points.forEach((point) => {\n        const bitPattern = point.Point_ID.toString(2).padStart(\n          subspace.dimensions,\n          \"0\"\n        );\n        const sectorIndex = parseInt(bitPattern, 2);\n        const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n        const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n        // Place points randomly inside the sector, further from the center\n        const minRadius = sectorRadius * 0.2;\n        const randomRadius =\n          minRadius + Math.random() * (sectorRadius - minRadius);\n        const randomAngle =\n          sectorAngleStart +\n          Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        // Check if the point lies within this subspace's circle.  This is critical\n        // to prevent points from bleeding into other circles.\n        if (Math.sqrt(x * x + y * y) <= radius) {\n          const circle = g\n            .append(\"circle\")\n            .attr(\"cx\", x)\n            .attr(\"cy\", y)\n            .attr(\"r\", 4)\n            .attr(\"fill\", \"black\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .append(\"title\")\n            .text(\n              `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n            );\n\n          // Add hover functionality\n          circle\n            .on(\"mouseover\", function () {\n              d3.select(this).attr(\"fill\", \"red\");\n            })\n            .on(\"mouseout\", function () {\n              d3.select(this).attr(\"fill\", \"black\");\n            });\n        } else {\n          console.warn(\n            `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n          ); // Debugging\n        }\n      });\n    });\n  }, [jsonData]);\n\n  return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;IAErD,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC;IACvCO,OAAO,CAACC,GAAG,CAACF,SAAS,CAACD,MAAM,CAAC;IAC7B;IACAC,SAAS,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,MAAM,GAAGM,CAAC,CAACN,MAAM,CAAC;IAE7C,MAAMO,UAAU,GAAGN,SAAS,CAACO,GAAG,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}