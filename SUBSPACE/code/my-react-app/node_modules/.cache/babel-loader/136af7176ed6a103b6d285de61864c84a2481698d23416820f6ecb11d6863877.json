{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           // .on(\"mouseover\", (event) => {\n//           //   const pointIds = point.Point_ID.join(\", \");\n//           //   tooltip\n//           //     .style(\"visibility\", \"visible\")\n//           //     .html(\n//           //       `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//           //         2\n//           //       )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n//           //     );\n//           //   setHoveredCoordinates(point);\n//           // })\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n\n//             // Find label(s) associated with this point\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [selectedPoints, setSelectedPoints] = useState(new Set());\n  const [selectedEdge, setSelectedEdge] = useState(null);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const pointPositions = {};\n    Object.keys(jsonData).sort((a, b) => a.length - b.length).forEach((key, index, subspaces) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      jsonData[key].forEach((point, i) => {\n        const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\").map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const centerAngle = angleStart + Math.PI / sectors;\n        const totalPoints = jsonData[key].length;\n        const overlapRadius = innerRadius + 0.86 * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", selectedPoints.has(point.Point_ID[0]) ? \"red\" : \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${point.Point_ID.join(\", \")}`);\n          setHoveredCoordinates(point);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", selectedEdge === pointId ? \"red\" : getLabelColor(pointId)).attr(\"stroke-width\", selectedEdge === pointId ? 1.5 : 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          }).on(\"click\", () => {\n            const connectedIds = new Set(positions.map(p => p.point.Point_ID[0]));\n            setSelectedPoints(connectedIds);\n            setSelectedEdge(pointId);\n          });\n        }\n      }\n    });\n    svg.on(\"click\", event => {\n      if (event.target.tagName !== \"line\") {\n        setSelectedPoints(new Set());\n        setSelectedEdge(null);\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, selectedPoints, selectedEdge]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"aslXtbEUuLzTbNBo1niYlrx6QuI=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","selectedPoints","setSelectedPoints","Set","selectedEdge","setSelectedEdge","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","pointPositions","sort","a","b","forEach","key","index","subspaces","innerRadius","outerRadius","sectors","point","i","bitVector","entries","filter","map","_","coord","join","bitVectorIndex","parseInt","angleStart","PI","centerAngle","totalPoints","overlapRadius","x","cos","y","sin","Point_ID","id","push","subspaceId","has","on","event","html","pageY","pageX","positions","connectedIds","p","target","tagName","zoom","transform","call","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           // .on(\"mouseover\", (event) => {\n//           //   const pointIds = point.Point_ID.join(\", \");\n//           //   tooltip\n//           //     .style(\"visibility\", \"visible\")\n//           //     .html(\n//           //       `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//           //         2\n//           //       )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n//           //     );\n//           //   setHoveredCoordinates(point);\n//           // })\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n\n//             // Find label(s) associated with this point\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [selectedPoints, setSelectedPoints] = useState(new Set());\n  const [selectedEdge, setSelectedEdge] = useState(null);\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg.attr(\"width\", width).attr(\"height\", height)\n      .append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3.select(\"body\").append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const pointPositions = {};\n\n    Object.keys(jsonData).sort((a, b) => a.length - b.length).forEach((key, index, subspaces) => {\n      if (!ringVisibility[key]) return;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n\n      jsonData[key].forEach((point, i) => {\n        const bitVector = Object.entries(point).filter(([key]) => key !== \"Point_ID\")\n          .map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const centerAngle = angleStart + Math.PI / sectors;\n\n        const totalPoints = jsonData[key].length;\n        const overlapRadius = innerRadius + (0.86 * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", selectedPoints.has(point.Point_ID[0]) ? \"red\" : \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            tooltip.style(\"visibility\", \"visible\")\n              .html(`Point_IDs: ${point.Point_ID.join(\", \")}`);\n            setHoveredCoordinates(point);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", selectedEdge === pointId ? \"red\" : getLabelColor(pointId))\n            .attr(\"stroke-width\", selectedEdge === pointId ? 1.5 : 0.3)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            })\n            .on(\"click\", () => {\n              const connectedIds = new Set(positions.map(p => p.point.Point_ID[0]));\n              setSelectedPoints(connectedIds);\n              setSelectedEdge(pointId);\n            });\n        }\n      }\n    });\n\n    svg.on(\"click\", (event) => {\n      if (event.target.tagName !== \"line\") {\n        setSelectedPoints(new Set());\n        setSelectedEdge(null);\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, selectedPoints, selectedEdge]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}