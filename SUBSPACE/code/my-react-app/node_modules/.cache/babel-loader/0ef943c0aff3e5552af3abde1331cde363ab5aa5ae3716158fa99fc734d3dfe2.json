{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     const calculateSectorPointCounts = () => {\n//       const sectorCounts = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         return Array(sectors).fill(0);\n//       });\n\n//       subspaces.forEach((key, index) => {\n//         const points = pointsData[index].points;\n//         const sectors = 2 ** (index + 1);\n\n//         points.forEach(point => {\n//           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//           sectorCounts[index][bitVectorIndex]++;\n//         });\n//       });\n\n//       return sectorCounts;\n//     };\n\n//     const calculateRecursiveSectorAngles = () => {\n//       const sectorCounts = calculateSectorPointCounts();\n//       const sectorAngles = [];\n//       const rotationOffset = Math.PI / 2;\n//       const lastRingIndex = subspaces.length - 1;\n//       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n//         const sectors = 2 ** (ringIndex + 1);\n//         const totalPoints = pointsData[ringIndex].points.length || 1; \n//         const minAngle = 0.05 * (Math.PI * 2) / sectors; \n//         if (ringIndex === lastRingIndex) {\n//           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n//           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n//           const angles = sectorCounts[ringIndex].map(count => {\n//             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n//           });\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//         else {\n//           const outerAngles = sectorAngles[ringIndex + 1];\n//           const innerSectors = 2 ** (ringIndex + 1);\n//           const outerSectors = 2 ** (ringIndex + 2);\n//           const ratio = outerSectors / innerSectors;\n\n//           const angles = [];\n//           for (let i = 0; i < innerSectors; i++) {\n//             let sumAngle = 0;\n//             for (let j = 0; j < ratio; j++) {\n//               const outerIdx = i * ratio + j;\n//               sumAngle += outerAngles[outerIdx];\n//             }\n//             angles.push(sumAngle);\n//           }\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//       }\n\n//       return sectorAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const sectorAngles = calculateRecursiveSectorAngles();\n//       const rotationOffset = Math.PI / 2;\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n//         // Draw sectors with their proportional angles\n//         let currentAngle = rotationOffset;\n//         sectorAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n//       });\n//     };\n\n//     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n//       const rotationOffset = 0;\n//       const anglePerSector = 2 * Math.PI / sectors;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n//         const centerAngle = startAngle + (anglePerSector / 2);\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         storePointPosition(point, x, y, index);\n//         drawPoint(point, x, y, index);\n//       });\n//     };\n\n//     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n//       const rotationOffset = 0;\n//       const pointsBySector = {};\n//       pointsData[index].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectors = 2 ** (index + 1);\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       let currentAngle = rotationOffset;\n//       const startAngles = sectorAngles.map((angle, i) => {\n//         const startAngle = currentAngle;\n//         currentAngle += angle;\n//         return startAngle;\n//       });\n\n//       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n//         const sectorIdx = parseInt(sectorIndex);\n//         const startAngle = startAngles[sectorIdx];\n//         const sectorAngle = sectorAngles[sectorIdx];\n//         const centerAngle = startAngle + (sectorAngle / 2);\n\n//         points.forEach((point, i) => {\n//           const totalPointsInSector = points.length;\n//           const clusterFactor = 0.9;\n//           const overlapRadius =\n//             innerRadius +\n//             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n//             Math.max(1, totalPointsInSector);\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n\n//           storePointPosition(point, x, y, index);\n//           drawPoint(point, x, y, index);\n//         });\n//       });\n//     };\n\n//     const storePointPosition = (point, x, y, index) => {\n//       point.Point_ID.forEach((id) => {\n//         if (!pointPositions[id]) {\n//           pointPositions[id] = [];\n//         }\n//         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//       });\n//     };\n\n//     const drawPoint = (point, x, y, index) => {\n//       g.append(\"circle\")\n//         .attr(\"cx\", x)\n//         .attr(\"cy\", y)\n//         .attr(\"r\", 3)\n//         .attr(\"fill\", \"black\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 0.5)\n//         .style(\"pointer-events\", \"visible\")\n//         .on(\"mouseover\", (event) => {\n//           const pointIds = point.Point_ID.join(\", \");\n//           let associatedLabels = [];\n//           if (labelsData && labelsData.labels) {\n//             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                 associatedLabels.push(label);\n//               }\n//             });\n//           }\n//           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//           tooltip\n//             .style(\"visibility\", \"visible\")\n//             .html(\n//               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//             );\n//           setHoveredCoordinates({ ...point, label: labelText });\n//         })\n//         .on(\"mousemove\", (event) => {\n//           tooltip\n//             .style(\"top\", event.pageY + 10 + \"px\")\n//             .style(\"left\", event.pageX + 10 + \"px\");\n//         })\n//         .on(\"mouseout\", () => {\n//           tooltip.style(\"visibility\", \"hidden\");\n//           setHoveredCoordinates(null);\n//         });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.7)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const stripRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    // Validate inputs\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\" || !labelsData.labels) {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    // Shared utilities\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels));\n    const getLabelColor = pointId => {\n      for (const [label, pointList] of Object.entries(labelsData.labels)) {\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    // Data preparation\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: Array.isArray(jsonData[key]) ? jsonData[key] : [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    // Log data for debugging\n    console.log(\"Subspaces:\", subspaces);\n    console.log(\"PointsData:\", pointsData);\n\n    // Radial Graph Setup\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Ring and Sector Colors\n    const getRingColor = index => {\n      const totalRings = subspaces.length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    // Sector Point Counts\n    const calculateSectorPointCounts = () => {\n      const sectorCounts = pointsData.map(ring => {\n        const sectors = 2 ** ring.dimensions;\n        return Array(sectors).fill(0);\n      });\n      pointsData.forEach((ring, index) => {\n        const sectors = 2 ** ring.dimensions;\n        ring.points.forEach(point => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n      console.log(\"Sector Counts:\", sectorCounts);\n      return sectorCounts;\n    };\n\n    // Recursive Sector Angles\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const lastRingIndex = pointsData.length - 1;\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const ring = pointsData[ringIndex];\n        const sectors = 2 ** ring.dimensions;\n        const totalPoints = ring.points.length || 1;\n        const minAngle = 0.05 * Math.PI * 2 / sectors;\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n          const dataAngle = 0.9 * (2 * Math.PI); // 90% for data sectors\n          const emptyAngle = 0.1 * (2 * Math.PI); // 10% for empty sectors\n          const angles = sectorCounts[ringIndex].map(count => count === 0 ? emptyAngle / emptySectors || minAngle : count / totalPoints * dataAngle);\n          sectorAngles[ringIndex] = angles;\n        } else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** ring.dimensions;\n          const outerSectors = 2 ** pointsData[ringIndex + 1].dimensions;\n          const ratio = outerSectors / innerSectors;\n          const angles = Array(innerSectors).fill(0).map((_, i) => {\n            let sumAngle = 0;\n            for (let j = 0; j < ratio; j++) {\n              const outerIdx = i * ratio + j;\n              sumAngle += outerAngles[outerIdx] || minAngle;\n            }\n            return sumAngle;\n          });\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n      console.log(\"Sector Angles:\", sectorAngles);\n      return sectorAngles;\n    };\n\n    // Render Normal View (Radial)\n    const renderNormalView = () => {\n      pointsData.forEach((ring, index) => {\n        if (!ringVisibility[ring.key]) return;\n        const innerRadius = index / pointsData.length * maxRadius;\n        const outerRadius = (index + 1) / pointsData.length * maxRadius;\n        const sectors = 2 ** ring.dimensions;\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc()({\n            innerRadius,\n            outerRadius,\n            startAngle,\n            endAngle\n          })).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    // Render Proportional View (Radial)\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      const rotationOffset = Math.PI / 2;\n      pointsData.forEach((ring, index) => {\n        if (!ringVisibility[ring.key]) return;\n        const innerRadius = index / pointsData.length * maxRadius;\n        const outerRadius = (index + 1) / pointsData.length * maxRadius;\n        let currentAngle = rotationOffset;\n        (sectorAngles[index] || []).forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + (angle || 0);\n          g.append(\"path\").attr(\"d\", d3.arc()({\n            innerRadius,\n            outerRadius,\n            startAngle,\n            endAngle\n          })).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index] || []);\n      });\n    };\n\n    // Render Points (Normal - Radial)\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = 0;\n      const anglePerSector = 2 * Math.PI / sectors;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        const startAngle = anglePerSector * bitVectorIndex + rotationOffset;\n        const centerAngle = startAngle + anglePerSector / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n\n    // Render Points (Proportional - Radial)\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const rotationOffset = 0;\n      const pointsBySector = {};\n      const sectors = 2 ** pointsData[index].dimensions;\n      pointsData[index].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        pointsBySector[sectorIndex] = pointsBySector[sectorIndex] || [];\n        pointsBySector[sectorIndex].push(point);\n      });\n      let currentAngle = rotationOffset;\n      const startAngles = (sectorAngles || []).map(angle => {\n        const startAngle = currentAngle;\n        currentAngle += angle || 0;\n        return startAngle;\n      });\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const startAngle = startAngles[sectorIdx] || 0;\n        const sectorAngle = sectorAngles[sectorIdx] || 2 * Math.PI / sectors;\n        const centerAngle = startAngle + sectorAngle / 2;\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector)) / Math.max(1, totalPointsInSector);\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n\n    // Store Point Position\n    const pointPositions = {};\n    const storePointPosition = (point, x, y, index) => {\n      (point.Point_ID || []).forEach(id => {\n        pointPositions[id] = pointPositions[id] || [];\n        pointPositions[id].push({\n          x,\n          y,\n          point,\n          subspaceId: pointsData[index].key\n        });\n      });\n    };\n\n    // Draw Point (Radial)\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n        const pointIds = (point.Point_ID || []).join(\", \");\n        const associatedLabels = Object.entries(labelsData.labels || {}).filter(([_, pointList]) => point.Point_ID.some(id => pointList.includes(Number(id)))).map(([label]) => label);\n        const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n        tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n        setHoveredCoordinates({\n          ...point,\n          label: labelText\n        });\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n      }).on(\"mouseout\", () => {\n        tooltip.style(\"visibility\", \"hidden\");\n        setHoveredCoordinates(null);\n      });\n    };\n\n    // Render Radial Graph\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw Connections\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.7).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", () => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n\n    // Zoom\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    // Horizontal Strip Setup\n    const stripSvg = d3.select(stripRef.current);\n    stripSvg.selectAll(\"*\").remove();\n    const stripHeight = 100;\n    const stripMargin = {\n      top: 20,\n      right: 30,\n      bottom: 30,\n      left: 30\n    };\n    const stripWidth = width - stripMargin.left - stripMargin.right;\n    const stripTotalHeight = stripHeight + stripMargin.top + stripMargin.bottom;\n    stripSvg.attr(\"width\", width).attr(\"height\", stripTotalHeight);\n    const stripG = stripSvg.append(\"g\").attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n    const lastSubspace = subspaces[subspaces.length - 1];\n    if (!jsonData[lastSubspace] || !Array.isArray(jsonData[lastSubspace]) || jsonData[lastSubspace].length === 0) {\n      console.warn(\"No valid data for last subspace:\", lastSubspace);\n      return;\n    }\n    const lastRingPoints = jsonData[lastSubspace];\n    const sectors = 2 ** lastSubspace.length;\n    const pointsBySector = Array.from({\n      length: sectors\n    }, () => []);\n    lastRingPoints.forEach(point => {\n      const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n      const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n      const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n      pointsBySector[sectorIndex].push(point);\n    });\n    const totalPoints = lastRingPoints.length;\n    const sectorWidths = Array(sectors).fill(0);\n    const sectorStarts = Array(sectors).fill(0);\n    let currentStart = 0;\n    pointsBySector.forEach((points, i) => {\n      const proportion = points.length / (totalPoints || 1);\n      sectorWidths[i] = stripWidth * proportion;\n      sectorStarts[i] = currentStart;\n      currentStart += sectorWidths[i];\n    });\n\n    // Draw Sector Backgrounds (Strip)\n    pointsBySector.forEach((points, i) => {\n      if (points.length === 0) return;\n      stripG.append(\"rect\").attr(\"x\", sectorStarts[i]).attr(\"y\", 0).attr(\"width\", sectorWidths[i]).attr(\"height\", stripHeight).attr(\"fill\", i % 2 === 0 ? \"#f0f0f0\" : \"#e0e0e0\").attr(\"stroke\", \"#ccc\").attr(\"stroke-width\", 0.5);\n      stripG.append(\"text\").attr(\"x\", sectorStarts[i] + sectorWidths[i] / 2).attr(\"y\", stripHeight + 20).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10px\").text(`Sector ${i} (${points.length})`);\n    });\n\n    // Draw Dividing Lines (Strip)\n    for (let i = 1; i < sectors; i++) {\n      if (sectorStarts[i] > 0) {\n        stripG.append(\"line\").attr(\"x1\", sectorStarts[i]).attr(\"y1\", 0).attr(\"x2\", sectorStarts[i]).attr(\"y2\", stripHeight).attr(\"stroke\", \"#999\").attr(\"stroke-width\", 1);\n      }\n    }\n\n    // Draw Points (Strip)\n    pointsBySector.forEach((sectorPoints, sectorIndex) => {\n      if (sectorPoints.length === 0) return;\n      const sectorWidth = sectorWidths[sectorIndex];\n      const sectorStart = sectorStarts[sectorIndex];\n      const k = lastSubspace.length;\n      const lineSpacing = sectorWidth / (k + 1);\n      const findMinMax = (points, dim) => {\n        const values = points.map(p => {\n          var _coords$dim;\n          const coords = Object.entries(p).filter(([key]) => key !== \"Point_ID\");\n          return ((_coords$dim = coords[dim]) === null || _coords$dim === void 0 ? void 0 : _coords$dim[1]) || 0;\n        });\n        return [Math.min(...values), Math.max(...values)];\n      };\n      for (let dim = 0; dim < k; dim++) {\n        const lineX = sectorStart + (dim + 1) * lineSpacing;\n        const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n        stripG.append(\"line\").attr(\"x1\", lineX).attr(\"y1\", 5).attr(\"x2\", lineX).attr(\"y2\", stripHeight - 5).attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"3,3\");\n        stripG.append(\"text\").attr(\"x\", lineX).attr(\"y\", 0).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"9px\").text(`D${dim}`);\n        stripG.append(\"text\").attr(\"x\", lineX - 15).attr(\"y\", stripHeight - 5).attr(\"text-anchor\", \"end\").attr(\"font-size\", \"8px\").text(`${minVal.toFixed(1)}`);\n        stripG.append(\"text\").attr(\"x\", lineX + 15).attr(\"y\", stripHeight - 5).attr(\"text-anchor\", \"start\").attr(\"font-size\", \"8px\").text(`${maxVal.toFixed(1)}`);\n        const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([stripHeight - 10, 10]);\n        sectorPoints.forEach(point => {\n          var _pointData$dim;\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const value = ((_pointData$dim = pointData[dim]) === null || _pointData$dim === void 0 ? void 0 : _pointData$dim[1]) || 0;\n          const yPos = yScale(value);\n          stripG.append(\"circle\").attr(\"cx\", lineX).attr(\"cy\", yPos).attr(\"r\", 3).attr(\"fill\", point.Point_ID.map(id => getLabelColor(id))[0] || \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            const pointIds = (point.Point_ID || []).join(\", \");\n            const associatedLabels = Object.entries(labelsData.labels || {}).filter(([_, pointList]) => point.Point_ID.some(id => pointList.includes(Number(id)))).map(([label]) => label);\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>` + `Dimension ${dim}: ${value.toFixed(2)}<br>` + `Sector: ${sectorIndex}<br>` + `Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      }\n\n      // Connect Points (Strip)\n      const pointsById = {};\n      sectorPoints.forEach(point => {\n        (point.Point_ID || []).forEach(id => {\n          pointsById[id] = pointsById[id] || {\n            positions: []\n          };\n          const positions = [];\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          for (let dim = 0; dim < k; dim++) {\n            var _pointData$dim2;\n            const lineX = sectorStart + (dim + 1) * lineSpacing;\n            const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n            const value = ((_pointData$dim2 = pointData[dim]) === null || _pointData$dim2 === void 0 ? void 0 : _pointData$dim2[1]) || 0;\n            const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([stripHeight - 10, 10]);\n            const yPos = yScale(value);\n            positions.push({\n              x: lineX,\n              y: yPos\n            });\n          }\n          pointsById[id].positions = positions;\n        });\n      });\n      Object.entries(pointsById).forEach(([id, data]) => {\n        const positions = data.positions;\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            stripG.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(id)).attr(\"stroke-width\", 0.7).attr(\"stroke-opacity\", 0.9);\n          }\n        }\n      });\n    });\n\n    // Cleanup\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        margin: \"20px 0 10px\"\n      },\n      children: \"Horizontal Strip - Last Ring Projection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: stripRef,\n      style: {\n        width: \"100%\",\n        height: \"150px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1038,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"Lnq4kaJf8FClvngoFHBjv0qR1/w=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","stripRef","viewMode","setViewMode","Object","keys","length","console","error","labels","colorScale","scaleOrdinal","schemeCategory10","domain","getLabelColor","pointId","label","pointList","entries","Array","isArray","includes","Number","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","log","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","calculateSectorPointCounts","sectorCounts","ring","sectors","fill","forEach","point","pointData","filter","bitVector","coord","join","bitVectorIndex","parseInt","calculateRecursiveSectorAngles","sectorAngles","lastRingIndex","ringIndex","totalPoints","minAngle","PI","emptySectors","count","dataAngle","emptyAngle","angles","outerAngles","innerSectors","outerSectors","ratio","sumAngle","j","outerIdx","renderNormalView","innerRadius","outerRadius","rotationOffset","startAngle","endAngle","arc","text","renderPointsNormal","renderProportionalView","currentAngle","angle","renderPointsProportional","anglePerSector","centerAngle","clusterFactor","overlapRadius","x","cos","y","sin","storePointPosition","drawPoint","pointsBySector","push","startAngles","sectorIdx","sectorAngle","totalPointsInSector","max","pointPositions","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","zoom","transform","call","stripSvg","stripHeight","stripMargin","top","right","bottom","left","stripWidth","stripTotalHeight","stripG","lastSubspace","warn","lastRingPoints","from","sectorWidths","sectorStarts","currentStart","proportion","sectorPoints","sectorWidth","sectorStart","k","lineSpacing","findMinMax","dim","values","p","_coords$dim","coords","lineX","minVal","maxVal","yScale","scaleLinear","range","_pointData$dim","value","yPos","pointsById","_pointData$dim2","data","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     const calculateSectorPointCounts = () => {\n//       const sectorCounts = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         return Array(sectors).fill(0);\n//       });\n\n//       subspaces.forEach((key, index) => {\n//         const points = pointsData[index].points;\n//         const sectors = 2 ** (index + 1);\n\n//         points.forEach(point => {\n//           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//           sectorCounts[index][bitVectorIndex]++;\n//         });\n//       });\n\n//       return sectorCounts;\n//     };\n\n//     const calculateRecursiveSectorAngles = () => {\n//       const sectorCounts = calculateSectorPointCounts();\n//       const sectorAngles = [];\n//       const rotationOffset = Math.PI / 2;\n//       const lastRingIndex = subspaces.length - 1;\n//       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n//         const sectors = 2 ** (ringIndex + 1);\n//         const totalPoints = pointsData[ringIndex].points.length || 1; \n//         const minAngle = 0.05 * (Math.PI * 2) / sectors; \n//         if (ringIndex === lastRingIndex) {\n//           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n//           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n//           const angles = sectorCounts[ringIndex].map(count => {\n//             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n//           });\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//         else {\n//           const outerAngles = sectorAngles[ringIndex + 1];\n//           const innerSectors = 2 ** (ringIndex + 1);\n//           const outerSectors = 2 ** (ringIndex + 2);\n//           const ratio = outerSectors / innerSectors;\n\n//           const angles = [];\n//           for (let i = 0; i < innerSectors; i++) {\n//             let sumAngle = 0;\n//             for (let j = 0; j < ratio; j++) {\n//               const outerIdx = i * ratio + j;\n//               sumAngle += outerAngles[outerIdx];\n//             }\n//             angles.push(sumAngle);\n//           }\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//       }\n\n//       return sectorAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const sectorAngles = calculateRecursiveSectorAngles();\n//       const rotationOffset = Math.PI / 2;\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n//         // Draw sectors with their proportional angles\n//         let currentAngle = rotationOffset;\n//         sectorAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n//       });\n//     };\n\n//     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n//       const rotationOffset = 0;\n//       const anglePerSector = 2 * Math.PI / sectors;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n//         const centerAngle = startAngle + (anglePerSector / 2);\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         storePointPosition(point, x, y, index);\n//         drawPoint(point, x, y, index);\n//       });\n//     };\n\n//     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n//       const rotationOffset = 0;\n//       const pointsBySector = {};\n//       pointsData[index].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectors = 2 ** (index + 1);\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       let currentAngle = rotationOffset;\n//       const startAngles = sectorAngles.map((angle, i) => {\n//         const startAngle = currentAngle;\n//         currentAngle += angle;\n//         return startAngle;\n//       });\n\n//       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n//         const sectorIdx = parseInt(sectorIndex);\n//         const startAngle = startAngles[sectorIdx];\n//         const sectorAngle = sectorAngles[sectorIdx];\n//         const centerAngle = startAngle + (sectorAngle / 2);\n\n//         points.forEach((point, i) => {\n//           const totalPointsInSector = points.length;\n//           const clusterFactor = 0.9;\n//           const overlapRadius =\n//             innerRadius +\n//             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n//             Math.max(1, totalPointsInSector);\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n\n//           storePointPosition(point, x, y, index);\n//           drawPoint(point, x, y, index);\n//         });\n//       });\n//     };\n\n//     const storePointPosition = (point, x, y, index) => {\n//       point.Point_ID.forEach((id) => {\n//         if (!pointPositions[id]) {\n//           pointPositions[id] = [];\n//         }\n//         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//       });\n//     };\n\n//     const drawPoint = (point, x, y, index) => {\n//       g.append(\"circle\")\n//         .attr(\"cx\", x)\n//         .attr(\"cy\", y)\n//         .attr(\"r\", 3)\n//         .attr(\"fill\", \"black\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 0.5)\n//         .style(\"pointer-events\", \"visible\")\n//         .on(\"mouseover\", (event) => {\n//           const pointIds = point.Point_ID.join(\", \");\n//           let associatedLabels = [];\n//           if (labelsData && labelsData.labels) {\n//             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                 associatedLabels.push(label);\n//               }\n//             });\n//           }\n//           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//           tooltip\n//             .style(\"visibility\", \"visible\")\n//             .html(\n//               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//             );\n//           setHoveredCoordinates({ ...point, label: labelText });\n//         })\n//         .on(\"mousemove\", (event) => {\n//           tooltip\n//             .style(\"top\", event.pageY + 10 + \"px\")\n//             .style(\"left\", event.pageX + 10 + \"px\");\n//         })\n//         .on(\"mouseout\", () => {\n//           tooltip.style(\"visibility\", \"hidden\");\n//           setHoveredCoordinates(null);\n//         });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.7)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const stripRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    // Validate inputs\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\" || !labelsData.labels) {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    // Shared utilities\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels));\n    const getLabelColor = (pointId) => {\n      for (const [label, pointList] of Object.entries(labelsData.labels)) {\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    // Data preparation\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: Array.isArray(jsonData[key]) ? jsonData[key] : [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    // Log data for debugging\n    console.log(\"Subspaces:\", subspaces);\n    console.log(\"PointsData:\", pointsData);\n\n    // Radial Graph Setup\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    // Ring and Sector Colors\n    const getRingColor = (index) => {\n      const totalRings = subspaces.length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    // Sector Point Counts\n    const calculateSectorPointCounts = () => {\n      const sectorCounts = pointsData.map((ring) => {\n        const sectors = 2 ** ring.dimensions;\n        return Array(sectors).fill(0);\n      });\n\n      pointsData.forEach((ring, index) => {\n        const sectors = 2 ** ring.dimensions;\n        ring.points.forEach((point) => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[index][bitVectorIndex]++;\n        });\n      });\n\n      console.log(\"Sector Counts:\", sectorCounts);\n      return sectorCounts;\n    };\n\n    // Recursive Sector Angles\n    const calculateRecursiveSectorAngles = () => {\n      const sectorCounts = calculateSectorPointCounts();\n      const sectorAngles = [];\n      const lastRingIndex = pointsData.length - 1;\n\n      for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n        const ring = pointsData[ringIndex];\n        const sectors = 2 ** ring.dimensions;\n        const totalPoints = ring.points.length || 1;\n        const minAngle = (0.05 * Math.PI * 2) / sectors;\n\n        if (ringIndex === lastRingIndex) {\n          const emptySectors = sectorCounts[ringIndex].filter((count) => count === 0).length;\n          const dataAngle = 0.9 * (2 * Math.PI); // 90% for data sectors\n          const emptyAngle = 0.1 * (2 * Math.PI); // 10% for empty sectors\n          const angles = sectorCounts[ringIndex].map((count) =>\n            count === 0 ? emptyAngle / emptySectors || minAngle : (count / totalPoints) * dataAngle\n          );\n          sectorAngles[ringIndex] = angles;\n        } else {\n          const outerAngles = sectorAngles[ringIndex + 1];\n          const innerSectors = 2 ** ring.dimensions;\n          const outerSectors = 2 ** pointsData[ringIndex + 1].dimensions;\n          const ratio = outerSectors / innerSectors;\n\n          const angles = Array(innerSectors)\n            .fill(0)\n            .map((_, i) => {\n              let sumAngle = 0;\n              for (let j = 0; j < ratio; j++) {\n                const outerIdx = i * ratio + j;\n                sumAngle += outerAngles[outerIdx] || minAngle;\n              }\n              return sumAngle;\n            });\n          sectorAngles[ringIndex] = angles;\n        }\n      }\n\n      console.log(\"Sector Angles:\", sectorAngles);\n      return sectorAngles;\n    };\n\n    // Render Normal View (Radial)\n    const renderNormalView = () => {\n      pointsData.forEach((ring, index) => {\n        if (!ringVisibility[ring.key]) return;\n        const innerRadius = (index / pointsData.length) * maxRadius;\n        const outerRadius = ((index + 1) / pointsData.length) * maxRadius;\n        const sectors = 2 ** ring.dimensions;\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\n              \"d\",\n              d3.arc()({\n                innerRadius,\n                outerRadius,\n                startAngle,\n                endAngle,\n              })\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    // Render Proportional View (Radial)\n    const renderProportionalView = () => {\n      const sectorAngles = calculateRecursiveSectorAngles();\n      const rotationOffset = Math.PI / 2;\n\n      pointsData.forEach((ring, index) => {\n        if (!ringVisibility[ring.key]) return;\n        const innerRadius = (index / pointsData.length) * maxRadius;\n        const outerRadius = ((index + 1) / pointsData.length) * maxRadius;\n\n        let currentAngle = rotationOffset;\n        (sectorAngles[index] || []).forEach((angle, i) => {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + (angle || 0);\n\n          g.append(\"path\")\n            .attr(\n              \"d\",\n              d3.arc()({\n                innerRadius,\n                outerRadius,\n                startAngle,\n                endAngle,\n              })\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.3)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index] || []);\n      });\n    };\n\n    // Render Points (Normal - Radial)\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = 0;\n      const anglePerSector = (2 * Math.PI) / sectors;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        const startAngle = anglePerSector * bitVectorIndex + rotationOffset;\n        const centerAngle = startAngle + anglePerSector / 2;\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        storePointPosition(point, x, y, index);\n        drawPoint(point, x, y, index);\n      });\n    };\n\n    // Render Points (Proportional - Radial)\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      const rotationOffset = 0;\n      const pointsBySector = {};\n      const sectors = 2 ** pointsData[index].dimensions;\n\n      pointsData[index].points.forEach((point) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        pointsBySector[sectorIndex] = pointsBySector[sectorIndex] || [];\n        pointsBySector[sectorIndex].push(point);\n      });\n\n      let currentAngle = rotationOffset;\n      const startAngles = (sectorAngles || []).map((angle) => {\n        const startAngle = currentAngle;\n        currentAngle += angle || 0;\n        return startAngle;\n      });\n\n      Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n        const sectorIdx = parseInt(sectorIndex);\n        const startAngle = startAngles[sectorIdx] || 0;\n        const sectorAngle = sectorAngles[sectorIdx] || (2 * Math.PI) / sectors;\n        const centerAngle = startAngle + sectorAngle / 2;\n\n        points.forEach((point, i) => {\n          const totalPointsInSector = points.length;\n          const clusterFactor = 0.9;\n          const overlapRadius =\n            innerRadius +\n            (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n            Math.max(1, totalPointsInSector);\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n\n          storePointPosition(point, x, y, index);\n          drawPoint(point, x, y, index);\n        });\n      });\n    };\n\n    // Store Point Position\n    const pointPositions = {};\n    const storePointPosition = (point, x, y, index) => {\n      (point.Point_ID || []).forEach((id) => {\n        pointPositions[id] = pointPositions[id] || [];\n        pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n      });\n    };\n\n    // Draw Point (Radial)\n    const drawPoint = (point, x, y, index) => {\n      g.append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"black\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 0.5)\n        .style(\"pointer-events\", \"visible\")\n        .on(\"mouseover\", (event) => {\n          const pointIds = (point.Point_ID || []).join(\", \");\n          const associatedLabels = Object.entries(labelsData.labels || {})\n            .filter(([_, pointList]) => point.Point_ID.some((id) => pointList.includes(Number(id))))\n            .map(([label]) => label);\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n          tooltip\n            .style(\"visibility\", \"visible\")\n            .html(\n              `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(\n                2\n              )})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n            );\n          setHoveredCoordinates({ ...point, label: labelText });\n        })\n        .on(\"mousemove\", (event) => {\n          tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n        })\n        .on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n    };\n\n    // Render Radial Graph\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw Connections\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.7)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", () => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    // Zoom\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    // Horizontal Strip Setup\n    const stripSvg = d3.select(stripRef.current);\n    stripSvg.selectAll(\"*\").remove();\n\n    const stripHeight = 100;\n    const stripMargin = { top: 20, right: 30, bottom: 30, left: 30 };\n    const stripWidth = width - stripMargin.left - stripMargin.right;\n    const stripTotalHeight = stripHeight + stripMargin.top + stripMargin.bottom;\n\n    stripSvg.attr(\"width\", width).attr(\"height\", stripTotalHeight);\n\n    const stripG = stripSvg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${stripMargin.left}, ${stripMargin.top})`);\n\n    const lastSubspace = subspaces[subspaces.length - 1];\n    if (!jsonData[lastSubspace] || !Array.isArray(jsonData[lastSubspace]) || jsonData[lastSubspace].length === 0) {\n      console.warn(\"No valid data for last subspace:\", lastSubspace);\n      return;\n    }\n\n    const lastRingPoints = jsonData[lastSubspace];\n    const sectors = 2 ** lastSubspace.length;\n    const pointsBySector = Array.from({ length: sectors }, () => []);\n\n    lastRingPoints.forEach((point) => {\n      const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n      const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n      const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n      pointsBySector[sectorIndex].push(point);\n    });\n\n    const totalPoints = lastRingPoints.length;\n    const sectorWidths = Array(sectors).fill(0);\n    const sectorStarts = Array(sectors).fill(0);\n    let currentStart = 0;\n\n    pointsBySector.forEach((points, i) => {\n      const proportion = points.length / (totalPoints || 1);\n      sectorWidths[i] = stripWidth * proportion;\n      sectorStarts[i] = currentStart;\n      currentStart += sectorWidths[i];\n    });\n\n    // Draw Sector Backgrounds (Strip)\n    pointsBySector.forEach((points, i) => {\n      if (points.length === 0) return;\n\n      stripG\n        .append(\"rect\")\n        .attr(\"x\", sectorStarts[i])\n        .attr(\"y\", 0)\n        .attr(\"width\", sectorWidths[i])\n        .attr(\"height\", stripHeight)\n        .attr(\"fill\", i % 2 === 0 ? \"#f0f0f0\" : \"#e0e0e0\")\n        .attr(\"stroke\", \"#ccc\")\n        .attr(\"stroke-width\", 0.5);\n\n      stripG\n        .append(\"text\")\n        .attr(\"x\", sectorStarts[i] + sectorWidths[i] / 2)\n        .attr(\"y\", stripHeight + 20)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"10px\")\n        .text(`Sector ${i} (${points.length})`);\n    });\n\n    // Draw Dividing Lines (Strip)\n    for (let i = 1; i < sectors; i++) {\n      if (sectorStarts[i] > 0) {\n        stripG\n          .append(\"line\")\n          .attr(\"x1\", sectorStarts[i])\n          .attr(\"y1\", 0)\n          .attr(\"x2\", sectorStarts[i])\n          .attr(\"y2\", stripHeight)\n          .attr(\"stroke\", \"#999\")\n          .attr(\"stroke-width\", 1);\n      }\n    }\n\n    // Draw Points (Strip)\n    pointsBySector.forEach((sectorPoints, sectorIndex) => {\n      if (sectorPoints.length === 0) return;\n\n      const sectorWidth = sectorWidths[sectorIndex];\n      const sectorStart = sectorStarts[sectorIndex];\n      const k = lastSubspace.length;\n      const lineSpacing = sectorWidth / (k + 1);\n\n      const findMinMax = (points, dim) => {\n        const values = points.map((p) => {\n          const coords = Object.entries(p).filter(([key]) => key !== \"Point_ID\");\n          return coords[dim]?.[1] || 0;\n        });\n        return [Math.min(...values), Math.max(...values)];\n      };\n\n      for (let dim = 0; dim < k; dim++) {\n        const lineX = sectorStart + (dim + 1) * lineSpacing;\n        const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n\n        stripG\n          .append(\"line\")\n          .attr(\"x1\", lineX)\n          .attr(\"y1\", 5)\n          .attr(\"x2\", lineX)\n          .attr(\"y2\", stripHeight - 5)\n          .attr(\"stroke\", \"#ddd\")\n          .attr(\"stroke-width\", 1)\n          .attr(\"stroke-dasharray\", \"3,3\");\n\n        stripG\n          .append(\"text\")\n          .attr(\"x\", lineX)\n          .attr(\"y\", 0)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"9px\")\n          .text(`D${dim}`);\n\n        stripG\n          .append(\"text\")\n          .attr(\"x\", lineX - 15)\n          .attr(\"y\", stripHeight - 5)\n          .attr(\"text-anchor\", \"end\")\n          .attr(\"font-size\", \"8px\")\n          .text(`${minVal.toFixed(1)}`);\n\n        stripG\n          .append(\"text\")\n          .attr(\"x\", lineX + 15)\n          .attr(\"y\", stripHeight - 5)\n          .attr(\"text-anchor\", \"start\")\n          .attr(\"font-size\", \"8px\")\n          .text(`${maxVal.toFixed(1)}`);\n\n        const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([stripHeight - 10, 10]);\n\n        sectorPoints.forEach((point) => {\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n          const value = pointData[dim]?.[1] || 0;\n          const yPos = yScale(value);\n\n          stripG\n            .append(\"circle\")\n            .attr(\"cx\", lineX)\n            .attr(\"cy\", yPos)\n            .attr(\"r\", 3)\n            .attr(\"fill\", point.Point_ID.map((id) => getLabelColor(id))[0] || \"black\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              const pointIds = (point.Point_ID || []).join(\", \");\n              const associatedLabels = Object.entries(labelsData.labels || {})\n                .filter(([_, pointList]) => point.Point_ID.some((id) => pointList.includes(Number(id))))\n                .map(([label]) => label);\n              const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(\n                  `Point_IDs: ${pointIds}<br>` +\n                  `Dimension ${dim}: ${value.toFixed(2)}<br>` +\n                  `Sector: ${sectorIndex}<br>` +\n                  `Label: ${labelText}`\n                );\n              setHoveredCoordinates({ ...point, label: labelText });\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip.style(\"top\", `${event.pageY + 10}px`).style(\"left\", `${event.pageX + 10}px`);\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n              setHoveredCoordinates(null);\n            });\n        });\n      }\n\n      // Connect Points (Strip)\n      const pointsById = {};\n      sectorPoints.forEach((point) => {\n        (point.Point_ID || []).forEach((id) => {\n          pointsById[id] = pointsById[id] || { positions: [] };\n          const positions = [];\n          const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n          for (let dim = 0; dim < k; dim++) {\n            const lineX = sectorStart + (dim + 1) * lineSpacing;\n            const [minVal, maxVal] = findMinMax(sectorPoints, dim);\n            const value = pointData[dim]?.[1] || 0;\n            const yScale = d3.scaleLinear().domain([minVal, maxVal]).range([stripHeight - 10, 10]);\n            const yPos = yScale(value);\n            positions.push({ x: lineX, y: yPos });\n          }\n          pointsById[id].positions = positions;\n        });\n      });\n\n      Object.entries(pointsById).forEach(([id, data]) => {\n        const positions = data.positions;\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            stripG\n              .append(\"line\")\n              .attr(\"x1\", positions[i].x)\n              .attr(\"y1\", positions[i].y)\n              .attr(\"x2\", positions[i + 1].x)\n              .attr(\"y2\", positions[i + 1].y)\n              .attr(\"stroke\", getLabelColor(id))\n              .attr(\"stroke-width\", 0.7)\n              .attr(\"stroke-opacity\", 0.9);\n          }\n        }\n      });\n    });\n\n    // Cleanup\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n      <h3 style={{ margin: \"20px 0 10px\" }}>Horizontal Strip - Last Ring Projection</h3>\n      <svg ref={stripRef} style={{ width: \"100%\", height: \"150px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMY,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,QAAQ,CAAC;EAElDF,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACO,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIS,MAAM,CAACC,IAAI,CAACV,QAAQ,CAAC,CAACW,MAAM,KAAK,CAAC,EAAE;MACnFC,OAAO,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}