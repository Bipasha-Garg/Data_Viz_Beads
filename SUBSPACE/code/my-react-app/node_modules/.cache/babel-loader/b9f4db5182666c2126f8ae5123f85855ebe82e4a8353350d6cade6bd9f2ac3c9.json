{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     // Function to show zoomed sector view\n//     const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n//       // Clear existing zoom view\n//       svg.select(\".zoom-view\").remove();\n\n//       const zoomGroup = svg.append(\"g\")\n//         .attr(\"class\", \"zoom-view\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n//         .filter(point => {\n//           const bitVector = Object.entries(point)\n//             .filter(([k]) => k !== \"Point_ID\")\n//             .map(([_, v]) => v >= 0 ? 1 : 0)\n//             .join(\"\");\n//           const bitIndex = parseInt(bitVector, 2);\n//           const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n//           return bitIndex === sectorIndex;\n//         });\n\n//       const zoomWidth = width * 0.8;\n//       const zoomHeight = height * 0.8;\n//       const arcCount = sectorPoints.length;\n\n//       // Draw zoomed sector background\n//       zoomGroup.append(\"rect\")\n//         .attr(\"x\", -zoomWidth / 2)\n//         .attr(\"y\", -zoomHeight / 2)\n//         .attr(\"width\", zoomWidth)\n//         .attr(\"height\", zoomHeight)\n//         .attr(\"fill\", \"white\")\n//         .attr(\"stroke\", \"black\");\n\n//       // Draw arcs and points\n//       sectorPoints.forEach((point, i) => {\n//         const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n//         const maxValue = Math.max(...sectorPoints.map(p =>\n//           Math.abs(Object.values(p).filter(v => typeof v === \"number\")[0])));\n\n//         const arcRadius = (zoomHeight * 0.4 * (i + 1)) / arcCount;\n//         const arc = d3.arc()\n//           .innerRadius(arcRadius - 5)\n//           .outerRadius(arcRadius)\n//           .startAngle(-Math.PI / 2)\n//           .endAngle(Math.PI / 2);\n\n//         zoomGroup.append(\"path\")\n//           .attr(\"d\", arc)\n//           .attr(\"fill\", \"lightblue\")\n//           .attr(\"opacity\", 0.5);\n\n//         const angle = (value / maxValue) * Math.PI - Math.PI / 2;\n//         const x = arcRadius * Math.cos(angle);\n//         const y = arcRadius * Math.sin(angle);\n\n//         zoomGroup.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", getLabelColor(point.Point_ID[0]));\n//       });\n\n//       // Add close button\n//       zoomGroup.append(\"text\")\n//         .attr(\"x\", zoomWidth / 2 - 20)\n//         .attr(\"y\", -zoomHeight / 2 + 20)\n//         .text(\"Ã—\")\n//         .attr(\"font-size\", \"20px\")\n//         .style(\"cursor\", \"pointer\")\n//         .on(\"click\", () => zoomGroup.remove());\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\")\n//           .on(\"click\", () => {\n//             clearHighlights();\n//             showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n//           });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const pointPositions = {};\n    let highlightedElements = null;\n\n    // Store original positions of points\n    const originalPositions = {};\n\n    // Function to clear highlights\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.forEach(circle => circle.attr(\"r\", 3).attr(\"fill\", \"black\"));\n        highlightedElements = null;\n      }\n    };\n\n    // Function to show only the clicked sector\n    const showClickedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n      // Hide all sectors and points\n      g.selectAll(\"path\").style(\"display\", \"none\");\n      g.selectAll(\"circle\").style(\"display\", \"none\");\n      g.selectAll(\"line\").style(\"display\", \"none\");\n\n      // Show only the clicked sector\n      const sectorGroup = g.append(\"g\").attr(\"class\", \"clicked-sector\");\n\n      // Draw the clicked sector\n      sectorGroup.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(subspaces.indexOf(subspaceKey), sectorIndex)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n\n      // Show points in the clicked sector\n      const sectorPoints = pointsData.find(d => d.key === subspaceKey).points.filter(point => {\n        const bitVector = Object.entries(point).filter(([k]) => k !== \"Point_ID\").map(([_, v]) => v >= 0 ? 1 : 0).join(\"\");\n        const bitIndex = parseInt(bitVector, 2);\n        const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n        return bitIndex === sectorIndex;\n      });\n      const values = sectorPoints.map(point => {\n        return Object.values(point).filter(v => typeof v === \"number\")[0];\n      });\n      const minValue = Math.min(...values);\n      const maxValue = Math.max(...values);\n      const arcCount = sectorPoints.length;\n\n      // Adjust the positions of the points within the clicked sector\n      sectorPoints.forEach((point, i) => {\n        const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n        const normalizedValue = (value - minValue) / (maxValue - minValue);\n        const angle = startAngle + normalizedValue * (endAngle - startAngle);\n        const radius = innerRadius + (outerRadius - innerRadius) * (i / arcCount);\n        const x = radius * Math.cos(angle);\n        const y = radius * Math.sin(angle);\n\n        // Draw the point\n        sectorGroup.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", function (event, d) {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspaceKey}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n\n      // Add close button\n      const closeButton = sectorGroup.append(\"text\").attr(\"x\", outerRadius * Math.cos(endAngle)).attr(\"y\", outerRadius * Math.sin(endAngle)).text(\"Ã—\").attr(\"font-size\", \"20px\").style(\"cursor\", \"pointer\").on(\"click\", () => {\n        // Show all sectors and points again\n        g.selectAll(\"path\").style(\"display\", \"block\");\n        g.selectAll(\"circle\").style(\"display\", \"block\");\n        g.selectAll(\"line\").style(\"display\", \"block\");\n\n        // Remove the clicked sector group\n        sectorGroup.remove();\n      });\n    };\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n        const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\").on(\"click\", () => {\n          clearHighlights();\n          showClickedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(key);\n      }\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n      }\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n\n        // Store original positions\n        point.Point_ID.forEach(id => {\n          originalPositions[id] = {\n            x,\n            y\n          };\n        });\n        g.append(\"circle\").datum(point) // Bind data to the circle\n        .attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", function (event, d) {\n          const pointIds = d.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (d.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...d,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          }).on(\"click\", event => {\n            var _Object$entries$find;\n            // Clear previous highlights\n            clearHighlights();\n\n            // Highlight the clicked edge\n            const originalColor = getLabelColor(pointId);\n            line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n            // Highlight connected points\n            const circles = g.selectAll(\"circle\").filter(d => d.Point_ID && d.Point_ID.includes(pointId)) // Ensure `d` is defined and has `Point_ID`\n            .attr(\"r\", 6).attr(\"fill\", \"yellow\");\n            highlightedElements = {\n              line,\n              circles,\n              originalColor\n            };\n\n            // Show popup\n            const point1 = positions[i].point;\n            const point2 = positions[i + 1].point;\n            const coords1 = Object.entries(point1).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n            const coords2 = Object.entries(point2).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n            const label1 = ((_Object$entries$find = Object.entries((labelsData === null || labelsData === void 0 ? void 0 : labelsData.labels) || {}).find(([_, ids]) => ids.includes(Number(pointId)))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]) || \"No Label\";\n            edgePopup.style(\"visibility\", \"visible\").html(`\n                  <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                  <strong>Point 1</strong><br>\n                  Subspace: ${positions[i].subspaceId}<br>\n                  Coordinates: ${coords1}<br>\n                  Label: ${label1}<br><br>\n                  <strong>Point 2</strong><br>\n                  Subspace: ${positions[i + 1].subspaceId}<br>\n                  Coordinates: ${coords2}<br>\n                  Label: ${label1}\n                `).style(\"top\", event.pageY + 15 + \"px\").style(\"left\", event.pageX + 15 + \"px\");\n            d3.select(\"body\").on(\"click.edgePopup\", e => {\n              if (!edgePopup.node().contains(e.target)) {\n                edgePopup.style(\"visibility\", \"hidden\");\n                clearHighlights();\n                d3.select(\"body\").on(\"click.edgePopup\", null);\n              }\n            });\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    const legendData = [{\n      color: d3.hsl(11, 0.9, 0.7),\n      label: \"Negative Bit Sector\"\n    }, {\n      color: d3.hsl(220, 0.9, 0.7),\n      label: \"Positive Bit Sector\"\n    }];\n    const legend = svg.append(\"g\").attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n    legend.selectAll(\"rect\").data(legendData).enter().append(\"rect\").attr(\"x\", 0).attr(\"y\", (d, i) => i * 30).attr(\"width\", 20).attr(\"height\", 20).attr(\"fill\", d => d.color);\n    legend.selectAll(\"text\").data(legendData).enter().append(\"text\").attr(\"x\", 25).attr(\"y\", (d, i) => i * 30 + 15).text(d => d.label).attr(\"font-size\", \"12px\").attr(\"alignment-baseline\", \"middle\");\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 910,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","pointPositions","highlightedElements","originalPositions","clearHighlights","line","originalColor","circles","forEach","circle","showClickedSector","subspaceKey","innerRadius","outerRadius","startAngle","endAngle","sectorGroup","arc","indexOf","sectorPoints","find","d","filter","point","bitVector","entries","k","_","v","join","bitIndex","parseInt","sectors","values","minValue","maxValue","max","arcCount","i","value","normalizedValue","angle","radius","x","cos","y","sin","on","event","pointIds","Point_ID","associatedLabels","some","id","push","labelText","html","toFixed","pageY","pageX","closeButton","text","rotationOffset","PI","x1","y1","x2","y2","pointData","coord","minRadius","randomRadius","random","bitVectorIndex","angleStart","angleEnd","centerAngle","totalPoints","clusterFactor","overlapRadius","datum","positions","_Object$entries$find","point1","point2","coords1","coords2","label1","ids","edgePopup","e","node","contains","target","zoom","transform","call","legendData","color","legend","data","enter","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     // Function to show zoomed sector view\n//     const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n//       // Clear existing zoom view\n//       svg.select(\".zoom-view\").remove();\n\n//       const zoomGroup = svg.append(\"g\")\n//         .attr(\"class\", \"zoom-view\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n//         .filter(point => {\n//           const bitVector = Object.entries(point)\n//             .filter(([k]) => k !== \"Point_ID\")\n//             .map(([_, v]) => v >= 0 ? 1 : 0)\n//             .join(\"\");\n//           const bitIndex = parseInt(bitVector, 2);\n//           const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n//           return bitIndex === sectorIndex;\n//         });\n\n//       const zoomWidth = width * 0.8;\n//       const zoomHeight = height * 0.8;\n//       const arcCount = sectorPoints.length;\n\n//       // Draw zoomed sector background\n//       zoomGroup.append(\"rect\")\n//         .attr(\"x\", -zoomWidth / 2)\n//         .attr(\"y\", -zoomHeight / 2)\n//         .attr(\"width\", zoomWidth)\n//         .attr(\"height\", zoomHeight)\n//         .attr(\"fill\", \"white\")\n//         .attr(\"stroke\", \"black\");\n\n//       // Draw arcs and points\n//       sectorPoints.forEach((point, i) => {\n//         const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n//         const maxValue = Math.max(...sectorPoints.map(p =>\n//           Math.abs(Object.values(p).filter(v => typeof v === \"number\")[0])));\n\n//         const arcRadius = (zoomHeight * 0.4 * (i + 1)) / arcCount;\n//         const arc = d3.arc()\n//           .innerRadius(arcRadius - 5)\n//           .outerRadius(arcRadius)\n//           .startAngle(-Math.PI / 2)\n//           .endAngle(Math.PI / 2);\n\n//         zoomGroup.append(\"path\")\n//           .attr(\"d\", arc)\n//           .attr(\"fill\", \"lightblue\")\n//           .attr(\"opacity\", 0.5);\n\n//         const angle = (value / maxValue) * Math.PI - Math.PI / 2;\n//         const x = arcRadius * Math.cos(angle);\n//         const y = arcRadius * Math.sin(angle);\n\n//         zoomGroup.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", getLabelColor(point.Point_ID[0]));\n//       });\n\n//       // Add close button\n//       zoomGroup.append(\"text\")\n//         .attr(\"x\", zoomWidth / 2 - 20)\n//         .attr(\"y\", -zoomHeight / 2 + 20)\n//         .text(\"Ã—\")\n//         .attr(\"font-size\", \"20px\")\n//         .style(\"cursor\", \"pointer\")\n//         .on(\"click\", () => zoomGroup.remove());\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\")\n//           .on(\"click\", () => {\n//             clearHighlights();\n//             showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n//           });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n    \n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3\n      .scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const pointPositions = {};\n    let highlightedElements = null;\n\n    // Store original positions of points\n    const originalPositions = {};\n\n    // Function to clear highlights\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.forEach(circle =>\n          circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n        );\n        highlightedElements = null;\n      }\n    };\n\n    // Function to show only the clicked sector\n    const showClickedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n      // Hide all sectors and points\n      g.selectAll(\"path\").style(\"display\", \"none\");\n      g.selectAll(\"circle\").style(\"display\", \"none\");\n      g.selectAll(\"line\").style(\"display\", \"none\");\n\n      // Show only the clicked sector\n      const sectorGroup = g.append(\"g\")\n        .attr(\"class\", \"clicked-sector\");\n\n      // Draw the clicked sector\n      sectorGroup.append(\"path\")\n        .attr(\"d\", d3.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle)\n        )\n        .attr(\"fill\", getSectorColor(subspaces.indexOf(subspaceKey), sectorIndex))\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 0.5);\n\n      // Show points in the clicked sector\n      const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n        .filter(point => {\n          const bitVector = Object.entries(point)\n            .filter(([k]) => k !== \"Point_ID\")\n            .map(([_, v]) => v >= 0 ? 1 : 0)\n            .join(\"\");\n          const bitIndex = parseInt(bitVector, 2);\n          const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n          return bitIndex === sectorIndex;\n        });\n\n      const values = sectorPoints.map(point => {\n        return Object.values(point).filter(v => typeof v === \"number\")[0];\n      });\n      const minValue = Math.min(...values);\n      const maxValue = Math.max(...values);\n\n      const arcCount = sectorPoints.length;\n\n      // Adjust the positions of the points within the clicked sector\n      sectorPoints.forEach((point, i) => {\n        const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n        const normalizedValue = (value - minValue) / (maxValue - minValue);\n\n        const angle = startAngle + normalizedValue * (endAngle - startAngle);\n        const radius = innerRadius + (outerRadius - innerRadius) * (i / arcCount);\n\n        const x = radius * Math.cos(angle);\n        const y = radius * Math.sin(angle);\n\n        // Draw the point\n        sectorGroup.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", function (event, d) {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspaceKey}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n\n      // Add close button\n      const closeButton = sectorGroup.append(\"text\")\n        .attr(\"x\", outerRadius * Math.cos(endAngle))\n        .attr(\"y\", outerRadius * Math.sin(endAngle))\n        .text(\"Ã—\")\n        .attr(\"font-size\", \"20px\")\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", () => {\n          // Show all sectors and points again\n          g.selectAll(\"path\").style(\"display\", \"block\");\n          g.selectAll(\"circle\").style(\"display\", \"block\");\n          g.selectAll(\"line\").style(\"display\", \"block\");\n\n          // Remove the clicked sector group\n          sectorGroup.remove();\n        });\n    };\n\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n        const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n        g.append(\"path\")\n          .attr(\"d\", d3.arc()\n            .innerRadius(innerRadius)\n            .outerRadius(outerRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle)\n          )\n          .attr(\"fill\", getSectorColor(index, i))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"cursor\", \"pointer\")\n          .on(\"click\", () => {\n            clearHighlights();\n            showClickedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n          });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"font-weight\", \"bold\")\n          .text(key);\n      }\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", x2)\n          .attr(\"y1\", y2)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.25)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        // Store original positions\n        point.Point_ID.forEach(id => {\n          originalPositions[id] = { x, y };\n        });\n\n        g.append(\"circle\")\n          .datum(point) // Bind data to the circle\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", function (event, d) {\n            const pointIds = d.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (d.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...d, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.3)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            })\n            .on(\"click\", (event) => {\n              // Clear previous highlights\n              clearHighlights();\n\n              // Highlight the clicked edge\n              const originalColor = getLabelColor(pointId);\n              line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n              // Highlight connected points\n              const circles = g.selectAll(\"circle\")\n                .filter(d => d.Point_ID && d.Point_ID.includes(pointId)) // Ensure `d` is defined and has `Point_ID`\n                .attr(\"r\", 6)\n                .attr(\"fill\", \"yellow\");\n\n              highlightedElements = { line, circles, originalColor };\n\n              // Show popup\n              const point1 = positions[i].point;\n              const point2 = positions[i + 1].point;\n\n              const coords1 = Object.entries(point1)\n                .filter(([key]) => key !== \"Point_ID\")\n                .map(([key, value]) => `${key}: ${value}`)\n                .join(\", \");\n              const coords2 = Object.entries(point2)\n                .filter(([key]) => key !== \"Point_ID\")\n                .map(([key, value]) => `${key}: ${value}`)\n                .join(\", \");\n\n              const label1 = Object.entries(labelsData?.labels || {})\n                .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n              edgePopup\n                .style(\"visibility\", \"visible\")\n                .html(`\n                  <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                  <strong>Point 1</strong><br>\n                  Subspace: ${positions[i].subspaceId}<br>\n                  Coordinates: ${coords1}<br>\n                  Label: ${label1}<br><br>\n                  <strong>Point 2</strong><br>\n                  Subspace: ${positions[i + 1].subspaceId}<br>\n                  Coordinates: ${coords2}<br>\n                  Label: ${label1}\n                `)\n                .style(\"top\", event.pageY + 15 + \"px\")\n                .style(\"left\", event.pageX + 15 + \"px\");\n\n              d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n                if (!edgePopup.node().contains(e.target)) {\n                  edgePopup.style(\"visibility\", \"hidden\");\n                  clearHighlights();\n                  d3.select(\"body\").on(\"click.edgePopup\", null);\n                }\n              });\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n\n    const legendData = [\n      { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n      { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n    ];\n\n    const legend = svg.append(\"g\")\n      .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n    legend.selectAll(\"rect\")\n      .data(legendData)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (d, i) => i * 30)\n      .attr(\"width\", 20)\n      .attr(\"height\", 20)\n      .attr(\"fill\", d => d.color);\n\n    legend.selectAll(\"text\")\n      .data(legendData)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", 25)\n      .attr(\"y\", (d, i) => i * 30 + 15)\n      .text(d => d.label)\n      .attr(\"font-size\", \"12px\")\n      .attr(\"alignment-baseline\", \"middle\");\n\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IACE,CAACM,QAAQ,IACT,OAAOA,QAAQ,KAAK,QAAQ,IAC5BM,MAAM,CAACC,IAAI,CAACP,QAAQ,CAAC,CAACQ,MAAM,KAAK,CAAC,EAClC;MACAC,OAAO,CAACC,KAAK,CAAC,4BAA4B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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}