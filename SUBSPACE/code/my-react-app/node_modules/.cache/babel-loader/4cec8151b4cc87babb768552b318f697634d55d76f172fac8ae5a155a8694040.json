{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // // HERE ___________________________________---------------------__________________________\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// //     const subspaces = Object.keys(jsonData);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length, // Length of the key determines the dimensions\n// //     }));\n\n// //     const svg = d3.select(graphRef.current);\n// //     const width = 600;\n// //     const height = 600;\n// //     const margin = 20;\n\n// //     svg.selectAll(\"*\").remove(); // Clear previous content\n\n// //     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Correct syntax\n\n// //     // Start with the largest square and reduce size for each subsequent subspace\n// //     pointsData.forEach((subspace, index) => {\n// //       const squareSize =\n// //         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n// //       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n// //       // Define a color scale (you can customize these colors)\n// //       const colorScale = d3\n// //         .scaleOrdinal()\n// //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n// //       // Determine color based on subspace dimension\n// //       const subspaceColor = colorScale(\n// //         subspace.dimensions % colorScale.range().length\n// //       );\n\n// //       // Draw square for the subspace\n// //       g.append(\"rect\")\n// //         .attr(\"x\", -squareSize / 2)\n// //         .attr(\"y\", -squareSize / 2)\n// //         .attr(\"width\", squareSize)\n// //         .attr(\"height\", squareSize)\n// //         .attr(\"stroke\", \"white\")\n// //         .attr(\"fill\", subspaceColor)\n// //         .attr(\"fill-opacity\", 0.75)\n// //         .attr(\"stroke-width\", 1);\n\n// //       // Draw sector lines (dividing the square into equal parts)\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = (squareSize / 2) * Math.cos(angle);\n// //         const y1 = (squareSize / 2) * Math.sin(angle);\n\n// //         g.append(\"line\")\n// //           .attr(\"x1\", 0)\n// //           .attr(\"y1\", 0)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 1);\n// //       }\n\n// //       // Scale for plotting points, now relative to sector\n// //       const sectorRadius = squareSize / 2;\n\n// //       // Plot points within their respective square and sector\n// //       subspace.points.forEach((point) => {\n// //         const bitPattern = point.Point_ID.toString(2).padStart(\n// //           subspace.dimensions,\n// //           \"0\"\n// //         );\n// //         const sectorIndex = parseInt(bitPattern, 2);\n// //         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n// //         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n// //         const sectorAngleMid = (sectorAngleStart + sectorAngleEnd) / 2; // Angle in the middle of sector\n\n// //         // Place points randomly inside the sector\n// //         const randomRadius = Math.random() * sectorRadius;\n// //         const randomAngle =\n// //           sectorAngleStart +\n// //           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n// //         const x = randomRadius * Math.cos(randomAngle);\n// //         const y = randomRadius * Math.sin(randomAngle);\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3) // Reduce radius\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .append(\"title\")\n// //           .text(`ID: ${point.Point_ID}, Binary: ${bitPattern}`);\n// //       });\n// //     });\n// //   }, [jsonData]);\n\n// //   return (\n// //     <svg\n// //       ref={graphRef}\n// //       style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n// //     ></svg>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the largest square and reduce size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize =\n//         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.5) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n//           g.append(\"line\")\n//             .attr(\"x1\", 0)\n//             .attr(\"y1\", 0)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"gray\") // Slightly darker lines\n//             .attr(\"stroke-width\", 1);\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n//         const sectorAngleMid = (sectorAngleStart + sectorAngleEnd) / 2; // Angle in the middle of sector\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2; // Minimum radius to avoid center crowding\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius); // Ensure a minimum radius\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4) // Slightly larger points\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .append(\"title\")\n//           .text(`ID: ${point.Point_ID}, Binary: ${bitPattern}`);\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      // Length of the key determines the dimensions\n      subspaceId: key // Store the subspace identifier\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Start with the largest square and reduce size for each subsequent subspace\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n      const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n      // Define a color scale (you can customize these colors)\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n      // Determine color based on subspace dimension\n      const subspaceColor = colorScale(subspace.dimensions % colorScale.range().length);\n\n      // Draw square for the subspace\n      g.append(\"rect\").attr(\"x\", -squareSize / 2).attr(\"y\", -squareSize / 2).attr(\"width\", squareSize).attr(\"height\", squareSize).attr(\"stroke\", \"black\") // Make the square outline clearer\n      .attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n      .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n      // Draw sector lines (dividing the square into equal parts)\n      if (subspace.dimensions > 0) {\n        // Only draw lines if there are sectors to divide\n        for (let i = 0; i < sectors; i++) {\n          const angle = 2 * Math.PI * i / sectors;\n          const x1 = squareSize / 2 * Math.cos(angle);\n          const y1 = squareSize / 2 * Math.sin(angle);\n          g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"gray\") // Slightly darker lines\n          .attr(\"stroke-width\", 1);\n\n          // Add sector labels\n          const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n          const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n          g.append(\"text\").attr(\"x\", labelX).attr(\"y\", labelY + 5) // Adjust for vertical alignment\n          .attr(\"text-anchor\", \"middle\").attr(\"dominant-baseline\", \"middle\").style(\"font-size\", \"10px\").style(\"fill\", \"black\").text(subspace.subspaceId + i.toString(2).padStart(subspace.dimensions, \"0\"));\n        }\n      }\n\n      // Scale for plotting points, now relative to sector\n      const sectorRadius = squareSize / 2;\n\n      // Plot points within their respective square and sector\n      subspace.points.forEach(point => {\n        const bitPattern = point.Point_ID.toString(2).padStart(subspace.dimensions, \"0\");\n        const sectorIndex = parseInt(bitPattern, 2);\n        const sectorAngleStart = 2 * Math.PI * sectorIndex / sectors;\n        const sectorAngleEnd = 2 * Math.PI * (sectorIndex + 1) / sectors;\n\n        // Place points randomly inside the sector, further from the center\n        const minRadius = sectorRadius * 0.2;\n        const randomRadius = minRadius + Math.random() * (sectorRadius - minRadius);\n        const randomAngle = sectorAngleStart + Math.random() * (sectorAngleEnd - sectorAngleStart);\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        // Check if the point lies within this subspace's square.  This is critical\n        // to prevent points from bleeding into other squares.\n        if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).append(\"title\").text(`ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`);\n        } else {\n          console.warn(`Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`); // Debugging\n        }\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"600px\",\n      height: \"600px\",\n      border: \"1px solid black\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxSquareSize","Math","min","g","attr","append","forEach","subspace","index","squareSize","sectors","colorScale","scaleOrdinal","range","subspaceColor","i","angle","PI","x1","cos","y1","sin","labelX","labelY","style","text","toString","padStart","sectorRadius","point","bitPattern","Point_ID","sectorIndex","parseInt","sectorAngleStart","sectorAngleEnd","minRadius","randomRadius","random","randomAngle","x","y","abs","console","warn","ref","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // // HERE ___________________________________---------------------__________________________\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n// //     const subspaces = Object.keys(jsonData);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length, // Length of the key determines the dimensions\n// //     }));\n\n// //     const svg = d3.select(graphRef.current);\n// //     const width = 600;\n// //     const height = 600;\n// //     const margin = 20;\n\n// //     svg.selectAll(\"*\").remove(); // Clear previous content\n\n// //     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`); // Correct syntax\n\n// //     // Start with the largest square and reduce size for each subsequent subspace\n// //     pointsData.forEach((subspace, index) => {\n// //       const squareSize =\n// //         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n// //       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n// //       // Define a color scale (you can customize these colors)\n// //       const colorScale = d3\n// //         .scaleOrdinal()\n// //         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n// //       // Determine color based on subspace dimension\n// //       const subspaceColor = colorScale(\n// //         subspace.dimensions % colorScale.range().length\n// //       );\n\n// //       // Draw square for the subspace\n// //       g.append(\"rect\")\n// //         .attr(\"x\", -squareSize / 2)\n// //         .attr(\"y\", -squareSize / 2)\n// //         .attr(\"width\", squareSize)\n// //         .attr(\"height\", squareSize)\n// //         .attr(\"stroke\", \"white\")\n// //         .attr(\"fill\", subspaceColor)\n// //         .attr(\"fill-opacity\", 0.75)\n// //         .attr(\"stroke-width\", 1);\n\n// //       // Draw sector lines (dividing the square into equal parts)\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = (squareSize / 2) * Math.cos(angle);\n// //         const y1 = (squareSize / 2) * Math.sin(angle);\n\n// //         g.append(\"line\")\n// //           .attr(\"x1\", 0)\n// //           .attr(\"y1\", 0)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 1);\n// //       }\n\n// //       // Scale for plotting points, now relative to sector\n// //       const sectorRadius = squareSize / 2;\n\n// //       // Plot points within their respective square and sector\n// //       subspace.points.forEach((point) => {\n// //         const bitPattern = point.Point_ID.toString(2).padStart(\n// //           subspace.dimensions,\n// //           \"0\"\n// //         );\n// //         const sectorIndex = parseInt(bitPattern, 2);\n// //         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n// //         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n// //         const sectorAngleMid = (sectorAngleStart + sectorAngleEnd) / 2; // Angle in the middle of sector\n\n// //         // Place points randomly inside the sector\n// //         const randomRadius = Math.random() * sectorRadius;\n// //         const randomAngle =\n// //           sectorAngleStart +\n// //           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n// //         const x = randomRadius * Math.cos(randomAngle);\n// //         const y = randomRadius * Math.sin(randomAngle);\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3) // Reduce radius\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .append(\"title\")\n// //           .text(`ID: ${point.Point_ID}, Binary: ${bitPattern}`);\n// //       });\n// //     });\n// //   }, [jsonData]);\n\n// //   return (\n// //     <svg\n// //       ref={graphRef}\n// //       style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n// //     ></svg>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, // Length of the key determines the dimensions\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); // Clear previous content\n\n//     const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     // Start with the largest square and reduce size for each subsequent subspace\n//     pointsData.forEach((subspace, index) => {\n//       const squareSize =\n//         maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n//       const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n//       // Define a color scale (you can customize these colors)\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n//       // Determine color based on subspace dimension\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       // Draw square for the subspace\n//       g.append(\"rect\")\n//         .attr(\"x\", -squareSize / 2)\n//         .attr(\"y\", -squareSize / 2)\n//         .attr(\"width\", squareSize)\n//         .attr(\"height\", squareSize)\n//         .attr(\"stroke\", \"black\") // Make the square outline clearer\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.5) // Reduce opacity to see sector lines better\n//         .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n//       // Draw sector lines (dividing the square into equal parts)\n//       if (subspace.dimensions > 0) {\n//         // Only draw lines if there are sectors to divide\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = (squareSize / 2) * Math.cos(angle);\n//           const y1 = (squareSize / 2) * Math.sin(angle);\n\n//           g.append(\"line\")\n//             .attr(\"x1\", 0)\n//             .attr(\"y1\", 0)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"gray\") // Slightly darker lines\n//             .attr(\"stroke-width\", 1);\n//         }\n//       }\n\n//       // Scale for plotting points, now relative to sector\n//       const sectorRadius = squareSize / 2;\n\n//       // Plot points within their respective square and sector\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n//         const sectorAngleMid = (sectorAngleStart + sectorAngleEnd) / 2; // Angle in the middle of sector\n\n//         // Place points randomly inside the sector, further from the center\n//         const minRadius = sectorRadius * 0.2; // Minimum radius to avoid center crowding\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius); // Ensure a minimum radius\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4) // Slightly larger points\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .append(\"title\")\n//           .text(`ID: ${point.Point_ID}, Binary: ${bitPattern}`);\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return (\n//     <svg\n//       ref={graphRef}\n//       style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n//     ></svg>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length, // Length of the key determines the dimensions\n      subspaceId: key, // Store the subspace identifier\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove(); // Clear previous content\n\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Start with the largest square and reduce size for each subsequent subspace\n    pointsData.forEach((subspace, index) => {\n      const squareSize =\n        maxSquareSize - 2 * index * (maxSquareSize / subspaces.length);\n      const sectors = 2 ** subspace.dimensions; // Number of sectors\n\n      // Define a color scale (you can customize these colors)\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); // Gold, Pink, Light Blue\n\n      // Determine color based on subspace dimension\n      const subspaceColor = colorScale(\n        subspace.dimensions % colorScale.range().length\n      );\n\n      // Draw square for the subspace\n      g.append(\"rect\")\n        .attr(\"x\", -squareSize / 2)\n        .attr(\"y\", -squareSize / 2)\n        .attr(\"width\", squareSize)\n        .attr(\"height\", squareSize)\n        .attr(\"stroke\", \"black\") // Make the square outline clearer\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2) // Reduce opacity to see sector lines better\n        .attr(\"stroke-width\", 2); // Thicker stroke for better visibility\n\n      // Draw sector lines (dividing the square into equal parts)\n      if (subspace.dimensions > 0) {\n        // Only draw lines if there are sectors to divide\n        for (let i = 0; i < sectors; i++) {\n          const angle = (2 * Math.PI * i) / sectors;\n          const x1 = (squareSize / 2) * Math.cos(angle);\n          const y1 = (squareSize / 2) * Math.sin(angle);\n\n          g.append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"y1\", 0)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"gray\") // Slightly darker lines\n            .attr(\"stroke-width\", 1);\n\n          // Add sector labels\n          const labelX = (squareSize / 2 + 10) * Math.cos(angle); // Place label outside the square\n          const labelY = (squareSize / 2 + 10) * Math.sin(angle);\n\n          g.append(\"text\")\n            .attr(\"x\", labelX)\n            .attr(\"y\", labelY + 5) // Adjust for vertical alignment\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"dominant-baseline\", \"middle\")\n            .style(\"font-size\", \"10px\")\n            .style(\"fill\", \"black\")\n            .text(\n              subspace.subspaceId +\n                i.toString(2).padStart(subspace.dimensions, \"0\")\n            );\n        }\n      }\n\n      // Scale for plotting points, now relative to sector\n      const sectorRadius = squareSize / 2;\n\n      // Plot points within their respective square and sector\n      subspace.points.forEach((point) => {\n        const bitPattern = point.Point_ID.toString(2).padStart(\n          subspace.dimensions,\n          \"0\"\n        );\n        const sectorIndex = parseInt(bitPattern, 2);\n        const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n        const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n        // Place points randomly inside the sector, further from the center\n        const minRadius = sectorRadius * 0.2;\n        const randomRadius =\n          minRadius + Math.random() * (sectorRadius - minRadius);\n        const randomAngle =\n          sectorAngleStart +\n          Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        // Check if the point lies within this subspace's square.  This is critical\n        // to prevent points from bleeding into other squares.\n        if (Math.abs(x) <= squareSize / 2 && Math.abs(y) <= squareSize / 2) {\n          g.append(\"circle\")\n            .attr(\"cx\", x)\n            .attr(\"cy\", y)\n            .attr(\"r\", 4)\n            .attr(\"fill\", \"black\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .append(\"title\")\n            .text(\n              `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n            );\n        } else {\n          console.warn(\n            `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n          ); // Debugging\n        }\n      });\n    });\n  }, [jsonData]);\n\n  return (\n    <svg\n      ref={graphRef}\n      style={{ width: \"600px\", height: \"600px\", border: \"1px solid black\" }}\n    ></svg>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}