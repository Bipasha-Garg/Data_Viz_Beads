{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     console.log(\"Points data:\", pointsData.dimensions);\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           g.append(\"text\")\n// //             .attr(\"x\", 0)\n// //             .attr(\"y\", -outerRadius - 5)\n// //             .attr(\"text-anchor\", \"middle\")\n// //             .attr(\"font-size\", \"16px\")\n// //             .attr(\"fill\", \"red\")\n// //             .attr(\"font-weight\", \"bold\")\n// //             .text(ringLabels[index]);\n// //         }\n// //         renderPoints(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n// //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// //       const isProportional = viewMode === \"proportional\";\n// //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// //       let currentAngle = Math.PI / 2;\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         const startAngle = isProportional ?\n// //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// //           (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// //         const centerAngle = startAngle + angleWidth / 2;\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } \n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = (index) => {\n//       const sectors = 2 ** (index + 1);\n//       const points = pointsData[index].points;\n//       const sectorCounts = Array(sectors).fill(0);\n//       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n//       points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//         sectorCounts[bitVectorIndex]++;\n//       });\n\n//       const totalPoints = points.length || 1; // Avoid division by zero\n//       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n//       return sectorCounts.map(count => {\n//         if (count === 0) return minAngle;\n//         return (count / totalPoints) * remainingAngle;\n//       });\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const rotationOffset = Math.PI / 2;\n\n//         const proportionalAngles = calculateProportionalAngles(index);\n\n//         let currentAngle = rotationOffset;\n//         proportionalAngles.forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n//       const rotationOffset = Math.PI / 2;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         let startAngle = rotationOffset;\n//         if (isProportional) {\n//           for (let j = 0; j < bitVectorIndex; j++) {\n//             startAngle += angles[j];\n//           }\n//         } else {\n//           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n//         }\n\n//         const angleWidth = angles[bitVectorIndex];\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    // Sort subspaces by dimension (length of key)\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // New implementation for proportional angles\n    const calculateSectorAngles = () => {\n      // Start with the outermost ring (highest dimension)\n      const ringsOrderedByDimension = [...pointsData].sort((a, b) => b.dimensions - a.dimensions);\n      const sectorAngles = {};\n\n      // Process each ring, starting from the outermost\n      ringsOrderedByDimension.forEach(ringData => {\n        const key = ringData.key;\n        const sectors = 2 ** ringData.dimensions;\n        const points = ringData.points || [];\n\n        // Count points in each sector\n        const sectorCounts = Array(sectors).fill(0);\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[sectorIndex]++;\n        });\n\n        // Minimum angle for sectors with no points (small but visible)\n        const minAngle = 0.05 * (Math.PI * 2) / sectors;\n        const totalPoints = points.length || 1; // Avoid division by zero\n        const emptySectors = sectorCounts.filter(count => count === 0).length;\n        const remainingAngle = 2 * Math.PI - minAngle * emptySectors;\n\n        // Calculate angles for this ring\n        const ringAngles = [];\n        let currentAngle = Math.PI / 2; // Start from top (π/2)\n\n        for (let i = 0; i < sectors; i++) {\n          // Angle for this sector\n          const angle = sectorCounts[i] === 0 ? minAngle : sectorCounts[i] / totalPoints * remainingAngle;\n          ringAngles.push({\n            startAngle: currentAngle,\n            endAngle: currentAngle + angle,\n            count: sectorCounts[i]\n          });\n          currentAngle += angle;\n        }\n        sectorAngles[key] = ringAngles;\n      });\n\n      // Now propagate angles from outer to inner rings\n      // For each inner ring, merge angles from corresponding outer ring sectors\n      subspaces.forEach(key => {\n        // Skip the outermost ring as it's already calculated\n        if (key === ringsOrderedByDimension[0].key) return;\n        const dimensions = key.length;\n        const parentKey = subspaces.find(k => k.length === dimensions + 1);\n\n        // If we have a parent ring, adjust angles based on parent\n        if (parentKey && sectorAngles[parentKey]) {\n          const parentAngles = sectorAngles[parentKey];\n          const sectors = 2 ** dimensions;\n          const adjustedAngles = [];\n\n          // For each sector in this ring\n          for (let i = 0; i < sectors; i++) {\n            // Each sector corresponds to two sectors in the parent ring\n            const startSector = i * 2;\n            const endSector = startSector + 1;\n\n            // If parent sectors exist, merge their angles\n            if (parentAngles[startSector] && parentAngles[endSector]) {\n              adjustedAngles.push({\n                startAngle: parentAngles[startSector].startAngle,\n                endAngle: parentAngles[endSector].endAngle,\n                count: parentAngles[startSector].count + parentAngles[endSector].count\n              });\n            } else if (parentAngles[startSector]) {\n              adjustedAngles.push({\n                startAngle: parentAngles[startSector].startAngle,\n                endAngle: parentAngles[startSector].endAngle,\n                count: parentAngles[startSector].count\n              });\n            } else {\n              // Fallback if parent sectors don't exist\n              const angle = 2 * Math.PI / sectors;\n              adjustedAngles.push({\n                startAngle: Math.PI / 2 + i * angle,\n                endAngle: Math.PI / 2 + (i + 1) * angle,\n                count: 0\n              });\n            }\n          }\n          sectorAngles[key] = adjustedAngles;\n        }\n      });\n      return sectorAngles;\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** pointsData[index].dimensions;\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      const sectorAngles = calculateSectorAngles();\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n\n        // Get the angles for this ring\n        const angles = sectorAngles[key] || [];\n\n        // Render sectors\n        angles.forEach((sectorAngle, i) => {\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(sectorAngle.startAngle).endAngle(sectorAngle.endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPointsProportional(index, innerRadius, outerRadius, angles);\n      });\n    };\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = Math.PI / 2;\n      const sectorAngle = 2 * Math.PI / sectors;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        const startAngle = rotationOffset + sectorAngle * sectorIndex;\n        const centerAngle = startAngle + sectorAngle / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const radius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n        renderPoint(point, x, y, index);\n      });\n    };\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectorAngles.length - 1);\n\n        // Get angle info for this sector\n        const sector = sectorAngles[sectorIndex];\n        if (!sector) return;\n        const centerAngle = sector.startAngle + (sector.endAngle - sector.startAngle) / 2;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const radius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n        renderPoint(point, x, y, index);\n      });\n    };\n    const renderPoint = (point, x, y, index) => {\n      point.Point_ID.forEach(id => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({\n          x,\n          y,\n          point,\n          subspaceId: pointsData[index].key\n        });\n      });\n      g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n        const pointIds = point.Point_ID.join(\", \");\n        let associatedLabels = [];\n        if (labelsData && labelsData.labels) {\n          Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n            if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n              associatedLabels.push(label);\n            }\n          });\n        }\n        const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n        tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n        setHoveredCoordinates({\n          ...point,\n          label: labelText\n        });\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.style(\"visibility\", \"hidden\");\n        setHoveredCoordinates(null);\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw connections between points\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n\n    // Add zoom functionality\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1006,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateSectorAngles","ringsOrderedByDimension","sectorAngles","forEach","ringData","sectors","sectorCounts","fill","point","pointData","entries","filter","k","bitVector","coord","join","parseInt","minAngle","PI","totalPoints","emptySectors","count","remainingAngle","ringAngles","currentAngle","angle","push","startAngle","endAngle","parentKey","find","parentAngles","adjustedAngles","startSector","endSector","renderNormalView","innerRadius","outerRadius","rotationOffset","arc","text","renderPointsNormal","renderProportionalView","angles","sectorAngle","renderPointsProportional","centerAngle","clusterFactor","radius","x","cos","y","sin","renderPoint","sector","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     console.log(\"Points data:\", pointsData.dimensions);\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           g.append(\"text\")\n// //             .attr(\"x\", 0)\n// //             .attr(\"y\", -outerRadius - 5)\n// //             .attr(\"text-anchor\", \"middle\")\n// //             .attr(\"font-size\", \"16px\")\n// //             .attr(\"fill\", \"red\")\n// //             .attr(\"font-weight\", \"bold\")\n// //             .text(ringLabels[index]);\n// //         }\n// //         renderPoints(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n\n// //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// //       const isProportional = viewMode === \"proportional\";\n// //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// //       let currentAngle = Math.PI / 2;\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         const startAngle = isProportional ?\n// //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// //           (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// //         const centerAngle = startAngle + angleWidth / 2;\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } \n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = (index) => {\n//       const sectors = 2 ** (index + 1);\n//       const points = pointsData[index].points;\n//       const sectorCounts = Array(sectors).fill(0);\n//       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n//       points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//         sectorCounts[bitVectorIndex]++;\n//       });\n\n//       const totalPoints = points.length || 1; // Avoid division by zero\n//       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n//       return sectorCounts.map(count => {\n//         if (count === 0) return minAngle;\n//         return (count / totalPoints) * remainingAngle;\n//       });\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const rotationOffset = Math.PI / 2;\n\n//         const proportionalAngles = calculateProportionalAngles(index);\n\n//         let currentAngle = rotationOffset;\n//         proportionalAngles.forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n//       const rotationOffset = Math.PI / 2;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         let startAngle = rotationOffset;\n//         if (isProportional) {\n//           for (let j = 0; j < bitVectorIndex; j++) {\n//             startAngle += angles[j];\n//           }\n//         } else {\n//           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n//         }\n\n//         const angleWidth = angles[bitVectorIndex];\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    // Sort subspaces by dimension (length of key)\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // New implementation for proportional angles\n    const calculateSectorAngles = () => {\n      // Start with the outermost ring (highest dimension)\n      const ringsOrderedByDimension = [...pointsData].sort((a, b) => b.dimensions - a.dimensions);\n      const sectorAngles = {};\n\n      // Process each ring, starting from the outermost\n      ringsOrderedByDimension.forEach(ringData => {\n        const key = ringData.key;\n        const sectors = 2 ** ringData.dimensions;\n        const points = ringData.points || [];\n\n        // Count points in each sector\n        const sectorCounts = Array(sectors).fill(0);\n\n        points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n          sectorCounts[sectorIndex]++;\n        });\n\n        // Minimum angle for sectors with no points (small but visible)\n        const minAngle = 0.05 * (Math.PI * 2) / sectors;\n        const totalPoints = points.length || 1; // Avoid division by zero\n        const emptySectors = sectorCounts.filter(count => count === 0).length;\n        const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n        // Calculate angles for this ring\n        const ringAngles = [];\n        let currentAngle = Math.PI / 2; // Start from top (π/2)\n\n        for (let i = 0; i < sectors; i++) {\n          // Angle for this sector\n          const angle = sectorCounts[i] === 0 ? minAngle : (sectorCounts[i] / totalPoints) * remainingAngle;\n\n          ringAngles.push({\n            startAngle: currentAngle,\n            endAngle: currentAngle + angle,\n            count: sectorCounts[i]\n          });\n\n          currentAngle += angle;\n        }\n\n        sectorAngles[key] = ringAngles;\n      });\n\n      // Now propagate angles from outer to inner rings\n      // For each inner ring, merge angles from corresponding outer ring sectors\n      subspaces.forEach(key => {\n        // Skip the outermost ring as it's already calculated\n        if (key === ringsOrderedByDimension[0].key) return;\n\n        const dimensions = key.length;\n        const parentKey = subspaces.find(k => k.length === dimensions + 1);\n\n        // If we have a parent ring, adjust angles based on parent\n        if (parentKey && sectorAngles[parentKey]) {\n          const parentAngles = sectorAngles[parentKey];\n          const sectors = 2 ** dimensions;\n          const adjustedAngles = [];\n\n          // For each sector in this ring\n          for (let i = 0; i < sectors; i++) {\n            // Each sector corresponds to two sectors in the parent ring\n            const startSector = i * 2;\n            const endSector = startSector + 1;\n\n            // If parent sectors exist, merge their angles\n            if (parentAngles[startSector] && parentAngles[endSector]) {\n              adjustedAngles.push({\n                startAngle: parentAngles[startSector].startAngle,\n                endAngle: parentAngles[endSector].endAngle,\n                count: parentAngles[startSector].count + parentAngles[endSector].count\n              });\n            } else if (parentAngles[startSector]) {\n              adjustedAngles.push({\n                startAngle: parentAngles[startSector].startAngle,\n                endAngle: parentAngles[startSector].endAngle,\n                count: parentAngles[startSector].count\n              });\n            } else {\n              // Fallback if parent sectors don't exist\n              const angle = (2 * Math.PI) / sectors;\n              adjustedAngles.push({\n                startAngle: (Math.PI / 2) + (i * angle),\n                endAngle: (Math.PI / 2) + ((i + 1) * angle),\n                count: 0\n              });\n            }\n          }\n\n          sectorAngles[key] = adjustedAngles;\n        }\n      });\n\n      return sectorAngles;\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** pointsData[index].dimensions;\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsNormal(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      const sectorAngles = calculateSectorAngles();\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n        // Get the angles for this ring\n        const angles = sectorAngles[key] || [];\n\n        // Render sectors\n        angles.forEach((sectorAngle, i) => {\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(sectorAngle.startAngle)\n              .endAngle(sectorAngle.endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPointsProportional(index, innerRadius, outerRadius, angles);\n      });\n    };\n\n    const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n      const rotationOffset = Math.PI / 2;\n      const sectorAngle = 2 * Math.PI / sectors;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        const startAngle = rotationOffset + (sectorAngle * sectorIndex);\n        const centerAngle = startAngle + (sectorAngle / 2);\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const radius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n\n        renderPoint(point, x, y, index);\n      });\n    };\n\n    const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const sectorIndex = Math.min(parseInt(bitVector, 2), sectorAngles.length - 1);\n\n        // Get angle info for this sector\n        const sector = sectorAngles[sectorIndex];\n        if (!sector) return;\n\n        const centerAngle = sector.startAngle + ((sector.endAngle - sector.startAngle) / 2);\n\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const radius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n\n        renderPoint(point, x, y, index);\n      });\n    };\n\n    const renderPoint = (point, x, y, index) => {\n      point.Point_ID.forEach((id) => {\n        if (!pointPositions[id]) {\n          pointPositions[id] = [];\n        }\n        pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n      });\n\n      g.append(\"circle\")\n        .attr(\"cx\", x)\n        .attr(\"cy\", y)\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"black\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 0.5)\n        .style(\"pointer-events\", \"visible\")\n        .on(\"mouseover\", (event) => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n          tooltip\n            .style(\"visibility\", \"visible\")\n            .html(\n              `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n            );\n          setHoveredCoordinates({ ...point, label: labelText });\n        })\n        .on(\"mousemove\", (event) => {\n          tooltip\n            .style(\"top\", event.pageY + 10 + \"px\")\n            .style(\"left\", event.pageX + 10 + \"px\");\n        })\n        .on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw connections between points\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    // Add zoom functionality\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}