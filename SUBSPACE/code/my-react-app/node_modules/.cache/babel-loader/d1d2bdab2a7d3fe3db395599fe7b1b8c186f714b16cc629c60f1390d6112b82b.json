{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\");\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                   )\n//                 })\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    // **Generate labels A, B, C, D... for rings**\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n        const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", d3.hsl(index % 2 === 0 ? 0 : 220, 0.9, 0.6)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n      }\n\n      // **Add Labels (A, B, C, ...) instead of subspace names**\n      g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5) // Position above the ring\n      .attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"14px\").attr(\"font-weight\", \"bold\").text(ringLabels[index]); // Use generated label\n\n      jsonData[key].forEach((point, i) => {\n        const bitVector = Object.entries(point).filter(([k]) => k !== \"Point_ID\").map(([k, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const x = randomRadius * Math.cos(centerAngle);\n        const y = randomRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${point.Point_ID.join(\", \")}<br>Subspace: ${ringLabels[index]}`);\n          setHoveredCoordinates({\n            ...point\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", \"gray\").attr(\"stroke-width\", 0.3);\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","subspaces","sort","a","b","ringLabels","map","_","i","String","fromCharCode","pointPositions","forEach","key","index","innerRadius","outerRadius","sectors","rotationOffset","PI","startAngle","endAngle","arc","hsl","text","point","bitVector","entries","filter","k","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","centerAngle","x","cos","y","sin","Point_ID","id","push","subspaceId","on","event","html","pageY","pageX","pointId","positions","zoom","transform","call","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\");\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                   )\n//                 })\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\n\n\n\n\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    // **Generate labels A, B, C, D... for rings**\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    const pointPositions = {};\n\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n        const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n        g.append(\"path\")\n          .attr(\"d\", d3.arc()\n            .innerRadius(innerRadius)\n            .outerRadius(outerRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle)\n          )\n          .attr(\"fill\", d3.hsl(index % 2 === 0 ? 0 : 220, 0.9, 0.6))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"cursor\", \"pointer\");\n      }\n\n      // **Add Labels (A, B, C, ...) instead of subspace names**\n      g.append(\"text\")\n        .attr(\"x\", 0)\n        .attr(\"y\", -outerRadius - 5) // Position above the ring\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"font-size\", \"14px\")\n        .attr(\"font-weight\", \"bold\")\n        .text(ringLabels[index]); // Use generated label\n\n      jsonData[key].forEach((point, i) => {\n        const bitVector = Object.entries(point)\n          .filter(([k]) => k !== \"Point_ID\")\n          .map(([k, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const x = randomRadius * Math.cos(centerAngle);\n        const y = randomRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(`Point_IDs: ${point.Point_ID.join(\", \")}<br>Subspace: ${ringLabels[index]}`);\n            setHoveredCoordinates({ ...point });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", \"gray\")\n            .attr(\"stroke-width\", 0.3);\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}