{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     console.log(subspaces.length);\n\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, \n//       subspaceId: key, \n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 1200;\n//     const height = 1200;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); \n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     pointsData.forEach((subspace, index) => {\n//       const radius = maxRadius * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** (index +1); \n//       console.log(sectors);\n\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); \n\n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n\n//       g.append(\"circle\")\n//         .attr(\"r\", radius)\n//         .attr(\"stroke\", \"black\") \n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) \n//         .attr(\"stroke-width\", 2); \n\n//       if (subspace.dimensions > 0) {\n\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = radius * Math.cos(angle);\n//           const y1 = radius * Math.sin(angle);\n//           g.append(\"line\")\n//             .attr(\"x1\", 0)\n//             .attr(\"y1\", 0)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 1);\n\n//           const labelX = (radius + 10) * Math.cos(angle); \n//           const labelY = (radius + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) \n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//         }\n//       }\n\n//       const sectorRadius = radius;\n\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         if (Math.sqrt(x * x + y * y) <= radius) {\n//           const circle = g\n//             .append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\")\n//             .text(\n//               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             );\n\n//           circle\n//             .on(\"mouseover\", function () {\n//               d3.select(this).attr(\"fill\", \"red\");\n//             })\n//             .on(\"mouseout\", function () {\n//               d3.select(this).attr(\"fill\", \"black\");\n//             });\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); \n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"1200px\", height: \"1200px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     console.log(\"Number of subspaces:\", subspaces.length);\n\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     pointsData.forEach((subspace, index) => {\n//       const radius = maxRadius * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** (index + 1);\n\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       g.append(\"circle\")\n//         .attr(\"r\", radius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2);\n\n//       if (index + 1 > 0) {\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = radius * Math.cos(angle);\n//           const y1 = radius * Math.sin(angle);\n//           g.append(\"line\")\n//             .attr(\"x1\", 0)\n//             .attr(\"y1\", 0)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 1);\n\n//           const labelX = (radius + 10) * Math.cos(angle);\n//           const labelY = (radius + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//         }\n//       }\n\n//       const sectorRadius = radius;\n\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(index + 1, \"0\");\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         if (Math.sqrt(x * x + y * y) <= radius) {\n//           const circle = g\n//             .append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5);\n\n//           circle\n//             .append(\"title\")\n//             .text(\n//               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             );\n\n//           circle\n//             .on(\"mouseover\", function (event) {\n//               d3.select(this).attr(\"fill\", \"red\");\n//               g.append(\"text\")\n//                 .attr(\"id\", \"tooltip\")\n//                 .attr(\"x\", x + 10)\n//                 .attr(\"y\", y - 10)\n//                 .attr(\"text-anchor\", \"middle\")\n//                 .attr(\"dominant-baseline\", \"middle\")\n//                 .style(\"font-size\", \"12px\")\n//                 .style(\"fill\", \"black\")\n//                 .text(bitPattern);\n//             })\n//             .on(\"mouseout\", function () {\n//               d3.select(this).attr(\"fill\", \"black\");\n//               g.select(\"#tooltip\").remove();\n//             });\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           );\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2);\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n      }\n      subspace.points.forEach(point => {\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const randomAngle = Math.random() * 2 * Math.PI;\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5);\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"600px\",\n      height: \"600px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","forEach","subspace","index","innerRadius","outerRadius","sectors","colorScale","scaleOrdinal","range","subspaceColor","i","angle","PI","x1","cos","y1","sin","point","minRadius","randomRadius","random","randomAngle","x","y","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     console.log(subspaces.length);\n    \n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length, \n//       subspaceId: key, \n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 1200;\n//     const height = 1200;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove(); \n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    \n//     pointsData.forEach((subspace, index) => {\n//       const radius = maxRadius * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** (index +1); \n//       console.log(sectors);\n      \n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]); \n      \n//       const subspaceColor = colorScale(\n//         subspace.dimensions % colorScale.range().length\n//       );\n      \n//       g.append(\"circle\")\n//         .attr(\"r\", radius)\n//         .attr(\"stroke\", \"black\") \n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2) \n//         .attr(\"stroke-width\", 2); \n      \n//       if (subspace.dimensions > 0) {\n        \n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = radius * Math.cos(angle);\n//           const y1 = radius * Math.sin(angle);\n//           g.append(\"line\")\n//             .attr(\"x1\", 0)\n//             .attr(\"y1\", 0)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 1);\n          \n//           const labelX = (radius + 10) * Math.cos(angle); \n//           const labelY = (radius + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5) \n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//         }\n//       }\n\n//       const sectorRadius = radius;\n\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(\n//           subspace.dimensions,\n//           \"0\"\n//         );\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         if (Math.sqrt(x * x + y * y) <= radius) {\n//           const circle = g\n//             .append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .append(\"title\")\n//             .text(\n//               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             );\n\n          \n//           circle\n//             .on(\"mouseover\", function () {\n//               d3.select(this).attr(\"fill\", \"red\");\n//             })\n//             .on(\"mouseout\", function () {\n//               d3.select(this).attr(\"fill\", \"black\");\n//             });\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           ); \n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"1200px\", height: \"1200px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     console.log(\"Number of subspaces:\", subspaces.length);\n\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 600;\n//     const height = 600;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     pointsData.forEach((subspace, index) => {\n//       const radius = maxRadius * ((index + 1) / subspaces.length);\n//       const sectors = 2 ** (index + 1);\n\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       g.append(\"circle\")\n//         .attr(\"r\", radius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2);\n\n//       if (index + 1 > 0) {\n//         for (let i = 0; i < sectors; i++) {\n//           const angle = (2 * Math.PI * i) / sectors;\n//           const x1 = radius * Math.cos(angle);\n//           const y1 = radius * Math.sin(angle);\n//           g.append(\"line\")\n//             .attr(\"x1\", 0)\n//             .attr(\"y1\", 0)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 1);\n\n//           const labelX = (radius + 10) * Math.cos(angle);\n//           const labelY = (radius + 10) * Math.sin(angle);\n\n//           g.append(\"text\")\n//             .attr(\"x\", labelX)\n//             .attr(\"y\", labelY + 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"dominant-baseline\", \"middle\")\n//             .style(\"font-size\", \"10px\")\n//             .style(\"fill\", \"black\");\n//         }\n//       }\n\n//       const sectorRadius = radius;\n\n//       subspace.points.forEach((point) => {\n//         const bitPattern = point.Point_ID.toString(2).padStart(index + 1, \"0\");\n//         const sectorIndex = parseInt(bitPattern, 2);\n//         const sectorAngleStart = (2 * Math.PI * sectorIndex) / sectors;\n//         const sectorAngleEnd = (2 * Math.PI * (sectorIndex + 1)) / sectors;\n\n//         const minRadius = sectorRadius * 0.2;\n//         const randomRadius =\n//           minRadius + Math.random() * (sectorRadius - minRadius);\n//         const randomAngle =\n//           sectorAngleStart +\n//           Math.random() * (sectorAngleEnd - sectorAngleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         if (Math.sqrt(x * x + y * y) <= radius) {\n//           const circle = g\n//             .append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 4)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5);\n\n//           circle\n//             .append(\"title\")\n//             .text(\n//               `ID: ${point.Point_ID}, Binary: ${bitPattern}, Subspace: ${subspace.subspaceId}`\n//             );\n\n//           circle\n//             .on(\"mouseover\", function (event) {\n//               d3.select(this).attr(\"fill\", \"red\");\n//               g.append(\"text\")\n//                 .attr(\"id\", \"tooltip\")\n//                 .attr(\"x\", x + 10)\n//                 .attr(\"y\", y - 10)\n//                 .attr(\"text-anchor\", \"middle\")\n//                 .attr(\"dominant-baseline\", \"middle\")\n//                 .style(\"font-size\", \"12px\")\n//                 .style(\"fill\", \"black\")\n//                 .text(bitPattern);\n//             })\n//             .on(\"mouseout\", function () {\n//               d3.select(this).attr(\"fill\", \"black\");\n//               g.select(\"#tooltip\").remove();\n//             });\n//         } else {\n//           console.warn(\n//             `Point ${point.Point_ID} is outside the subspace ${subspace.subspaceId}`\n//           );\n//         }\n//       });\n//     });\n//   }, [jsonData]);\n\n//   return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 600;\n    const height = 600;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2);\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1);\n      }\n\n      subspace.points.forEach((point) => {\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n        const randomAngle = Math.random() * 2 * Math.PI;\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5);\n      });\n    });\n  }, [jsonData]);\n\n  return <svg ref={graphRef} style={{ width: \"600px\", height: \"600px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}