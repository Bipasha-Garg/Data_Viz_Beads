{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useRef, useState } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n// // //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// // //     const getRingColor = (index) => {\n// // //       const totalRings = Object.keys(jsonData).length;\n// // //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// // //       return d3.color(colorScaleInd(index));\n// // //     };\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       const baseColor = d3.hsl(getRingColor(index));\n// // //       const isPositive = sectorIndex % 2 === 0;\n// // //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key] || [],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n// // //     console.log(\"Points data:\", pointsData.dimensions);\n// // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// // //     const pointPositions = {};\n\n// // //     const renderNormalView = () => {\n// // //       subspaces.forEach((key, index) => {\n// // //         if (!ringVisibility[key]) return;\n// // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //         const sectors = 2 ** (index + 1);\n// // //         const rotationOffset = Math.PI / 2;\n\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // //           g.append(\"path\")\n// // //             .attr(\"d\", d3.arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle(startAngle)\n// // //               .endAngle(endAngle)\n// // //             )\n// // //             .attr(\"fill\", getSectorColor(index, i))\n// // //             .attr(\"fill-opacity\", 0.3)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .style(\"cursor\", \"pointer\");\n\n// // //           g.append(\"text\")\n// // //             .attr(\"x\", 0)\n// // //             .attr(\"y\", -outerRadius - 5)\n// // //             .attr(\"text-anchor\", \"middle\")\n// // //             .attr(\"font-size\", \"16px\")\n// // //             .attr(\"fill\", \"red\")\n// // //             .attr(\"font-weight\", \"bold\")\n// // //             .text(ringLabels[index]);\n// // //         }\n// // //         renderPoints(index, innerRadius, outerRadius, sectors);\n// // //       });\n// // //     };\n\n// // //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// // //       const isProportional = viewMode === \"proportional\";\n// // //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// // //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// // //       let currentAngle = Math.PI / 2;\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// // //         const startAngle = isProportional ?\n// // //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// // //           (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// // //         const centerAngle = startAngle + angleWidth / 2;\n\n// // //         const minRadius = innerRadius;\n// // //         const maxRadius = outerRadius;\n// // //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.9;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// // //               );\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     };\n\n// // //     if (viewMode === \"normal\") {\n// // //       renderNormalView();\n// // //     } \n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           const line = g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 1.5)\n// // //             .attr(\"stroke-opacity\", 0.9)\n// // //             .style(\"cursor\", \"pointer\")\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n// // //     svg.call(zoom);\n\n// // //     return () => {\n// // //       tooltip.remove();\n// // //     };\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <div style={{ marginBottom: \"10px\" }}>\n// // //         <button\n// // //           onClick={() => setViewMode(\"normal\")}\n// // //           style={{\n// // //             marginRight: \"10px\",\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Normal View\n// // //         </button>\n// // //         <button\n// // //           onClick={() => setViewMode(\"proportional\")}\n// // //           style={{\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Proportional View\n// // //         </button>\n// // //       </div>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n\n// //     const calculateProportionalAngles = (index) => {\n// //       const sectors = 2 ** (index + 1);\n// //       const points = pointsData[index].points;\n// //       const sectorCounts = Array(sectors).fill(0);\n// //       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n// //       points.forEach(point => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n// //         sectorCounts[bitVectorIndex]++;\n// //       });\n\n// //       const totalPoints = points.length || 1; // Avoid division by zero\n// //       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n// //       return sectorCounts.map(count => {\n// //         if (count === 0) return minAngle;\n// //         return (count / totalPoints) * remainingAngle;\n// //       });\n// //     };\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n// //         }\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPoints(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n// //     const renderProportionalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const rotationOffset = Math.PI / 2;\n\n// //         const proportionalAngles = calculateProportionalAngles(index);\n\n// //         let currentAngle = rotationOffset;\n// //         proportionalAngles.forEach((angle, i) => {\n// //           const startAngle = currentAngle;\n// //           const endAngle = currentAngle + angle;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           currentAngle = endAngle;\n// //         });\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n// //       });\n// //     };\n\n// //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// //       const isProportional = viewMode === \"proportional\";\n// //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         let startAngle = rotationOffset;\n// //         if (isProportional) {\n// //           for (let j = 0; j < bitVectorIndex; j++) {\n// //             startAngle += angles[j];\n// //           }\n// //         } else {\n// //           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n// //         }\n\n// //         const angleWidth = angles[bitVectorIndex];\n// //         const centerAngle = startAngle + angleWidth / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } else if (viewMode === \"proportional\") {\n// //       renderProportionalView();\n// //     }\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length || 1,\n      // Ensure dimensions is at least 1\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const calculateProportionalAngles = index => {\n      if (index < 0 || index >= pointsData.length) {\n        console.error(\"Invalid index:\", index);\n        return Array(2).fill(Math.PI); // Return a safe default\n      }\n      const currentSubspace = pointsData[index];\n      const dimensions = Math.max(1, currentSubspace.dimensions);\n\n      // Calculate sectors based on dimensions, with a safe upper limit\n      const maxSafeDimensions = 50; // Limit to prevent excessive sectors\n      const safeDimensions = Math.min(dimensions, maxSafeDimensions);\n      const sectors = Math.pow(2, safeDimensions);\n\n      // Ensure sectors is a safe number\n      if (!Number.isFinite(sectors) || sectors <= 0 || sectors > 1024) {\n        console.error(\"Invalid sectors calculation:\", {\n          index,\n          dimensions,\n          sectors\n        });\n        return Array(2).fill(Math.PI); // Return a safe default\n      }\n\n      // Initialize angles array with the correct size\n      const sectorAngles = Array(sectors).fill(0);\n      if (index === pointsData.length - 1) {\n        // Outermost ring\n        const sectorCounts = Array(sectors).fill(0);\n        const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n        // Count points in each sector\n        if (Array.isArray(currentSubspace.points)) {\n          currentSubspace.points.forEach(point => {\n            const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n            // Ensure we don't exceed the number of dimensions we can handle\n            const limitedPointData = pointData.slice(0, safeDimensions);\n\n            // Create bit vector based on coordinates\n            const bitVector = limitedPointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n\n            // Parse bit vector to get sector index with safe fallback\n            let bitVectorIndex;\n            try {\n              bitVectorIndex = parseInt(bitVector, 2);\n              if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n            } catch (e) {\n              bitVectorIndex = 0;\n            }\n\n            // Ensure index is within bounds\n            bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n            sectorCounts[bitVectorIndex]++;\n          });\n        }\n        const totalPoints = currentSubspace.points.length || 1;\n        const emptyCount = sectorCounts.filter(count => count === 0).length;\n        const remainingAngle = 2 * Math.PI - minAngle * emptyCount;\n        const pointTotal = sectorCounts.reduce((sum, count) => sum + count, 0);\n\n        // Calculate proportional angles\n        for (let i = 0; i < sectors; i++) {\n          if (sectorCounts[i] === 0) {\n            sectorAngles[i] = minAngle;\n          } else {\n            sectorAngles[i] = sectorCounts[i] / (pointTotal || 1) * remainingAngle;\n          }\n        }\n        return sectorAngles;\n      } else {\n        // Inner rings\n        // Get angles from next ring\n        let nextRingAngles = [];\n        try {\n          nextRingAngles = calculateProportionalAngles(index + 1);\n        } catch (e) {\n          console.error(\"Error calculating next ring angles:\", e);\n          return Array(sectors).fill(2 * Math.PI / sectors); // Safe fallback\n        }\n\n        // If next ring doesn't have valid angles, use equal distribution\n        if (!nextRingAngles || nextRingAngles.length === 0) {\n          return Array(sectors).fill(2 * Math.PI / sectors);\n        }\n\n        // Create angles for this ring by combining pairs from next ring\n        for (let i = 0; i < sectors; i++) {\n          const childIndex1 = i * 2;\n          const childIndex2 = i * 2 + 1;\n\n          // Safely get angles from next ring\n          const angle1 = childIndex1 < nextRingAngles.length ? nextRingAngles[childIndex1] : 0;\n          const angle2 = childIndex2 < nextRingAngles.length ? nextRingAngles[childIndex2] : 0;\n          sectorAngles[i] = angle1 + angle2;\n        }\n        return sectorAngles;\n      }\n    };\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = Math.pow(2, index + 1);\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      for (let index = subspaces.length - 1; index >= 0; index--) {\n        if (!ringVisibility[pointsData[index].key]) continue;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const rotationOffset = Math.PI / 2;\n        let proportionalAngles;\n        try {\n          proportionalAngles = calculateProportionalAngles(index);\n        } catch (e) {\n          console.error(\"Error calculating proportional angles:\", e);\n          // Fallback to equal distribution\n          const safeSectors = Math.pow(2, Math.min(index + 1, 8));\n          proportionalAngles = Array(safeSectors).fill(2 * Math.PI / safeSectors);\n        }\n\n        // Validate proportionalAngles\n        if (!Array.isArray(proportionalAngles) || proportionalAngles.length === 0) {\n          console.error(\"Invalid angles for index:\", index);\n          continue;\n        }\n        let currentAngle = rotationOffset;\n\n        // Render sectors in the same order as normal view\n        for (let i = 0; i < proportionalAngles.length; i++) {\n          const angle = proportionalAngles[i];\n\n          // Ensure angle is a valid number\n          if (typeof angle !== 'number' || !isFinite(angle)) {\n            console.error(\"Invalid angle:\", angle);\n            continue;\n          }\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n      }\n    };\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const points = pointsData[index].points;\n      if (!Array.isArray(points) || points.length === 0) {\n        return; // No points to render\n      }\n\n      // Ensure we have valid angles or sectors\n      let sectors, angles;\n      if (isProportional) {\n        if (!Array.isArray(anglesOrSectors) || anglesOrSectors.length === 0) {\n          console.error(\"Invalid angles for point rendering:\", anglesOrSectors);\n          return;\n        }\n        sectors = anglesOrSectors.length;\n        angles = anglesOrSectors;\n      } else {\n        if (!Number.isFinite(anglesOrSectors) || anglesOrSectors <= 0) {\n          console.error(\"Invalid sectors for point rendering:\", anglesOrSectors);\n          return;\n        }\n        sectors = anglesOrSectors;\n        angles = Array(sectors).fill(2 * Math.PI / sectors);\n      }\n      const rotationOffset = Math.PI / 2;\n      const dimensions = Math.min(pointsData[index].dimensions, 10); // Limit dimensions\n\n      points.forEach((point, i) => {\n        if (!point || typeof point !== 'object') {\n          console.error(\"Invalid point:\", point);\n          return;\n        }\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n        // Ensure we don't exceed the number of dimensions we can handle\n        const limitedPointData = pointData.slice(0, dimensions);\n\n        // Create bit vector based on coordinates\n        const bitVector = limitedPointData.map(([_, coord]) => {\n          const num = parseFloat(coord);\n          return isNaN(num) ? 0 : num >= 0 ? 1 : 0;\n        }).join(\"\");\n\n        // Parse bit vector to get sector index with safe fallback\n        let bitVectorIndex;\n        try {\n          bitVectorIndex = parseInt(bitVector, 2);\n          if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n        } catch (e) {\n          bitVectorIndex = 0;\n        }\n\n        // Ensure index is within bounds\n        bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n        let startAngle = rotationOffset;\n        if (isProportional) {\n          for (let j = 0; j < bitVectorIndex; j++) {\n            if (j < angles.length) {\n              startAngle += angles[j] || 0;\n            }\n          }\n        } else {\n          startAngle += 2 * Math.PI * bitVectorIndex / sectors;\n        }\n        const angleWidth = bitVectorIndex < angles.length ? angles[bitVectorIndex] : 2 * Math.PI / sectors;\n        const centerAngle = startAngle + angleWidth / 2;\n        const totalPoints = points.length || 1;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        // Ensure Point_ID is an array\n        const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID : [point.Point_ID];\n        pointIds.forEach(id => {\n          if (!id) return;\n          if (!pointPositions[id]) pointPositions[id] = [];\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: pointsData[index].key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID.join(\", \") : point.Point_ID;\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (Array.isArray(point.Point_ID) && Array.isArray(pointList) && point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1087,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1063,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","calculateProportionalAngles","fill","PI","currentSubspace","max","maxSafeDimensions","safeDimensions","sectors","pow","isFinite","sectorAngles","sectorCounts","minAngle","forEach","point","pointData","entries","filter","limitedPointData","slice","bitVector","coord","join","bitVectorIndex","parseInt","isNaN","e","totalPoints","emptyCount","count","remainingAngle","pointTotal","reduce","sum","nextRingAngles","childIndex1","childIndex2","angle1","angle2","renderNormalView","innerRadius","outerRadius","rotationOffset","startAngle","endAngle","arc","text","renderPoints","renderProportionalView","proportionalAngles","safeSectors","currentAngle","angle","anglesOrSectors","isProportional","angles","num","parseFloat","j","angleWidth","centerAngle","clusterFactor","overlapRadius","x","cos","y","sin","pointIds","Point_ID","id","push","on","event","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // // import React, { useEffect, useRef, useState } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n// // //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// // //   useEffect(() => {\n// // //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// // //     const getRingColor = (index) => {\n// // //       const totalRings = Object.keys(jsonData).length;\n// // //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// // //       return d3.color(colorScaleInd(index));\n// // //     };\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       const baseColor = d3.hsl(getRingColor(index));\n// // //       const isPositive = sectorIndex % 2 === 0;\n// // //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key] || [],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n// // //     console.log(\"Points data:\", pointsData.dimensions);\n// // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// // //     const pointPositions = {};\n\n// // //     const renderNormalView = () => {\n// // //       subspaces.forEach((key, index) => {\n// // //         if (!ringVisibility[key]) return;\n// // //         const innerRadius = (index / subspaces.length) * maxRadius;\n// // //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //         const sectors = 2 ** (index + 1);\n// // //         const rotationOffset = Math.PI / 2;\n\n// // //         for (let i = 0; i < sectors; i++) {\n// // //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // //           g.append(\"path\")\n// // //             .attr(\"d\", d3.arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle(startAngle)\n// // //               .endAngle(endAngle)\n// // //             )\n// // //             .attr(\"fill\", getSectorColor(index, i))\n// // //             .attr(\"fill-opacity\", 0.3)\n// // //             .attr(\"stroke\", \"black\")\n// // //             .attr(\"stroke-width\", 0.5)\n// // //             .style(\"cursor\", \"pointer\");\n\n// // //           g.append(\"text\")\n// // //             .attr(\"x\", 0)\n// // //             .attr(\"y\", -outerRadius - 5)\n// // //             .attr(\"text-anchor\", \"middle\")\n// // //             .attr(\"font-size\", \"16px\")\n// // //             .attr(\"fill\", \"red\")\n// // //             .attr(\"font-weight\", \"bold\")\n// // //             .text(ringLabels[index]);\n// // //         }\n// // //         renderPoints(index, innerRadius, outerRadius, sectors);\n// // //       });\n// // //     };\n\n\n// // //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// // //       const isProportional = viewMode === \"proportional\";\n// // //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// // //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// // //       let currentAngle = Math.PI / 2;\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// // //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// // //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// // //         const startAngle = isProportional ?\n// // //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// // //           (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// // //         const centerAngle = startAngle + angleWidth / 2;\n\n// // //         const minRadius = innerRadius;\n// // //         const maxRadius = outerRadius;\n// // //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.9;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// // //               );\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     };\n\n// // //     if (viewMode === \"normal\") {\n// // //       renderNormalView();\n// // //     } \n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           const line = g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 1.5)\n// // //             .attr(\"stroke-opacity\", 0.9)\n// // //             .style(\"cursor\", \"pointer\")\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n// // //     svg.call(zoom);\n\n// // //     return () => {\n// // //       tooltip.remove();\n// // //     };\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <div style={{ marginBottom: \"10px\" }}>\n// // //         <button\n// // //           onClick={() => setViewMode(\"normal\")}\n// // //           style={{\n// // //             marginRight: \"10px\",\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Normal View\n// // //         </button>\n// // //         <button\n// // //           onClick={() => setViewMode(\"proportional\")}\n// // //           style={{\n// // //             padding: \"5px 10px\",\n// // //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// // //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// // //           }}\n// // //         >\n// // //           Proportional View\n// // //         </button>\n// // //       </div>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n\n// //     const calculateProportionalAngles = (index) => {\n// //       const sectors = 2 ** (index + 1);\n// //       const points = pointsData[index].points;\n// //       const sectorCounts = Array(sectors).fill(0);\n// //       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n// //       points.forEach(point => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n// //         sectorCounts[bitVectorIndex]++;\n// //       });\n\n// //       const totalPoints = points.length || 1; // Avoid division by zero\n// //       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n// //       return sectorCounts.map(count => {\n// //         if (count === 0) return minAngle;\n// //         return (count / totalPoints) * remainingAngle;\n// //       });\n// //     };\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n// //         }\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPoints(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n// //     const renderProportionalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const rotationOffset = Math.PI / 2;\n\n// //         const proportionalAngles = calculateProportionalAngles(index);\n\n// //         let currentAngle = rotationOffset;\n// //         proportionalAngles.forEach((angle, i) => {\n// //           const startAngle = currentAngle;\n// //           const endAngle = currentAngle + angle;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           currentAngle = endAngle;\n// //         });\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(ringLabels[index]);\n\n// //         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n// //       });\n// //     };\n\n// //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// //       const isProportional = viewMode === \"proportional\";\n// //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         let startAngle = rotationOffset;\n// //         if (isProportional) {\n// //           for (let j = 0; j < bitVectorIndex; j++) {\n// //             startAngle += angles[j];\n// //           }\n// //         } else {\n// //           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n// //         }\n\n// //         const angleWidth = angles[bitVectorIndex];\n// //         const centerAngle = startAngle + angleWidth / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } else if (viewMode === \"proportional\") {\n// //       renderProportionalView();\n// //     }\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length || 1, // Ensure dimensions is at least 1\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    const calculateProportionalAngles = (index) => {\n      if (index < 0 || index >= pointsData.length) {\n        console.error(\"Invalid index:\", index);\n        return Array(2).fill(Math.PI); // Return a safe default\n      }\n\n      const currentSubspace = pointsData[index];\n      const dimensions = Math.max(1, currentSubspace.dimensions);\n\n      // Calculate sectors based on dimensions, with a safe upper limit\n      const maxSafeDimensions = 50; // Limit to prevent excessive sectors\n      const safeDimensions = Math.min(dimensions, maxSafeDimensions);\n      const sectors = Math.pow(2, safeDimensions);\n\n      // Ensure sectors is a safe number\n      if (!Number.isFinite(sectors) || sectors <= 0 || sectors > 1024) {\n        console.error(\"Invalid sectors calculation:\", { index, dimensions, sectors });\n        return Array(2).fill(Math.PI); // Return a safe default\n      }\n\n      // Initialize angles array with the correct size\n      const sectorAngles = Array(sectors).fill(0);\n\n      if (index === pointsData.length - 1) { // Outermost ring\n        const sectorCounts = Array(sectors).fill(0);\n        const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n        // Count points in each sector\n        if (Array.isArray(currentSubspace.points)) {\n          currentSubspace.points.forEach(point => {\n            const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n            // Ensure we don't exceed the number of dimensions we can handle\n            const limitedPointData = pointData.slice(0, safeDimensions);\n\n            // Create bit vector based on coordinates\n            const bitVector = limitedPointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n\n            // Parse bit vector to get sector index with safe fallback\n            let bitVectorIndex;\n            try {\n              bitVectorIndex = parseInt(bitVector, 2);\n              if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n            } catch (e) {\n              bitVectorIndex = 0;\n            }\n\n            // Ensure index is within bounds\n            bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n            sectorCounts[bitVectorIndex]++;\n          });\n        }\n\n        const totalPoints = currentSubspace.points.length || 1;\n        const emptyCount = sectorCounts.filter(count => count === 0).length;\n        const remainingAngle = 2 * Math.PI - (minAngle * emptyCount);\n        const pointTotal = sectorCounts.reduce((sum, count) => sum + count, 0);\n\n        // Calculate proportional angles\n        for (let i = 0; i < sectors; i++) {\n          if (sectorCounts[i] === 0) {\n            sectorAngles[i] = minAngle;\n          } else {\n            sectorAngles[i] = (sectorCounts[i] / (pointTotal || 1)) * remainingAngle;\n          }\n        }\n\n        return sectorAngles;\n      } else { // Inner rings\n        // Get angles from next ring\n        let nextRingAngles = [];\n        try {\n          nextRingAngles = calculateProportionalAngles(index + 1);\n        } catch (e) {\n          console.error(\"Error calculating next ring angles:\", e);\n          return Array(sectors).fill(2 * Math.PI / sectors); // Safe fallback\n        }\n\n        // If next ring doesn't have valid angles, use equal distribution\n        if (!nextRingAngles || nextRingAngles.length === 0) {\n          return Array(sectors).fill(2 * Math.PI / sectors);\n        }\n\n        // Create angles for this ring by combining pairs from next ring\n        for (let i = 0; i < sectors; i++) {\n          const childIndex1 = i * 2;\n          const childIndex2 = i * 2 + 1;\n\n          // Safely get angles from next ring\n          const angle1 = childIndex1 < nextRingAngles.length ? nextRingAngles[childIndex1] : 0;\n          const angle2 = childIndex2 < nextRingAngles.length ? nextRingAngles[childIndex2] : 0;\n\n          sectorAngles[i] = angle1 + angle2;\n        }\n\n        return sectorAngles;\n      }\n    };\n\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = Math.pow(2, index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n    const renderProportionalView = () => {\n      for (let index = subspaces.length - 1; index >= 0; index--) {\n        if (!ringVisibility[pointsData[index].key]) continue;\n\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const rotationOffset = Math.PI / 2;\n\n        let proportionalAngles;\n        try {\n          proportionalAngles = calculateProportionalAngles(index);\n        } catch (e) {\n          console.error(\"Error calculating proportional angles:\", e);\n          // Fallback to equal distribution\n          const safeSectors = Math.pow(2, Math.min(index + 1, 8));\n          proportionalAngles = Array(safeSectors).fill(2 * Math.PI / safeSectors);\n        }\n\n        // Validate proportionalAngles\n        if (!Array.isArray(proportionalAngles) || proportionalAngles.length === 0) {\n          console.error(\"Invalid angles for index:\", index);\n          continue;\n        }\n\n        let currentAngle = rotationOffset;\n\n        // Render sectors in the same order as normal view\n        for (let i = 0; i < proportionalAngles.length; i++) {\n          const angle = proportionalAngles[i];\n\n          // Ensure angle is a valid number\n          if (typeof angle !== 'number' || !isFinite(angle)) {\n            console.error(\"Invalid angle:\", angle);\n            continue;\n          }\n\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n      }\n    };\n\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const points = pointsData[index].points;\n\n      if (!Array.isArray(points) || points.length === 0) {\n        return; // No points to render\n      }\n\n      // Ensure we have valid angles or sectors\n      let sectors, angles;\n      if (isProportional) {\n        if (!Array.isArray(anglesOrSectors) || anglesOrSectors.length === 0) {\n          console.error(\"Invalid angles for point rendering:\", anglesOrSectors);\n          return;\n        }\n        sectors = anglesOrSectors.length;\n        angles = anglesOrSectors;\n      } else {\n        if (!Number.isFinite(anglesOrSectors) || anglesOrSectors <= 0) {\n          console.error(\"Invalid sectors for point rendering:\", anglesOrSectors);\n          return;\n        }\n        sectors = anglesOrSectors;\n        angles = Array(sectors).fill(2 * Math.PI / sectors);\n      }\n\n      const rotationOffset = Math.PI / 2;\n      const dimensions = Math.min(pointsData[index].dimensions, 10); // Limit dimensions\n\n      points.forEach((point, i) => {\n        if (!point || typeof point !== 'object') {\n          console.error(\"Invalid point:\", point);\n          return;\n        }\n\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n        // Ensure we don't exceed the number of dimensions we can handle\n        const limitedPointData = pointData.slice(0, dimensions);\n\n        // Create bit vector based on coordinates\n        const bitVector = limitedPointData.map(([_, coord]) => {\n          const num = parseFloat(coord);\n          return isNaN(num) ? 0 : (num >= 0 ? 1 : 0);\n        }).join(\"\");\n\n        // Parse bit vector to get sector index with safe fallback\n        let bitVectorIndex;\n        try {\n          bitVectorIndex = parseInt(bitVector, 2);\n          if (isNaN(bitVectorIndex)) bitVectorIndex = 0;\n        } catch (e) {\n          bitVectorIndex = 0;\n        }\n\n        // Ensure index is within bounds\n        bitVectorIndex = Math.min(bitVectorIndex, sectors - 1);\n\n        let startAngle = rotationOffset;\n        if (isProportional) {\n          for (let j = 0; j < bitVectorIndex; j++) {\n            if (j < angles.length) {\n              startAngle += angles[j] || 0;\n            }\n          }\n        } else {\n          startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n        }\n\n        const angleWidth = bitVectorIndex < angles.length ? angles[bitVectorIndex] : 2 * Math.PI / sectors;\n        const centerAngle = startAngle + angleWidth / 2;\n        const totalPoints = points.length || 1;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        // Ensure Point_ID is an array\n        const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID : [point.Point_ID];\n\n        pointIds.forEach((id) => {\n          if (!id) return;\n          if (!pointPositions[id]) pointPositions[id] = [];\n          pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = Array.isArray(point.Point_ID) ? point.Point_ID.join(\", \") : point.Point_ID;\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (Array.isArray(point.Point_ID) && Array.isArray(pointList) &&\n                  point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}