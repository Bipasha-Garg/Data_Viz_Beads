{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     const calculateSectorPointCounts = () => {\n//       const sectorCounts = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         return Array(sectors).fill(0);\n//       });\n\n//       subspaces.forEach((key, index) => {\n//         const points = pointsData[index].points;\n//         const sectors = 2 ** (index + 1);\n\n//         points.forEach(point => {\n//           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//           sectorCounts[index][bitVectorIndex]++;\n//         });\n//       });\n\n//       return sectorCounts;\n//     };\n\n//     const calculateRecursiveSectorAngles = () => {\n//       const sectorCounts = calculateSectorPointCounts();\n//       const sectorAngles = [];\n//       const rotationOffset = Math.PI / 2;\n//       const lastRingIndex = subspaces.length - 1;\n//       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n//         const sectors = 2 ** (ringIndex + 1);\n//         const totalPoints = pointsData[ringIndex].points.length || 1; \n//         const minAngle = 0.05 * (Math.PI * 2) / sectors; \n//         if (ringIndex === lastRingIndex) {\n//           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n//           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n//           const angles = sectorCounts[ringIndex].map(count => {\n//             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n//           });\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//         else {\n//           const outerAngles = sectorAngles[ringIndex + 1];\n//           const innerSectors = 2 ** (ringIndex + 1);\n//           const outerSectors = 2 ** (ringIndex + 2);\n//           const ratio = outerSectors / innerSectors;\n\n//           const angles = [];\n//           for (let i = 0; i < innerSectors; i++) {\n//             let sumAngle = 0;\n//             for (let j = 0; j < ratio; j++) {\n//               const outerIdx = i * ratio + j;\n//               sumAngle += outerAngles[outerIdx];\n//             }\n//             angles.push(sumAngle);\n//           }\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//       }\n\n//       return sectorAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const sectorAngles = calculateRecursiveSectorAngles();\n//       const rotationOffset = Math.PI / 2;\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n//         // Draw sectors with their proportional angles\n//         let currentAngle = rotationOffset;\n//         sectorAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n//       });\n//     };\n\n//     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n//       const rotationOffset = 0;\n//       const anglePerSector = 2 * Math.PI / sectors;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n//         const centerAngle = startAngle + (anglePerSector / 2);\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         storePointPosition(point, x, y, index);\n//         drawPoint(point, x, y, index);\n//       });\n//     };\n\n//     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n//       const rotationOffset = 0;\n//       const pointsBySector = {};\n//       pointsData[index].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectors = 2 ** (index + 1);\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       let currentAngle = rotationOffset;\n//       const startAngles = sectorAngles.map((angle, i) => {\n//         const startAngle = currentAngle;\n//         currentAngle += angle;\n//         return startAngle;\n//       });\n\n//       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n//         const sectorIdx = parseInt(sectorIndex);\n//         const startAngle = startAngles[sectorIdx];\n//         const sectorAngle = sectorAngles[sectorIdx];\n//         const centerAngle = startAngle + (sectorAngle / 2);\n\n//         points.forEach((point, i) => {\n//           const totalPointsInSector = points.length;\n//           const clusterFactor = 0.9;\n//           const overlapRadius =\n//             innerRadius +\n//             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n//             Math.max(1, totalPointsInSector);\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n\n//           storePointPosition(point, x, y, index);\n//           drawPoint(point, x, y, index);\n//         });\n//       });\n//     };\n\n//     const storePointPosition = (point, x, y, index) => {\n//       point.Point_ID.forEach((id) => {\n//         if (!pointPositions[id]) {\n//           pointPositions[id] = [];\n//         }\n//         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//       });\n//     };\n\n//     const drawPoint = (point, x, y, index) => {\n//       g.append(\"circle\")\n//         .attr(\"cx\", x)\n//         .attr(\"cy\", y)\n//         .attr(\"r\", 3)\n//         .attr(\"fill\", \"black\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 0.5)\n//         .style(\"pointer-events\", \"visible\")\n//         .on(\"mouseover\", (event) => {\n//           const pointIds = point.Point_ID.join(\", \");\n//           let associatedLabels = [];\n//           if (labelsData && labelsData.labels) {\n//             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                 associatedLabels.push(label);\n//               }\n//             });\n//           }\n//           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//           tooltip\n//             .style(\"visibility\", \"visible\")\n//             .html(\n//               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//             );\n//           setHoveredCoordinates({ ...point, label: labelText });\n//         })\n//         .on(\"mousemove\", (event) => {\n//           tooltip\n//             .style(\"top\", event.pageY + 10 + \"px\")\n//             .style(\"left\", event.pageX + 10 + \"px\");\n//         })\n//         .on(\"mouseout\", () => {\n//           tooltip.style(\"visibility\", \"hidden\");\n//           setHoveredCoordinates(null);\n//         });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.7)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;","map":{"version":3,"names":[],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n//     const calculateSectorPointCounts = () => {\n//       const sectorCounts = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         return Array(sectors).fill(0);\n//       });\n\n//       subspaces.forEach((key, index) => {\n//         const points = pointsData[index].points;\n//         const sectors = 2 ** (index + 1);\n\n//         points.forEach(point => {\n//           const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//           sectorCounts[index][bitVectorIndex]++;\n//         });\n//       });\n\n//       return sectorCounts;\n//     };\n\n//     const calculateRecursiveSectorAngles = () => {\n//       const sectorCounts = calculateSectorPointCounts();\n//       const sectorAngles = [];\n//       const rotationOffset = Math.PI / 2;\n//       const lastRingIndex = subspaces.length - 1;\n//       for (let ringIndex = lastRingIndex; ringIndex >= 0; ringIndex--) {\n//         const sectors = 2 ** (ringIndex + 1);\n//         const totalPoints = pointsData[ringIndex].points.length || 1; \n//         const minAngle = 0.05 * (Math.PI * 2) / sectors; \n//         if (ringIndex === lastRingIndex) {\n//           const emptySectors = sectorCounts[ringIndex].filter(count => count === 0).length;\n//           const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n//           const angles = sectorCounts[ringIndex].map(count => {\n//             return count === 0 ? minAngle : (count / totalPoints) * remainingAngle;\n//           });\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//         else {\n//           const outerAngles = sectorAngles[ringIndex + 1];\n//           const innerSectors = 2 ** (ringIndex + 1);\n//           const outerSectors = 2 ** (ringIndex + 2);\n//           const ratio = outerSectors / innerSectors;\n\n//           const angles = [];\n//           for (let i = 0; i < innerSectors; i++) {\n//             let sumAngle = 0;\n//             for (let j = 0; j < ratio; j++) {\n//               const outerIdx = i * ratio + j;\n//               sumAngle += outerAngles[outerIdx];\n//             }\n//             angles.push(sumAngle);\n//           }\n\n//           sectorAngles[ringIndex] = angles;\n//         }\n//       }\n\n//       return sectorAngles;\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsNormal(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       const sectorAngles = calculateRecursiveSectorAngles();\n//       const rotationOffset = Math.PI / 2;\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n\n//         // Draw sectors with their proportional angles\n//         let currentAngle = rotationOffset;\n//         sectorAngles[index].forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPointsProportional(index, innerRadius, outerRadius, sectorAngles[index]);\n//       });\n//     };\n\n//     const renderPointsNormal = (index, innerRadius, outerRadius, sectors) => {\n//       const rotationOffset = 0;\n//       const anglePerSector = 2 * Math.PI / sectors;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = (anglePerSector * bitVectorIndex) + rotationOffset;\n//         const centerAngle = startAngle + (anglePerSector / 2);\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         storePointPosition(point, x, y, index);\n//         drawPoint(point, x, y, index);\n//       });\n//     };\n\n//     const renderPointsProportional = (index, innerRadius, outerRadius, sectorAngles) => {\n//       const rotationOffset = 0;\n//       const pointsBySector = {};\n//       pointsData[index].points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const sectors = 2 ** (index + 1);\n//         const sectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         if (!pointsBySector[sectorIndex]) {\n//           pointsBySector[sectorIndex] = [];\n//         }\n//         pointsBySector[sectorIndex].push(point);\n//       });\n\n//       let currentAngle = rotationOffset;\n//       const startAngles = sectorAngles.map((angle, i) => {\n//         const startAngle = currentAngle;\n//         currentAngle += angle;\n//         return startAngle;\n//       });\n\n//       Object.entries(pointsBySector).forEach(([sectorIndex, points]) => {\n//         const sectorIdx = parseInt(sectorIndex);\n//         const startAngle = startAngles[sectorIdx];\n//         const sectorAngle = sectorAngles[sectorIdx];\n//         const centerAngle = startAngle + (sectorAngle / 2);\n\n//         points.forEach((point, i) => {\n//           const totalPointsInSector = points.length;\n//           const clusterFactor = 0.9;\n//           const overlapRadius =\n//             innerRadius +\n//             (clusterFactor * (outerRadius - innerRadius) * (i % Math.max(1, totalPointsInSector))) /\n//             Math.max(1, totalPointsInSector);\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n\n//           storePointPosition(point, x, y, index);\n//           drawPoint(point, x, y, index);\n//         });\n//       });\n//     };\n\n//     const storePointPosition = (point, x, y, index) => {\n//       point.Point_ID.forEach((id) => {\n//         if (!pointPositions[id]) {\n//           pointPositions[id] = [];\n//         }\n//         pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//       });\n//     };\n\n//     const drawPoint = (point, x, y, index) => {\n//       g.append(\"circle\")\n//         .attr(\"cx\", x)\n//         .attr(\"cy\", y)\n//         .attr(\"r\", 3)\n//         .attr(\"fill\", \"black\")\n//         .attr(\"stroke\", \"white\")\n//         .attr(\"stroke-width\", 0.5)\n//         .style(\"pointer-events\", \"visible\")\n//         .on(\"mouseover\", (event) => {\n//           const pointIds = point.Point_ID.join(\", \");\n//           let associatedLabels = [];\n//           if (labelsData && labelsData.labels) {\n//             Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//               if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                 associatedLabels.push(label);\n//               }\n//             });\n//           }\n//           const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//           tooltip\n//             .style(\"visibility\", \"visible\")\n//             .html(\n//               `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//             );\n//           setHoveredCoordinates({ ...point, label: labelText });\n//         })\n//         .on(\"mousemove\", (event) => {\n//           tooltip\n//             .style(\"top\", event.pageY + 10 + \"px\")\n//             .style(\"left\", event.pageX + 10 + \"px\");\n//         })\n//         .on(\"mouseout\", () => {\n//           tooltip.style(\"visibility\", \"hidden\");\n//           setHoveredCoordinates(null);\n//         });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.7)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}