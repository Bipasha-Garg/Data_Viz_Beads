{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// ____________________________________________________________________________________________________________________________________________\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  const [applyToAllRings, setApplyToAllRings] = useState(false);\n  useEffect(() => {\n    // check data json file\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    // check label json file\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n\n    // const getSectorColor = (index, sectorIndex) => {\n    //   // console.log(sectorIndex);\n    //   console.log(sectorIndex % 2);\n    //   return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    // };\n    // const getSectorColor = (index, sectorIndex) => {\n    //   if (index === 0) { // Innermost ring (2 sectors)\n    //     return sectorIndex === 0 ? d3.hsl(180, 0.9, 0.7)  // Cyan for sector 0 (was red)\n    //       : d3.hsl(0, 0.9, 0.6);    // Red for sector 1 (was cyan)\n    //   } else if (index === 1) { // Second ring (4 sectors)\n    //     switch (sectorIndex) {\n    //       case 0: return d3.hsl(180, 0.9, 0.65);  // Cyan for [+,+] (was red)\n    //       case 1: return d3.hsl(0, 0.9, 0.65);    // Red for [-,+] (was green)\n    //       case 2: return d3.hsl(90, 0.9, 0.65);   // Green for [+,-] (was purple)\n    //       case 3: return d3.hsl(270, 0.9, 0.65);  // Purple for [-,-] (was cyan)\n    //       default: return d3.hsl(0, 0.9, 0.6);    // Fallback\n    //     }\n    //   } else {\n    //     // Original pattern for outer rings (unchanged)\n    //     return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    //   }\n    // };\n\n    const subspaces = Object.keys(jsonData);\n    // subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    let highlightedElements = null;\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        // const rotationOffset = Math.PI / 2;\n\n        const pointsBySector = new Array(sectors).fill(0);\n        pointsData[index].points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          pointsBySector[sectorIndex]++;\n        });\n        const totalPoints = pointsData[index].points.length;\n        const minSectorAngle = totalPoints > 0 ? Math.PI * 0.91 / sectors : 2 * Math.PI / sectors;\n        let sectorAngles = [];\n        if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n          const totalAngle = 2 * Math.PI;\n          const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n          const remainingAngle = totalAngle - totalOccupiedSectors * minSectorAngle;\n          sectorAngles = pointsBySector.map(count => {\n            if (count === 0) return minSectorAngle;\n            return minSectorAngle + remainingAngle * count / totalPoints;\n          });\n        } else {\n          sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n        }\n\n        // let currentAngle = rotationOffset;\n        let currentAngle = 0;\n        const sectorStartAngles = [currentAngle];\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = startAngle + sectorAngles[i];\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n          if (i === 0) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n        }\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n          const totalPointsInSector = pointsBySector[bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0 ? innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector) / totalPointsInSector : randomRadius;\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach(id => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({\n              x,\n              y,\n              point,\n              subspaceId: key\n            });\n          });\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      });\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            }).on(\"mousemove\", event => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            }).on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            }).on(\"click\", event => {\n              var _Object$entries$find;\n              // clearHighlights();\n\n              const originalColor = getLabelColor(pointId);\n              line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n              const circles = g.selectAll(\"circle\").filter(d => {\n                const circleX = parseFloat(this.getAttribute(\"cx\"));\n                const circleY = parseFloat(this.getAttribute(\"cy\"));\n                return Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1 || Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1;\n              }).attr(\"r\", 6).attr(\"fill\", \"yellow\");\n              highlightedElements = {\n                line,\n                circles,\n                originalColor\n              };\n              const point1 = positions[i].point;\n              const point2 = positions[i + 1].point;\n              const coords1 = Object.entries(point1).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n              const coords2 = Object.entries(point2).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n              const label1 = ((_Object$entries$find = Object.entries((labelsData === null || labelsData === void 0 ? void 0 : labelsData.labels) || {}).find(([_, ids]) => ids.includes(Number(pointId)))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]) || \"No Label\";\n\n              // edgePopup\n              //   .style(\"visibility\", \"visible\")\n              //   .html(`\n              //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n              //     <strong>Point 1</strong><br>\n              //     Subspace: ${positions[i].subspaceId}<br>\n              //     Coordinates: ${coords1}<br>\n              //     Label: ${label1}<br><br>\n              //     <strong>Point 2</strong><br>\n              //     Subspace: ${positions[i + 1].subspaceId}<br>\n              //     Coordinates: ${coords2}<br>\n              //     Label: ${label1}\n              //   `)\n              //   .style(\"top\", event.pageY + 15 + \"px\")\n              //   .style(\"left\", event.pageX + 15 + \"px\");\n\n              // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n              //   if (!edgePopup.node().contains(e.target)) {\n              //     edgePopup.style(\"visibility\", \"hidden\");\n              //     // clearHighlights();\n              //     d3.select(\"body\").on(\"click.edgePopup\", null);\n              //   }\n              // });\n            });\n          }\n        }\n      });\n      const zoom = d3.zoom().on(\"zoom\", event => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n    drawGraph();\n    return () => {\n      tooltip.remove();\n      // edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsProportionalView(!isProportionalView),\n        style: {\n          padding: \"5px 10px\",\n          marginRight: \"10px\",\n          backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n          color: isProportionalView ? \"white\" : \"black\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        children: isProportionalView ? \"Normal View\" : \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }, this), isProportionalView && /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: applyToAllRings,\n          onChange: e => setApplyToAllRings(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }, this), \"Apply to all rings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 713,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"+9iTWDC2o4a4XKe++z4fFE0OpKI=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","isProportionalView","setIsProportionalView","applyToAllRings","setApplyToAllRings","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","tooltip","append","attr","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","subspaces","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","highlightedElements","drawGraph","g","forEach","index","innerRadius","outerRadius","sectors","pointsBySector","fill","point","pointData","entries","filter","k","bitVector","coord","join","sectorIndex","parseInt","totalPoints","minSectorAngle","PI","sectorAngles","totalAngle","totalOccupiedSectors","count","remainingAngle","currentAngle","sectorStartAngles","startAngle","endAngle","push","arc","getSectorColor","text","x1","cos","y1","sin","x2","y2","bitVectorIndex","minRadius","randomRadius","random","centerAngle","totalPointsInSector","clusterFactor","overlapRadius","x","y","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","_Object$entries$find","originalColor","circles","d","circleX","parseFloat","getAttribute","circleY","abs","point1","point2","coords1","value","coords2","label1","find","ids","zoom","transform","call","children","marginBottom","onClick","padding","marginRight","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","type","checked","onChange","e","target","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n    \n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n\n\n\n\n\n// ____________________________________________________________________________________________________________________________________________\n\n\n\n\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n  useEffect(() => {\n    // check data json file\n    if (\n      !jsonData ||\n      typeof jsonData !== \"object\" ||\n      Object.keys(jsonData).length === 0\n    ) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    // check label json file\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3\n      .scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    // const getSectorColor = (index, sectorIndex) => {\n    //   // console.log(sectorIndex);\n    //   console.log(sectorIndex % 2);\n    //   return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    // };\n    // const getSectorColor = (index, sectorIndex) => {\n    //   if (index === 0) { // Innermost ring (2 sectors)\n    //     return sectorIndex === 0 ? d3.hsl(180, 0.9, 0.7)  // Cyan for sector 0 (was red)\n    //       : d3.hsl(0, 0.9, 0.6);    // Red for sector 1 (was cyan)\n    //   } else if (index === 1) { // Second ring (4 sectors)\n    //     switch (sectorIndex) {\n    //       case 0: return d3.hsl(180, 0.9, 0.65);  // Cyan for [+,+] (was red)\n    //       case 1: return d3.hsl(0, 0.9, 0.65);    // Red for [-,+] (was green)\n    //       case 2: return d3.hsl(90, 0.9, 0.65);   // Green for [+,-] (was purple)\n    //       case 3: return d3.hsl(270, 0.9, 0.65);  // Purple for [-,-] (was cyan)\n    //       default: return d3.hsl(0, 0.9, 0.6);    // Fallback\n    //     }\n    //   } else {\n    //     // Original pattern for outer rings (unchanged)\n    //     return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    //   }\n    // };\n\n    const subspaces = Object.keys(jsonData);\n    // subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    const pointPositions = {};\n    let highlightedElements = null;\n\n\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        // const rotationOffset = Math.PI / 2;\n\n        const pointsBySector = new Array(sectors).fill(0);\n        pointsData[index].points.forEach((point) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          pointsBySector[sectorIndex]++;\n        });\n\n        const totalPoints = pointsData[index].points.length;\n        const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n        let sectorAngles = [];\n        if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n          const totalAngle = 2 * Math.PI;\n          const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n          const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n\n          sectorAngles = pointsBySector.map(count => {\n            if (count === 0) return minSectorAngle;\n            return minSectorAngle + (remainingAngle * count / totalPoints);\n          });\n        } else {\n          sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n        }\n\n        // let currentAngle = rotationOffset;\n        let currentAngle = 0;\n        const sectorStartAngles = [currentAngle];\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = startAngle + sectorAngles[i];\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.1)\n            .style(\"cursor\", \"pointer\");\n\n          if (i === 0) {\n            g.append(\"text\")\n              .attr(\"x\", 0)\n              .attr(\"y\", -outerRadius - 5)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"font-size\", \"16px\")\n              .attr(\"fill\", \"red\")\n              .attr(\"font-weight\", \"bold\")\n              .text(ringLabels[index]);\n          }\n\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\")\n            .attr(\"x1\", x2)\n            .attr(\"y1\", y2)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.25)\n            .style(\"pointer-events\", \"none\");\n        }\n\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n\n          const totalPointsInSector = pointsBySector[bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0\n            ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n            : randomRadius;\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach((id) => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({ x, y, point, subspaceId: key });\n          });\n\n          g.append(\"circle\")\n            .attr(\"cx\", x)\n            .attr(\"cy\", y)\n            .attr(\"r\", 3)\n            .attr(\"fill\", \"black\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"pointer-events\", \"visible\")\n            .on(\"mouseover\", (event) => {\n              const pointIds = point.Point_ID.join(\", \");\n              let associatedLabels = [];\n              if (labelsData && labelsData.labels) {\n                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                  if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                    associatedLabels.push(label);\n                  }\n                });\n              }\n              const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(\n                  `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n                );\n              setHoveredCoordinates({ ...point, label: labelText });\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n              setHoveredCoordinates(null);\n            });\n        });\n      });\n\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            const line = g.append(\"line\")\n              .attr(\"x1\", positions[i].x)\n              .attr(\"y1\", positions[i].y)\n              .attr(\"x2\", positions[i + 1].x)\n              .attr(\"y2\", positions[i + 1].y)\n              .attr(\"stroke\", getLabelColor(pointId))\n              .attr(\"stroke-width\", 0.3)\n              .style(\"cursor\", \"pointer\")\n              .on(\"mouseover\", (event) => {\n                tooltip\n                  .style(\"visibility\", \"visible\")\n                  .html(`Connection: Point_ID ${pointId}`);\n              })\n              .on(\"mousemove\", (event) => {\n                tooltip\n                  .style(\"top\", event.pageY + 10 + \"px\")\n                  .style(\"left\", event.pageX + 10 + \"px\");\n              })\n              .on(\"mouseout\", () => {\n                tooltip.style(\"visibility\", \"hidden\");\n              })\n              .on(\"click\", (event) => {\n                // clearHighlights();\n\n                const originalColor = getLabelColor(pointId);\n                line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n                const circles = g.selectAll(\"circle\")\n                  .filter(d => {\n                    const circleX = parseFloat(this.getAttribute(\"cx\"));\n                    const circleY = parseFloat(this.getAttribute(\"cy\"));\n                    return (\n                      (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n                      (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n                    );\n                  })\n                  .attr(\"r\", 6)\n                  .attr(\"fill\", \"yellow\");\n\n                highlightedElements = { line, circles, originalColor };\n\n                const point1 = positions[i].point;\n                const point2 = positions[i + 1].point;\n\n                const coords1 = Object.entries(point1)\n                  .filter(([key]) => key !== \"Point_ID\")\n                  .map(([key, value]) => `${key}: ${value}`)\n                  .join(\", \");\n                const coords2 = Object.entries(point2)\n                  .filter(([key]) => key !== \"Point_ID\")\n                  .map(([key, value]) => `${key}: ${value}`)\n                  .join(\", \");\n\n                const label1 = Object.entries(labelsData?.labels || {})\n                  .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n                // edgePopup\n                //   .style(\"visibility\", \"visible\")\n                //   .html(`\n                //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                //     <strong>Point 1</strong><br>\n                //     Subspace: ${positions[i].subspaceId}<br>\n                //     Coordinates: ${coords1}<br>\n                //     Label: ${label1}<br><br>\n                //     <strong>Point 2</strong><br>\n                //     Subspace: ${positions[i + 1].subspaceId}<br>\n                //     Coordinates: ${coords2}<br>\n                //     Label: ${label1}\n                //   `)\n                //   .style(\"top\", event.pageY + 15 + \"px\")\n                //   .style(\"left\", event.pageX + 15 + \"px\");\n\n                // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n                //   if (!edgePopup.node().contains(e.target)) {\n                //     edgePopup.style(\"visibility\", \"hidden\");\n                //     // clearHighlights();\n                //     d3.select(\"body\").on(\"click.edgePopup\", null);\n                //   }\n                // });\n              });\n          }\n        }\n      });\n\n      const zoom = d3.zoom().on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n\n    drawGraph();\n\n    return () => {\n      tooltip.remove();\n      // edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setIsProportionalView(!isProportionalView)}\n          style={{\n            padding: \"5px 10px\",\n            marginRight: \"10px\",\n            backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n            color: isProportionalView ? \"white\" : \"black\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          }}\n        >\n          {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n        </button>\n\n        {isProportionalView && (\n          <label style={{ marginLeft: \"10px\" }}>\n            <input\n              type=\"checkbox\"\n              checked={applyToAllRings}\n              onChange={(e) => setApplyToAllRings(e.target.checked)}\n            />\n            Apply to all rings\n          </label>\n        )}\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}