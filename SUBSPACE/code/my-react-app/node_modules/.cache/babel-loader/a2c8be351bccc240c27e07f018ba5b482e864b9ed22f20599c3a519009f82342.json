{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n//   const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n//   useEffect(() => {\n//     // check data json file\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n// // check label json file\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // const edgePopup = d3\n//     //   .select(\"body\")\n//     //   .append(\"div\")\n//     //   .attr(\"class\", \"edge-popup\")\n//     //   .style(\"position\", \"absolute\")\n//     //   .style(\"visibility\", \"hidden\")\n//     //   .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//     //   .style(\"color\", \"black\")\n//     //   .style(\"padding\", \"10px\")\n//     //   .style(\"border-radius\", \"4px\")\n//     //   .style(\"font-size\", \"12px\")\n//     //   .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//     //   .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     // subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         // const rotationOffset = Math.PI / 2;\n\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         const totalPoints = pointsData[index].points.length;\n//         const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n//         let sectorAngles = [];\n//         if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n//           const totalAngle = 2 * Math.PI;\n//           const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n//           const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n\n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return minSectorAngle;\n//             return minSectorAngle + (remainingAngle * count / totalPoints);\n//           });\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // let currentAngle = rotationOffset;\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySector[bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 // clearHighlights();\n\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 const circles = g.selectAll(\"circle\")\n//                   .filter(d => {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n\n//                 highlightedElements = { line, circles, originalColor };\n\n//                 const point1 = positions[i].point;\n//                 const point2 = positions[i + 1].point;\n\n//                 const coords1 = Object.entries(point1)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n//                 const coords2 = Object.entries(point2)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n\n//                 const label1 = Object.entries(labelsData?.labels || {})\n//                   .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//                 // edgePopup\n//                 //   .style(\"visibility\", \"visible\")\n//                 //   .html(`\n//                 //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                 //     <strong>Point 1</strong><br>\n//                 //     Subspace: ${positions[i].subspaceId}<br>\n//                 //     Coordinates: ${coords1}<br>\n//                 //     Label: ${label1}<br><br>\n//                 //     <strong>Point 2</strong><br>\n//                 //     Subspace: ${positions[i + 1].subspaceId}<br>\n//                 //     Coordinates: ${coords2}<br>\n//                 //     Label: ${label1}\n//                 //   `)\n//                 //   .style(\"top\", event.pageY + 15 + \"px\")\n//                 //   .style(\"left\", event.pageX + 15 + \"px\");\n\n//                 // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 //   if (!edgePopup.node().contains(e.target)) {\n//                 //     edgePopup.style(\"visibility\", \"hidden\");\n//                 //     // clearHighlights();\n//                 //     d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 //   }\n//                 // });\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       // edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button \n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n\n//         {isProportionalView && (\n//           <label style={{ marginLeft: \"10px\" }}>\n//             <input\n//               type=\"checkbox\"\n//               checked={applyToAllRings}\n//               onChange={(e) => setApplyToAllRings(e.target.checked)}\n//             />\n//             Apply to all rings\n//           </label>\n//         )}\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n// ____________________________________________________________________________________________________________________________________________\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (points, bitVector) => {\n//       // Find a point that matches this sector's bit vector\n//       const matchingPoint = points.find(p => {\n//         const pData = Object.entries(p).filter(([k]) => k !== \"Point_ID\");\n//         return pData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\") === bitVector;\n//       });\n\n//       if (!matchingPoint) return \"gray\"; // Default color for empty sectors\n\n//       const coords = Object.entries(matchingPoint)\n//         .filter(([k]) => k !== \"Point_ID\")\n//         .map(([_, v]) => v);\n//       const lastCoord = coords[coords.length - 1];\n//       return lastCoord >= 0 ? \"blue\" : \"pink\";\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2}) rotate(-90)`);\n\n//       const sectorAnglesByRing = [];\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const sectors = 2 ** (index + 1);\n//         const pointsBySector = new Array(sectors).fill(0);\n\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         let sectorAngles;\n//         if (isProportionalView && index === subspaces.length - 1) {\n//           const totalPoints = pointsData[index].points.length;\n//           const totalArea = Math.PI * maxRadius * maxRadius / subspaces.length;\n//           const areaPerPoint = totalPoints > 0 ? totalArea / totalPoints : 0;\n\n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return 2 * Math.PI / sectors;\n//             const area = count * areaPerPoint;\n//             return 2 * Math.acos(1 - (area / (Math.PI * maxRadius * maxRadius)));\n//           });\n\n//           const sumAngles = sectorAngles.reduce((sum, angle) => sum + angle, 0);\n//           sectorAngles = sectorAngles.map(angle => angle * (2 * Math.PI) / sumAngles);\n//         } else if (isProportionalView) {\n//           sectorAngles = new Array(sectors).fill(0);\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n//         sectorAnglesByRing.push(sectorAngles);\n//       });\n\n//       if (isProportionalView) {\n//         for (let i = subspaces.length - 2; i >= 0; i--) {\n//           const currentSectors = 2 ** (i + 1);\n//           const nextRingAngles = sectorAnglesByRing[i + 1];\n\n//           for (let j = 0; j < currentSectors; j++) {\n//             sectorAnglesByRing[i][j] = nextRingAngles[j * 2] + nextRingAngles[j * 2 + 1];\n//           }\n//         }\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n//         const sectorAngles = sectorAnglesByRing[index];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           const bitVector = i.toString(2).padStart(index + 1, '0');\n//           const sectorColor = getSectorColor(pointsData[index].points, bitVector);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", sectorColor)\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", outerRadius + 5)\n//               .attr(\"y\", 0)\n//               .attr(\"text-anchor\", \"start\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const x = randomRadius * Math.cos(centerAngle);\n//           const y = randomRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  const [applyToAllRings, setApplyToAllRings] = useState(false);\n  useEffect(() => {\n    // Check if jsonData is valid\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    // Check if labelsData is valid\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove(); // Clear the SVG before redrawing\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    // Tooltip for displaying point information\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Color scale for labels\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n\n    // Function to get sector color\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    let highlightedElements = null;\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n      // Calculate sector angles for the outermost ring\n      const outermostRingIndex = subspaces.length - 1;\n      const outermostRingSectors = 2 ** (outermostRingIndex + 1);\n      const outermostRingPointsBySector = new Array(outermostRingSectors).fill(0);\n      pointsData[outermostRingIndex].points.forEach(point => {\n        const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const sectorIndex = parseInt(bitVector, 2);\n        outermostRingPointsBySector[sectorIndex]++;\n      });\n      const totalOutermostRingPoints = pointsData[outermostRingIndex].points.length;\n      const minSectorAngle = totalOutermostRingPoints > 0 ? Math.PI * 0.91 / outermostRingSectors : 2 * Math.PI / outermostRingSectors;\n      let outermostRingSectorAngles = outermostRingPointsBySector.map(count => {\n        if (count === 0) return minSectorAngle;\n        return minSectorAngle + (2 * Math.PI - outermostRingSectors * minSectorAngle) * (count / totalOutermostRingPoints);\n      });\n\n      // Propagate sector angles to inner rings\n      const sectorAnglesByRing = new Array(subspaces.length);\n      sectorAnglesByRing[outermostRingIndex] = outermostRingSectorAngles;\n      for (let i = outermostRingIndex - 1; i >= 0; i--) {\n        const sectors = 2 ** (i + 1);\n        sectorAnglesByRing[i] = new Array(sectors).fill(0);\n        for (let j = 0; j < sectors; j++) {\n          sectorAnglesByRing[i][j] = sectorAnglesByRing[i + 1][2 * j] + sectorAnglesByRing[i + 1][2 * j + 1];\n        }\n      }\n\n      // Draw rings and sectors\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        let currentAngle = 0;\n        const sectorStartAngles = [currentAngle];\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = startAngle + sectorAnglesByRing[index][i];\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n\n          // Draw sector\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n\n          // Draw ring label\n          if (i === 0) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n\n          // Draw sector divider\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n        }\n\n        // Draw points\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n          const totalPointsInSector = outermostRingPointsBySector[bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0 ? innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector) / totalPointsInSector : randomRadius;\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach(id => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({\n              x,\n              y,\n              point,\n              subspaceId: key\n            });\n          });\n\n          // Draw point\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      });\n\n      // Draw connections between points\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", colorScale(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            }).on(\"mousemove\", event => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            }).on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n          }\n        }\n      });\n\n      // Zoom functionality\n      const zoom = d3.zoom().on(\"zoom\", event => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n    drawGraph();\n\n    // Cleanup\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsProportionalView(!isProportionalView),\n        style: {\n          padding: \"5px 10px\",\n          marginRight: \"10px\",\n          backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n          color: isProportionalView ? \"white\" : \"black\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        children: isProportionalView ? \"Normal View\" : \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1348,\n        columnNumber: 17\n      }, this), isProportionalView && /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: applyToAllRings,\n          onChange: e => setApplyToAllRings(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1365,\n          columnNumber: 25\n        }, this), \"Apply to all rings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1364,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1347,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1374,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1346,\n    columnNumber: 9\n  }, this);\n};\n_s(HierarchicalGraph, \"+9iTWDC2o4a4XKe++z4fFE0OpKI=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","isProportionalView","setIsProportionalView","applyToAllRings","setApplyToAllRings","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","tooltip","append","attr","style","colorScale","scaleOrdinal","schemeCategory10","domain","labels","getSectorColor","index","sectorIndex","hsl","subspaces","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","highlightedElements","drawGraph","g","outermostRingIndex","outermostRingSectors","outermostRingPointsBySector","Array","fill","forEach","point","pointData","entries","filter","k","bitVector","coord","join","parseInt","totalOutermostRingPoints","minSectorAngle","PI","outermostRingSectorAngles","count","sectorAnglesByRing","sectors","j","innerRadius","outerRadius","currentAngle","sectorStartAngles","startAngle","endAngle","push","arc","text","x1","cos","y1","sin","x2","y2","bitVectorIndex","minRadius","randomRadius","random","centerAngle","totalPointsInSector","clusterFactor","overlapRadius","x","y","Point_ID","id","on","event","pointIds","associatedLabels","label","pointList","some","includes","Number","labelText","html","toFixed","pageY","pageX","pointId","positions","zoom","transform","call","children","marginBottom","onClick","padding","marginRight","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","type","checked","onChange","e","target","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// //     const pointPositions = {};\n// //     let highlightedElements = null;\n\n// //     // Function to clear highlights\n// //     const clearHighlights = () => {\n// //       if (highlightedElements) {\n// //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// //         highlightedElements.circles.forEach(circle =>\n// //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// //         );\n// //         highlightedElements = null;\n// //       }\n// //     };\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //         g.append(\"path\")\n// //           .attr(\"d\", d3.arc()\n// //             .innerRadius(innerRadius)\n// //             .outerRadius(outerRadius)\n// //             .startAngle(startAngle)\n// //             .endAngle(endAngle)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.1)\n// //           .style(\"cursor\", \"pointer\");\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"16px\")\n// //           .attr(\"fill\", \"red\")\n// //           .attr(\"font-weight\", \"bold\")\n// //         // .text(key);\n// //           .text(ringLabels[index]); // Use generated lab\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               // Clear previous highlights\n// //               clearHighlights();\n\n// //               // Highlight the clicked edge\n// //               const originalColor = getLabelColor(pointId);\n// //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// //               // Highlight connected points\n// //               const circles = g.selectAll(\"circle\")\n// //                 .filter(d => {\n// //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// //                   return (\n// //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// //                 )})\n// //                 .attr(\"r\", 6)\n// //                 .attr(\"fill\", \"yellow\");\n\n// //               highlightedElements = { line, circles, originalColor };\n\n// //               // Show popup\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label1}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   clearHighlights();\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //       svg.select(\".zoom-view\").remove();\n// //     };\n\n    \n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n//   const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n//   useEffect(() => {\n//     // check data json file\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n// // check label json file\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     // const edgePopup = d3\n//     //   .select(\"body\")\n//     //   .append(\"div\")\n//     //   .attr(\"class\", \"edge-popup\")\n//     //   .style(\"position\", \"absolute\")\n//     //   .style(\"visibility\", \"hidden\")\n//     //   .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//     //   .style(\"color\", \"black\")\n//     //   .style(\"padding\", \"10px\")\n//     //   .style(\"border-radius\", \"4px\")\n//     //   .style(\"font-size\", \"12px\")\n//     //   .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//     //   .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     // subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         // const rotationOffset = Math.PI / 2;\n\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         const totalPoints = pointsData[index].points.length;\n//         const minSectorAngle = totalPoints > 0 ? (Math.PI * 0.91) / sectors : (2 * Math.PI) / sectors;\n\n//         let sectorAngles = [];\n//         if (isProportionalView && (applyToAllRings || index === subspaces.length - 1)) {\n//           const totalAngle = 2 * Math.PI;\n//           const totalOccupiedSectors = pointsBySector.filter(count => count > 0).length;\n//           const remainingAngle = totalAngle - (totalOccupiedSectors * minSectorAngle);\n          \n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return minSectorAngle;\n//             return minSectorAngle + (remainingAngle * count / totalPoints);\n//           });\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n\n//         // let currentAngle = rotationOffset;\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySector[bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 // clearHighlights();\n\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 const circles = g.selectAll(\"circle\")\n//                   .filter(d => {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n\n//                 highlightedElements = { line, circles, originalColor };\n\n//                 const point1 = positions[i].point;\n//                 const point2 = positions[i + 1].point;\n\n//                 const coords1 = Object.entries(point1)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n//                 const coords2 = Object.entries(point2)\n//                   .filter(([key]) => key !== \"Point_ID\")\n//                   .map(([key, value]) => `${key}: ${value}`)\n//                   .join(\", \");\n\n//                 const label1 = Object.entries(labelsData?.labels || {})\n//                   .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//                 // edgePopup\n//                 //   .style(\"visibility\", \"visible\")\n//                 //   .html(`\n//                 //     <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                 //     <strong>Point 1</strong><br>\n//                 //     Subspace: ${positions[i].subspaceId}<br>\n//                 //     Coordinates: ${coords1}<br>\n//                 //     Label: ${label1}<br><br>\n//                 //     <strong>Point 2</strong><br>\n//                 //     Subspace: ${positions[i + 1].subspaceId}<br>\n//                 //     Coordinates: ${coords2}<br>\n//                 //     Label: ${label1}\n//                 //   `)\n//                 //   .style(\"top\", event.pageY + 15 + \"px\")\n//                 //   .style(\"left\", event.pageX + 15 + \"px\");\n\n//                 // d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 //   if (!edgePopup.node().contains(e.target)) {\n//                 //     edgePopup.style(\"visibility\", \"hidden\");\n//                 //     // clearHighlights();\n//                 //     d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 //   }\n//                 // });\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       // edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button \n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n        \n//         {isProportionalView && (\n//           <label style={{ marginLeft: \"10px\" }}>\n//             <input\n//               type=\"checkbox\"\n//               checked={applyToAllRings}\n//               onChange={(e) => setApplyToAllRings(e.target.checked)}\n//             />\n//             Apply to all rings\n//           </label>\n//         )}\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\n\n\n\n\n// ____________________________________________________________________________________________________________________________________________\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (points, bitVector) => {\n//       // Find a point that matches this sector's bit vector\n//       const matchingPoint = points.find(p => {\n//         const pData = Object.entries(p).filter(([k]) => k !== \"Point_ID\");\n//         return pData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\") === bitVector;\n//       });\n\n//       if (!matchingPoint) return \"gray\"; // Default color for empty sectors\n\n//       const coords = Object.entries(matchingPoint)\n//         .filter(([k]) => k !== \"Point_ID\")\n//         .map(([_, v]) => v);\n//       const lastCoord = coords[coords.length - 1];\n//       return lastCoord >= 0 ? \"blue\" : \"pink\";\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2}) rotate(-90)`);\n\n//       const sectorAnglesByRing = [];\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const sectors = 2 ** (index + 1);\n//         const pointsBySector = new Array(sectors).fill(0);\n\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n\n//         let sectorAngles;\n//         if (isProportionalView && index === subspaces.length - 1) {\n//           const totalPoints = pointsData[index].points.length;\n//           const totalArea = Math.PI * maxRadius * maxRadius / subspaces.length;\n//           const areaPerPoint = totalPoints > 0 ? totalArea / totalPoints : 0;\n\n//           sectorAngles = pointsBySector.map(count => {\n//             if (count === 0) return 2 * Math.PI / sectors;\n//             const area = count * areaPerPoint;\n//             return 2 * Math.acos(1 - (area / (Math.PI * maxRadius * maxRadius)));\n//           });\n\n//           const sumAngles = sectorAngles.reduce((sum, angle) => sum + angle, 0);\n//           sectorAngles = sectorAngles.map(angle => angle * (2 * Math.PI) / sumAngles);\n//         } else if (isProportionalView) {\n//           sectorAngles = new Array(sectors).fill(0);\n//         } else {\n//           sectorAngles = new Array(sectors).fill(2 * Math.PI / sectors);\n//         }\n//         sectorAnglesByRing.push(sectorAngles);\n//       });\n\n//       if (isProportionalView) {\n//         for (let i = subspaces.length - 2; i >= 0; i--) {\n//           const currentSectors = 2 ** (i + 1);\n//           const nextRingAngles = sectorAnglesByRing[i + 1];\n\n//           for (let j = 0; j < currentSectors; j++) {\n//             sectorAnglesByRing[i][j] = nextRingAngles[j * 2] + nextRingAngles[j * 2 + 1];\n//           }\n//         }\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n\n//         let currentAngle = 0;\n//         const sectorStartAngles = [currentAngle];\n//         const sectorAngles = sectorAnglesByRing[index];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           const bitVector = i.toString(2).padStart(index + 1, '0');\n//           const sectorColor = getSectorColor(pointsData[index].points, bitVector);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", sectorColor)\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", outerRadius + 5)\n//               .attr(\"y\", 0)\n//               .attr(\"text-anchor\", \"start\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const x = randomRadius * Math.cos(centerAngle);\n//           const y = randomRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n    const graphRef = useRef(null);\n    const [isProportionalView, setIsProportionalView] = useState(false);\n    const [applyToAllRings, setApplyToAllRings] = useState(false);\n\n    useEffect(() => {\n        // Check if jsonData is valid\n        if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n            console.error(\"Invalid or empty jsonData:\", jsonData);\n            return;\n        }\n\n        // Check if labelsData is valid\n        if (!labelsData || typeof labelsData !== \"object\") {\n            console.error(\"Invalid labelsData:\", labelsData);\n            return;\n        }\n\n        const svg = d3.select(graphRef.current);\n        svg.selectAll(\"*\").remove(); // Clear the SVG before redrawing\n\n        const width = 800;\n        const height = 800;\n        const margin = 20;\n        const maxRadius = Math.min(width, height) / 2 - margin;\n\n        // Tooltip for displaying point information\n        const tooltip = d3\n            .select(\"body\")\n            .append(\"div\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n            .style(\"color\", \"white\")\n            .style(\"padding\", \"5px\")\n            .style(\"border-radius\", \"4px\")\n            .style(\"font-size\", \"12px\");\n\n        // Color scale for labels\n        const colorScale = d3\n            .scaleOrdinal(d3.schemeCategory10)\n            .domain(Object.keys(labelsData.labels || {}));\n\n        // Function to get sector color\n        const getSectorColor = (index, sectorIndex) => {\n            return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n        };\n\n        const subspaces = Object.keys(jsonData);\n        const pointsData = subspaces.map((key) => ({\n            key,\n            points: jsonData[key],\n            dimensions: key.length,\n            subspaceId: key,\n        }));\n        const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n        const pointPositions = {};\n        let highlightedElements = null;\n\n        const drawGraph = () => {\n            svg.selectAll(\"*\").remove();\n            const g = svg\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .append(\"g\")\n                .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n            // Calculate sector angles for the outermost ring\n            const outermostRingIndex = subspaces.length - 1;\n            const outermostRingSectors = 2 ** (outermostRingIndex + 1);\n            const outermostRingPointsBySector = new Array(outermostRingSectors).fill(0);\n            pointsData[outermostRingIndex].points.forEach((point) => {\n                const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n                const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n                const sectorIndex = parseInt(bitVector, 2);\n                outermostRingPointsBySector[sectorIndex]++;\n            });\n\n            const totalOutermostRingPoints = pointsData[outermostRingIndex].points.length;\n            const minSectorAngle = totalOutermostRingPoints > 0 ? (Math.PI * 0.91) / outermostRingSectors : (2 * Math.PI) / outermostRingSectors;\n\n            let outermostRingSectorAngles = outermostRingPointsBySector.map((count) => {\n                if (count === 0) return minSectorAngle;\n                return minSectorAngle + (2 * Math.PI - outermostRingSectors * minSectorAngle) * (count / totalOutermostRingPoints);\n            });\n\n            // Propagate sector angles to inner rings\n            const sectorAnglesByRing = new Array(subspaces.length);\n            sectorAnglesByRing[outermostRingIndex] = outermostRingSectorAngles;\n\n            for (let i = outermostRingIndex - 1; i >= 0; i--) {\n                const sectors = 2 ** (i + 1);\n                sectorAnglesByRing[i] = new Array(sectors).fill(0);\n\n                for (let j = 0; j < sectors; j++) {\n                    sectorAnglesByRing[i][j] = sectorAnglesByRing[i + 1][2 * j] + sectorAnglesByRing[i + 1][2 * j + 1];\n                }\n            }\n\n            // Draw rings and sectors\n            subspaces.forEach((key, index) => {\n                if (!ringVisibility[key]) return;\n\n                const innerRadius = (index / subspaces.length) * maxRadius;\n                const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n                const sectors = 2 ** (index + 1);\n\n                let currentAngle = 0;\n                const sectorStartAngles = [currentAngle];\n\n                for (let i = 0; i < sectors; i++) {\n                    const startAngle = currentAngle;\n                    const endAngle = startAngle + sectorAnglesByRing[index][i];\n                    currentAngle = endAngle;\n                    sectorStartAngles.push(currentAngle);\n\n                    // Draw sector\n                    g.append(\"path\")\n                        .attr(\"d\", d3.arc()\n                            .innerRadius(innerRadius)\n                            .outerRadius(outerRadius)\n                            .startAngle(startAngle)\n                            .endAngle(endAngle)\n                        )\n                        .attr(\"fill\", getSectorColor(index, i))\n                        .attr(\"fill-opacity\", 0.3)\n                        .attr(\"stroke\", \"black\")\n                        .attr(\"stroke-width\", 0.1)\n                        .style(\"cursor\", \"pointer\");\n\n                    // Draw ring label\n                    if (i === 0) {\n                        g.append(\"text\")\n                            .attr(\"x\", 0)\n                            .attr(\"y\", -outerRadius - 5)\n                            .attr(\"text-anchor\", \"middle\")\n                            .attr(\"font-size\", \"16px\")\n                            .attr(\"fill\", \"red\")\n                            .attr(\"font-weight\", \"bold\")\n                            .text(ringLabels[index]);\n                    }\n\n                    // Draw sector divider\n                    const x1 = outerRadius * Math.cos(endAngle);\n                    const y1 = outerRadius * Math.sin(endAngle);\n                    const x2 = innerRadius * Math.cos(endAngle);\n                    const y2 = innerRadius * Math.sin(endAngle);\n                    g.append(\"line\")\n                        .attr(\"x1\", x2)\n                        .attr(\"y1\", y2)\n                        .attr(\"x2\", x1)\n                        .attr(\"y2\", y1)\n                        .attr(\"stroke\", \"black\")\n                        .attr(\"stroke-width\", 0.25)\n                        .style(\"pointer-events\", \"none\");\n                }\n\n                // Draw points\n                pointsData[index].points.forEach((point, i) => {\n                    const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n                    const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n                    const bitVectorIndex = parseInt(bitVector, 2);\n\n                    const minRadius = innerRadius;\n                    const maxRadius = outerRadius;\n                    const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n                    const startAngle = sectorStartAngles[bitVectorIndex];\n                    const endAngle = sectorStartAngles[bitVectorIndex + 1];\n                    const centerAngle = (startAngle + endAngle) / 2;\n\n                    const totalPointsInSector = outermostRingPointsBySector[bitVectorIndex];\n                    const clusterFactor = 0.86;\n                    const overlapRadius = totalPointsInSector > 0\n                        ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n                        : randomRadius;\n\n                    const x = overlapRadius * Math.cos(centerAngle);\n                    const y = overlapRadius * Math.sin(centerAngle);\n                    point.Point_ID.forEach((id) => {\n                        if (!pointPositions[id]) {\n                            pointPositions[id] = [];\n                        }\n                        pointPositions[id].push({ x, y, point, subspaceId: key });\n                    });\n\n                    // Draw point\n                    g.append(\"circle\")\n                        .attr(\"cx\", x)\n                        .attr(\"cy\", y)\n                        .attr(\"r\", 3)\n                        .attr(\"fill\", \"black\")\n                        .attr(\"stroke\", \"white\")\n                        .attr(\"stroke-width\", 0.5)\n                        .style(\"pointer-events\", \"visible\")\n                        .on(\"mouseover\", (event) => {\n                            const pointIds = point.Point_ID.join(\", \");\n                            let associatedLabels = [];\n                            if (labelsData && labelsData.labels) {\n                                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                                    if (point.Point_ID.some((id) => pointList.includes(Number(id)))) {\n                                        associatedLabels.push(label);\n                                    }\n                                });\n                            }\n                            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n                            tooltip\n                                .style(\"visibility\", \"visible\")\n                                .html(\n                                    `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n                                );\n                            setHoveredCoordinates({ ...point, label: labelText });\n                        })\n                        .on(\"mousemove\", (event) => {\n                            tooltip\n                                .style(\"top\", event.pageY + 10 + \"px\")\n                                .style(\"left\", event.pageX + 10 + \"px\");\n                        })\n                        .on(\"mouseout\", () => {\n                            tooltip.style(\"visibility\", \"hidden\");\n                            setHoveredCoordinates(null);\n                        });\n                });\n            });\n\n            // Draw connections between points\n            Object.entries(pointPositions).forEach(([pointId, positions]) => {\n                if (positions.length > 1) {\n                    for (let i = 0; i < positions.length - 1; i++) {\n                        g.append(\"line\")\n                            .attr(\"x1\", positions[i].x)\n                            .attr(\"y1\", positions[i].y)\n                            .attr(\"x2\", positions[i + 1].x)\n                            .attr(\"y2\", positions[i + 1].y)\n                            .attr(\"stroke\", colorScale(pointId))\n                            .attr(\"stroke-width\", 0.3)\n                            .style(\"cursor\", \"pointer\")\n                            .on(\"mouseover\", (event) => {\n                                tooltip\n                                    .style(\"visibility\", \"visible\")\n                                    .html(`Connection: Point_ID ${pointId}`);\n                            })\n                            .on(\"mousemove\", (event) => {\n                                tooltip\n                                    .style(\"top\", event.pageY + 10 + \"px\")\n                                    .style(\"left\", event.pageX + 10 + \"px\");\n                            })\n                            .on(\"mouseout\", () => {\n                                tooltip.style(\"visibility\", \"hidden\");\n                            });\n                    }\n                }\n            });\n\n            // Zoom functionality\n            const zoom = d3.zoom().on(\"zoom\", (event) => {\n                g.attr(\"transform\", event.transform);\n            });\n            svg.call(zoom);\n        };\n\n        drawGraph();\n\n        // Cleanup\n        return () => {\n            tooltip.remove();\n            svg.select(\".zoom-view\").remove();\n        };\n    }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView, applyToAllRings]);\n\n    return (\n        <div style={{ width: \"100%\", height: \"100%\" }}>\n            <div style={{ marginBottom: \"10px\" }}>\n                <button\n                    onClick={() => setIsProportionalView(!isProportionalView)}\n                    style={{\n                        padding: \"5px 10px\",\n                        marginRight: \"10px\",\n                        backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n                        color: isProportionalView ? \"white\" : \"black\",\n                        border: \"1px solid #ccc\",\n                        borderRadius: \"4px\",\n                        cursor: \"pointer\",\n                    }}\n                >\n                    {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n                </button>\n\n                {isProportionalView && (\n                    <label style={{ marginLeft: \"10px\" }}>\n                        <input\n                            type=\"checkbox\"\n                            checked={applyToAllRings}\n                            onChange={(e) => setApplyToAllRings(e.target.checked)}\n                        />\n                        Apply to all rings\n                    </label>\n                )}\n            </div>\n            <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n        </div>\n    );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;;AAYA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}