{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// Here points are on boundary\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     // Dynamically extract subspace keys\n//     const subspaceKeys = Object.keys(jsonData);\n\n//     // Set up container dimensions\n//     const container = d3.select(graphRef.current.parentNode);\n//     const width = container.node().getBoundingClientRect().width;\n//     const height = container.node().getBoundingClientRect().height;\n//     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//     const svg = d3\n//       .select(graphRef.current)\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n//       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Calculate center and square spacing\n//     const centerX = width / 2;\n//     const centerY = height / 2;\n//     const squareSpacing = 200; // Distance between consecutive squares\n\n//     const nodes = [];\n//     const links = [];\n\n//     // Function to calculate node positions on the square's perimeter\n//     const calculateSquarePerimeterPositions = (numPoints, squareIndex) => {\n//       const size = squareSpacing * (squareIndex + 1); // Square size grows with the index\n//       const positions = [];\n//       const pointsPerSide = Math.ceil(numPoints / 4);\n//       const sideLength = size;\n\n//       for (let i = 0; i < numPoints; i++) {\n//         const side = Math.floor(i / pointsPerSide); // Determine which side of the square\n//         const offset = i % pointsPerSide;\n//         let x, y;\n\n//         if (side === 0) {\n//           // Top side\n//           x = centerX - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//           y = centerY - sideLength / 2;\n//         } else if (side === 1) {\n//           // Right side\n//           x = centerX + sideLength / 2;\n//           y = centerY - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//         } else if (side === 2) {\n//           // Bottom side\n//           x = centerX + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//           y = centerY + sideLength / 2;\n//         } else {\n//           // Left side\n//           x = centerX - sideLength / 2;\n//           y = centerY + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//         }\n\n//         positions.push({ x, y });\n//       }\n//       return positions;\n//     };\n\n//     // Build hierarchical nodes and links\n//     subspaceKeys.forEach((subspace, index) => {\n//       const points = jsonData[subspace];\n//       const positions = calculateSquarePerimeterPositions(points.length, index);\n\n//       points.forEach((point, i) => {\n//         const id = `${subspace}-${i}`;\n//         const node = {\n//           id,\n//           ...point,\n//           x: positions[i].x,\n//           y: positions[i].y,\n//         };\n//         nodes.push(node);\n\n//         // Add links to the previous square\n//         if (index > 0) {\n//           links.push({\n//             source: nodes[nodes.length - points.length - i - 1].id,\n//             target: id,\n//           });\n//         }\n//       });\n//     });\n\n//     // Draw squares\n//     subspaceKeys.forEach((_, index) => {\n//       const size = squareSpacing * (index + 1);\n//       svg\n//         .append(\"rect\")\n//         .attr(\"x\", centerX - size / 2)\n//         .attr(\"y\", centerY - size / 2)\n//         .attr(\"width\", size)\n//         .attr(\"height\", size)\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke\", \"#ddd\")\n//         .attr(\"stroke-width\", 2);\n//     });\n\n//     // Draw links\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"links\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"x1\", (d) => nodes.find((node) => node.id === d.source)?.x)\n//       .attr(\"y1\", (d) => nodes.find((node) => node.id === d.source)?.y)\n//       .attr(\"x2\", (d) => nodes.find((node) => node.id === d.target)?.x)\n//       .attr(\"y2\", (d) => nodes.find((node) => node.id === d.target)?.y)\n//       .attr(\"stroke\", \"#aaa\")\n//       .attr(\"stroke-width\", 1);\n\n//     // Draw nodes\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"nodes\")\n//       .selectAll(\"circle\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"r\", 5)\n//       .attr(\"cx\", (d) => d.x)\n//       .attr(\"cy\", (d) => d.y)\n//       .attr(\"fill\", (d, i) =>\n//         i < jsonData[subspaceKeys[0]].length\n//           ? \"red\"\n//           : i < jsonData[subspaceKeys[1]].length\n//           ? \"blue\"\n//           : \"green\"\n//       )\n//       .on(\"mouseover\", (event, d) => {\n//         setHoveredCoordinates({\n//           ...d,\n//           id: d.id,\n//         });\n//       });\n\n//     // Add tooltips\n//     svg\n//       .selectAll(\"circle\")\n//       .append(\"title\")\n//       .text((d) => `ID: ${d.id}`);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    // Extract subspaces (keys like \"x\", \"xy\", \"xyz\") from jsonData\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key]\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 400; // Canvas width\n    const height = 400; // Canvas height\n    const margin = 20;\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Compute square sizes\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n    const squareStep = maxSquareSize / (2 * subspaces.length);\n\n    // Draw concentric squares\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})` // Center alignment\n    );\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize - 2 * index * squareStep;\n\n      // Draw the square for the current subspace\n      g.append(\"rect\").attr(\"x\", -squareSize / 2).attr(\"y\", -squareSize / 2).attr(\"width\", squareSize).attr(\"height\", squareSize).attr(\"stroke\", \"black\").attr(\"fill\", \"none\").attr(\"stroke-width\", 1);\n\n      // Scale for plotting points inside the current square\n      const scaleX = d3.scaleLinear().domain([-1, 1]).range([-squareSize / 2, squareSize / 2]);\n      const scaleY = d3.scaleLinear().domain([-1, 1]).range([-squareSize / 2, squareSize / 2]);\n\n      // Plot the points for this subspace\n      g.selectAll(`.point-${subspace.key}`).data(subspace.points).enter().append(\"circle\").attr(\"cx\", d => scaleX(d.x)).attr(\"cy\", d => d.y !== undefined ? scaleY(d.y) : 0).attr(\"r\", 4).attr(\"fill\", \"steelblue\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 1).append(\"title\") // Tooltip for the point\n      .text(d => `ID: ${d.Point_ID}`);\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","pointsData","map","key","points","svg","select","current","width","height","margin","selectAll","remove","maxSquareSize","Math","min","squareStep","g","attr","append","forEach","subspace","index","squareSize","scaleX","scaleLinear","domain","range","scaleY","data","enter","d","x","y","undefined","text","Point_ID","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// Here points are on boundary\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     // Dynamically extract subspace keys\n//     const subspaceKeys = Object.keys(jsonData);\n\n//     // Set up container dimensions\n//     const container = d3.select(graphRef.current.parentNode);\n//     const width = container.node().getBoundingClientRect().width;\n//     const height = container.node().getBoundingClientRect().height;\n//     const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n//     const svg = d3\n//       .select(graphRef.current)\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .attr(\"viewBox\", `0 0 ${width} ${height}`)\n//       .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n//     // Clear previous render\n//     svg.selectAll(\"*\").remove();\n\n//     // Calculate center and square spacing\n//     const centerX = width / 2;\n//     const centerY = height / 2;\n//     const squareSpacing = 200; // Distance between consecutive squares\n\n//     const nodes = [];\n//     const links = [];\n\n//     // Function to calculate node positions on the square's perimeter\n//     const calculateSquarePerimeterPositions = (numPoints, squareIndex) => {\n//       const size = squareSpacing * (squareIndex + 1); // Square size grows with the index\n//       const positions = [];\n//       const pointsPerSide = Math.ceil(numPoints / 4);\n//       const sideLength = size;\n\n//       for (let i = 0; i < numPoints; i++) {\n//         const side = Math.floor(i / pointsPerSide); // Determine which side of the square\n//         const offset = i % pointsPerSide;\n//         let x, y;\n\n//         if (side === 0) {\n//           // Top side\n//           x = centerX - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//           y = centerY - sideLength / 2;\n//         } else if (side === 1) {\n//           // Right side\n//           x = centerX + sideLength / 2;\n//           y = centerY - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n//         } else if (side === 2) {\n//           // Bottom side\n//           x = centerX + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//           y = centerY + sideLength / 2;\n//         } else {\n//           // Left side\n//           x = centerX - sideLength / 2;\n//           y = centerY + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n//         }\n\n//         positions.push({ x, y });\n//       }\n//       return positions;\n//     };\n\n//     // Build hierarchical nodes and links\n//     subspaceKeys.forEach((subspace, index) => {\n//       const points = jsonData[subspace];\n//       const positions = calculateSquarePerimeterPositions(points.length, index);\n\n//       points.forEach((point, i) => {\n//         const id = `${subspace}-${i}`;\n//         const node = {\n//           id,\n//           ...point,\n//           x: positions[i].x,\n//           y: positions[i].y,\n//         };\n//         nodes.push(node);\n\n//         // Add links to the previous square\n//         if (index > 0) {\n//           links.push({\n//             source: nodes[nodes.length - points.length - i - 1].id,\n//             target: id,\n//           });\n//         }\n//       });\n//     });\n\n//     // Draw squares\n//     subspaceKeys.forEach((_, index) => {\n//       const size = squareSpacing * (index + 1);\n//       svg\n//         .append(\"rect\")\n//         .attr(\"x\", centerX - size / 2)\n//         .attr(\"y\", centerY - size / 2)\n//         .attr(\"width\", size)\n//         .attr(\"height\", size)\n//         .attr(\"fill\", \"none\")\n//         .attr(\"stroke\", \"#ddd\")\n//         .attr(\"stroke-width\", 2);\n//     });\n\n//     // Draw links\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"links\")\n//       .selectAll(\"line\")\n//       .data(links)\n//       .enter()\n//       .append(\"line\")\n//       .attr(\"x1\", (d) => nodes.find((node) => node.id === d.source)?.x)\n//       .attr(\"y1\", (d) => nodes.find((node) => node.id === d.source)?.y)\n//       .attr(\"x2\", (d) => nodes.find((node) => node.id === d.target)?.x)\n//       .attr(\"y2\", (d) => nodes.find((node) => node.id === d.target)?.y)\n//       .attr(\"stroke\", \"#aaa\")\n//       .attr(\"stroke-width\", 1);\n\n//     // Draw nodes\n//     svg\n//       .append(\"g\")\n//       .attr(\"class\", \"nodes\")\n//       .selectAll(\"circle\")\n//       .data(nodes)\n//       .enter()\n//       .append(\"circle\")\n//       .attr(\"r\", 5)\n//       .attr(\"cx\", (d) => d.x)\n//       .attr(\"cy\", (d) => d.y)\n//       .attr(\"fill\", (d, i) =>\n//         i < jsonData[subspaceKeys[0]].length\n//           ? \"red\"\n//           : i < jsonData[subspaceKeys[1]].length\n//           ? \"blue\"\n//           : \"green\"\n//       )\n//       .on(\"mouseover\", (event, d) => {\n//         setHoveredCoordinates({\n//           ...d,\n//           id: d.id,\n//         });\n//       });\n\n//     // Add tooltips\n//     svg\n//       .selectAll(\"circle\")\n//       .append(\"title\")\n//       .text((d) => `ID: ${d.id}`);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\n\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    // Extract subspaces (keys like \"x\", \"xy\", \"xyz\") from jsonData\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width =400; // Canvas width\n    const height =400; // Canvas height\n    const margin = 20;\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Compute square sizes\n    const maxSquareSize = Math.min(width, height) - 2 * margin;\n    const squareStep = maxSquareSize / (2 * subspaces.length);\n\n    // Draw concentric squares\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\n        \"transform\",\n        `translate(${width / 2}, ${height / 2})` // Center alignment\n      );\n\n    pointsData.forEach((subspace, index) => {\n      const squareSize = maxSquareSize - 2 * index * squareStep;\n\n      // Draw the square for the current subspace\n      g.append(\"rect\")\n        .attr(\"x\", -squareSize / 2)\n        .attr(\"y\", -squareSize / 2)\n        .attr(\"width\", squareSize)\n        .attr(\"height\", squareSize)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", 1);\n\n      // Scale for plotting points inside the current square\n      const scaleX = d3\n        .scaleLinear()\n        .domain([-1, 1])\n        .range([-squareSize / 2, squareSize / 2]);\n      const scaleY = d3\n        .scaleLinear()\n        .domain([-1, 1])\n        .range([-squareSize / 2, squareSize / 2]);\n\n      // Plot the points for this subspace\n      g.selectAll(`.point-${subspace.key}`)\n        .data(subspace.points)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", (d) => scaleX(d.x))\n        .attr(\"cy\", (d) => (d.y !== undefined ? scaleY(d.y) : 0))\n        .attr(\"r\", 4)\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 1)\n        .append(\"title\") // Tooltip for the point\n        .text((d) => `ID: ${d.Point_ID}`);\n    });\n  }, [jsonData]);\n\n  return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;;IAErD;IACA,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC;IACvC,MAAMO,UAAU,GAAGD,SAAS,CAACE,GAAG,CAAEC,GAAG,KAAM;MACzCA,GAAG;MACHC,MAAM,EAAEV,QAAQ,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}