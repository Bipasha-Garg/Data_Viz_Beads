{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    // Dynamically extract subspace keys\n    const subspaceKeys = Object.keys(jsonData);\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const svg = d3.select(graphRef.current).attr(\"width\", width).attr(\"height\", height).attr(\"viewBox\", `0 0 ${width} ${height}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Calculate center and square spacing\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const squareSpacing = 200; // Distance between consecutive squares\n\n    const nodes = [];\n    const links = [];\n\n    // Function to calculate node positions on the square's perimeter\n    const calculateSquarePerimeterPositions = (numPoints, squareIndex) => {\n      const size = squareSpacing * (squareIndex + 1); // Square size grows with the index\n      const positions = [];\n      const pointsPerSide = Math.ceil(numPoints / 4);\n      const sideLength = size;\n      for (let i = 0; i < numPoints; i++) {\n        const side = Math.floor(i / pointsPerSide); // Determine which side of the square\n        const offset = i % pointsPerSide;\n        let x, y;\n        if (side === 0) {\n          // Top side\n          x = centerX - sideLength / 2 + offset / pointsPerSide * sideLength;\n          y = centerY - sideLength / 2;\n        } else if (side === 1) {\n          // Right side\n          x = centerX + sideLength / 2;\n          y = centerY - sideLength / 2 + offset / pointsPerSide * sideLength;\n        } else if (side === 2) {\n          // Bottom side\n          x = centerX + sideLength / 2 - offset / pointsPerSide * sideLength;\n          y = centerY + sideLength / 2;\n        } else {\n          // Left side\n          x = centerX - sideLength / 2;\n          y = centerY + sideLength / 2 - offset / pointsPerSide * sideLength;\n        }\n        positions.push({\n          x,\n          y\n        });\n      }\n      return positions;\n    };\n\n    // Build hierarchical nodes and links\n    subspaceKeys.forEach((subspace, index) => {\n      const points = jsonData[subspace];\n      const positions = calculateSquarePerimeterPositions(points.length, index);\n      points.forEach((point, i) => {\n        const id = `${subspace}-${i}`;\n        const node = {\n          id,\n          ...point,\n          x: positions[i].x,\n          y: positions[i].y\n        };\n        nodes.push(node);\n\n        // Add links to the previous square\n        if (index > 0) {\n          links.push({\n            source: nodes[nodes.length - points.length - i - 1].id,\n            target: id\n          });\n        }\n      });\n    });\n\n    // Draw squares\n    subspaceKeys.forEach((_, index) => {\n      const size = squareSpacing * (index + 1);\n      svg.append(\"rect\").attr(\"x\", centerX - size / 2).attr(\"y\", centerY - size / 2).attr(\"width\", size).attr(\"height\", size).attr(\"fill\", \"none\").attr(\"stroke\", \"#ddd\").attr(\"stroke-width\", 2);\n    });\n\n    // Draw links\n    svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(links).enter().append(\"line\").attr(\"x1\", d => {\n      var _nodes$find;\n      return (_nodes$find = nodes.find(node => node.id === d.source)) === null || _nodes$find === void 0 ? void 0 : _nodes$find.x;\n    }).attr(\"y1\", d => {\n      var _nodes$find2;\n      return (_nodes$find2 = nodes.find(node => node.id === d.source)) === null || _nodes$find2 === void 0 ? void 0 : _nodes$find2.y;\n    }).attr(\"x2\", d => {\n      var _nodes$find3;\n      return (_nodes$find3 = nodes.find(node => node.id === d.target)) === null || _nodes$find3 === void 0 ? void 0 : _nodes$find3.x;\n    }).attr(\"y2\", d => {\n      var _nodes$find4;\n      return (_nodes$find4 = nodes.find(node => node.id === d.target)) === null || _nodes$find4 === void 0 ? void 0 : _nodes$find4.y;\n    }).attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 1);\n\n    // Draw nodes\n    svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 5).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y).attr(\"fill\", (d, i) => i < jsonData[subspaceKeys[0]].length ? \"red\" : i < jsonData[subspaceKeys[1]].length ? \"blue\" : \"green\").on(\"mouseover\", (event, d) => {\n      setHoveredCoordinates({\n        ...d,\n        id: d.id\n      });\n    });\n\n    // Add tooltips\n    svg.selectAll(\"circle\").append(\"title\").text(d => `ID: ${d.id}`);\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","Object","keys","length","subspaceKeys","container","select","current","parentNode","width","node","getBoundingClientRect","height","margin","top","right","bottom","left","svg","attr","selectAll","remove","centerX","centerY","squareSpacing","nodes","links","calculateSquarePerimeterPositions","numPoints","squareIndex","size","positions","pointsPerSide","Math","ceil","sideLength","i","side","floor","offset","x","y","push","forEach","subspace","index","points","point","id","source","target","_","append","data","enter","d","_nodes$find","find","_nodes$find2","_nodes$find3","_nodes$find4","on","event","text","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    // Dynamically extract subspace keys\n    const subspaceKeys = Object.keys(jsonData);\n\n    // Set up container dimensions\n    const container = d3.select(graphRef.current.parentNode);\n    const width = container.node().getBoundingClientRect().width;\n    const height = container.node().getBoundingClientRect().height;\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\n\n    const svg = d3\n      .select(graphRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    // Clear previous render\n    svg.selectAll(\"*\").remove();\n\n    // Calculate center and square spacing\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const squareSpacing = 200; // Distance between consecutive squares\n\n    const nodes = [];\n    const links = [];\n\n    // Function to calculate node positions on the square's perimeter\n    const calculateSquarePerimeterPositions = (numPoints, squareIndex) => {\n      const size = squareSpacing * (squareIndex + 1); // Square size grows with the index\n      const positions = [];\n      const pointsPerSide = Math.ceil(numPoints / 4);\n      const sideLength = size;\n\n      for (let i = 0; i < numPoints; i++) {\n        const side = Math.floor(i / pointsPerSide); // Determine which side of the square\n        const offset = i % pointsPerSide;\n        let x, y;\n\n        if (side === 0) {\n          // Top side\n          x = centerX - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n          y = centerY - sideLength / 2;\n        } else if (side === 1) {\n          // Right side\n          x = centerX + sideLength / 2;\n          y = centerY - sideLength / 2 + (offset / pointsPerSide) * sideLength;\n        } else if (side === 2) {\n          // Bottom side\n          x = centerX + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n          y = centerY + sideLength / 2;\n        } else {\n          // Left side\n          x = centerX - sideLength / 2;\n          y = centerY + sideLength / 2 - (offset / pointsPerSide) * sideLength;\n        }\n\n        positions.push({ x, y });\n      }\n      return positions;\n    };\n\n    // Build hierarchical nodes and links\n    subspaceKeys.forEach((subspace, index) => {\n      const points = jsonData[subspace];\n      const positions = calculateSquarePerimeterPositions(points.length, index);\n\n      points.forEach((point, i) => {\n        const id = `${subspace}-${i}`;\n        const node = {\n          id,\n          ...point,\n          x: positions[i].x,\n          y: positions[i].y,\n        };\n        nodes.push(node);\n\n        // Add links to the previous square\n        if (index > 0) {\n          links.push({\n            source: nodes[nodes.length - points.length - i - 1].id,\n            target: id,\n          });\n        }\n      });\n    });\n\n    // Draw squares\n    subspaceKeys.forEach((_, index) => {\n      const size = squareSpacing * (index + 1);\n      svg\n        .append(\"rect\")\n        .attr(\"x\", centerX - size / 2)\n        .attr(\"y\", centerY - size / 2)\n        .attr(\"width\", size)\n        .attr(\"height\", size)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#ddd\")\n        .attr(\"stroke-width\", 2);\n    });\n\n    // Draw links\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(links)\n      .enter()\n      .append(\"line\")\n      .attr(\"x1\", (d) => nodes.find((node) => node.id === d.source)?.x)\n      .attr(\"y1\", (d) => nodes.find((node) => node.id === d.source)?.y)\n      .attr(\"x2\", (d) => nodes.find((node) => node.id === d.target)?.x)\n      .attr(\"y2\", (d) => nodes.find((node) => node.id === d.target)?.y)\n      .attr(\"stroke\", \"#aaa\")\n      .attr(\"stroke-width\", 1);\n\n    // Draw nodes\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"circle\")\n      .data(nodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", 5)\n      .attr(\"cx\", (d) => d.x)\n      .attr(\"cy\", (d) => d.y)\n      .attr(\"fill\", (d, i) =>\n        i < jsonData[subspaceKeys[0]].length\n          ? \"red\"\n          : i < jsonData[subspaceKeys[1]].length\n          ? \"blue\"\n          : \"green\"\n      )\n      .on(\"mouseover\", (event, d) => {\n        setHoveredCoordinates({\n          ...d,\n          id: d.id,\n        });\n      });\n\n    // Add tooltips\n    svg\n      .selectAll(\"circle\")\n      .append(\"title\")\n      .text((d) => `ID: ${d.id}`);\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"100%\", height: \"100%\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}