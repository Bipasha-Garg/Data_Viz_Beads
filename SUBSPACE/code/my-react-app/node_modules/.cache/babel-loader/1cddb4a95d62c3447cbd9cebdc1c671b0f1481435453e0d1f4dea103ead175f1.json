{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     console.log(\"Points data:\", pointsData.dimensions);\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           g.append(\"text\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", -outerRadius - 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"font-size\", \"16px\")\n//             .attr(\"fill\", \"red\")\n//             .attr(\"font-weight\", \"bold\")\n//             .text(ringLabels[index]);\n//         }\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } \n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    console.log(\"Points data:\", pointsData.dimensions);\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // // Function to calculate proportional angles\n    // const calculateProportionalAngles = (index) => {\n    //   const sectors = 2 ** (index + 1);\n    //   const points = pointsData[index].points;\n    //   const sectorCounts = Array(sectors).fill(0);\n    //   const minAngle = 0.1 * (Math.PI * 2) / sectors; // Minimum angle for empty sectors\n\n    //   // Count points in each sector\n    //   points.forEach(point => {\n    //     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    //     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    //     const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n    //     sectorCounts[bitVectorIndex]++;\n    //   });\n\n    //   // Calculate proportional angles\n    //   const totalPoints = points.length;\n    //   const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n    //   const pointsInNonEmptySectors = totalPoints;\n\n    //   return sectorCounts.map(count => {\n    //     if (count === 0) return minAngle;\n    //     return (count / pointsInNonEmptySectors) * remainingAngle;\n    //   });\n    // };\n    const calculateProportionalAngles = pointDistribution => {\n      if (!Array.isArray(pointDistribution) || pointDistribution.length === 0) {\n        return [];\n      }\n      const totalRings = pointDistribution.length;\n      const angles = Array.from({\n        length: totalRings\n      }, () => []);\n      const outermostRing = pointDistribution[totalRings - 1];\n      const totalPoints = outermostRing.reduce((sum, points) => sum + points, 0);\n      let totalAngle = 2 * Math.PI;\n      for (let i = 0; i < outermostRing.length; i++) {\n        angles[totalRings - 1][i] = outermostRing[i] / totalPoints * totalAngle;\n      }\n      for (let ring = totalRings - 2; ring >= 0; ring--) {\n        let parentSectors = angles[ring + 1];\n        let sectorIndex = 0;\n        for (let i = 0; i < parentSectors.length; i++) {\n          let parentAngle = parentSectors[i] || 0;\n          let totalChildPoints = (pointDistribution[ring][sectorIndex] || 0) + (pointDistribution[ring][sectorIndex + 1] || 0);\n          if (totalChildPoints > 0) {\n            angles[ring][sectorIndex] = pointDistribution[ring][sectorIndex] / totalChildPoints * parentAngle;\n            angles[ring][sectorIndex + 1] = pointDistribution[ring][sectorIndex + 1] / totalChildPoints * parentAngle;\n          } else {\n            angles[ring][sectorIndex] = parentAngle / 2;\n            angles[ring][sectorIndex + 1] = parentAngle / 2;\n          }\n          sectorIndex += 2;\n        }\n      }\n      return angles;\n    };\n    const pointDistribution = Object.keys(jsonData).map(key => jsonData[key].length);\n    const proportionalAngles = calculateProportionalAngles([pointDistribution]);\n    console.log(\"Calculated proportional angles:\", proportionalAngles);\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n          const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n    const renderProportionalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        // Calculate proportional angles for sectors\n        const proportionalAngles = calculateProportionalAngles(index);\n\n        // Draw sectors with proportional angles\n        let currentAngle = rotationOffset;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + proportionalAngles[i];\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n          currentAngle = endAngle;\n        }\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n        renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n      });\n    };\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n      const rotationOffset = Math.PI / 2;\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n        let startAngle;\n        if (isProportional) {\n          startAngle = 0;\n          for (let j = 0; j < bitVectorIndex; j++) {\n            startAngle += angles[j];\n          }\n        } else {\n          startAngle = 2 * Math.PI * bitVectorIndex / sectors;\n        }\n        const angleWidth = angles[bitVectorIndex];\n        const centerAngle = startAngle + angleWidth / 2;\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: pointsData[index].key\n          });\n        });\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          const pointIds = point.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    };\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 625,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","log","ringLabels","_","i","String","fromCharCode","pointPositions","calculateProportionalAngles","pointDistribution","angles","from","outermostRing","totalPoints","reduce","sum","totalAngle","PI","ring","parentSectors","parentAngle","totalChildPoints","proportionalAngles","renderNormalView","forEach","innerRadius","outerRadius","sectors","rotationOffset","startAngle","endAngle","arc","text","renderPoints","renderProportionalView","currentAngle","anglesOrSectors","isProportional","fill","point","pointData","entries","filter","bitVector","coord","join","bitVectorIndex","parseInt","j","angleWidth","centerAngle","minRadius","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","push","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     console.log(\"Points data:\", pointsData.dimensions);\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           g.append(\"text\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", -outerRadius - 5)\n//             .attr(\"text-anchor\", \"middle\")\n//             .attr(\"font-size\", \"16px\")\n//             .attr(\"fill\", \"red\")\n//             .attr(\"font-weight\", \"bold\")\n//             .text(ringLabels[index]);\n//         }\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n//       let currentAngle = Math.PI / 2;\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         const startAngle = isProportional ?\n//           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n//           (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } \n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key] || [],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    console.log(\"Points data:\", pointsData.dimensions);\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    // // Function to calculate proportional angles\n    // const calculateProportionalAngles = (index) => {\n    //   const sectors = 2 ** (index + 1);\n    //   const points = pointsData[index].points;\n    //   const sectorCounts = Array(sectors).fill(0);\n    //   const minAngle = 0.1 * (Math.PI * 2) / sectors; // Minimum angle for empty sectors\n\n    //   // Count points in each sector\n    //   points.forEach(point => {\n    //     const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n    //     const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n    //     const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n    //     sectorCounts[bitVectorIndex]++;\n    //   });\n\n    //   // Calculate proportional angles\n    //   const totalPoints = points.length;\n    //   const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n    //   const pointsInNonEmptySectors = totalPoints;\n\n    //   return sectorCounts.map(count => {\n    //     if (count === 0) return minAngle;\n    //     return (count / pointsInNonEmptySectors) * remainingAngle;\n    //   });\n    // };\n    const calculateProportionalAngles = (pointDistribution) => {\n      if (!Array.isArray(pointDistribution) || pointDistribution.length === 0) {\n        return [];\n      }\n      const totalRings = pointDistribution.length;\n      const angles = Array.from({ length: totalRings }, () => []);\n\n      const outermostRing = pointDistribution[totalRings - 1];\n      const totalPoints = outermostRing.reduce((sum, points) => sum + points, 0);\n      let totalAngle = 2 * Math.PI;\n\n      for (let i = 0; i < outermostRing.length; i++) {\n        angles[totalRings - 1][i] = (outermostRing[i] / totalPoints) * totalAngle;\n      }\n\n      for (let ring = totalRings - 2; ring >= 0; ring--) {\n        let parentSectors = angles[ring + 1];\n        let sectorIndex = 0;\n\n        for (let i = 0; i < parentSectors.length; i++) {\n          let parentAngle = parentSectors[i] || 0;\n          let totalChildPoints = (pointDistribution[ring][sectorIndex] || 0) + (pointDistribution[ring][sectorIndex + 1] || 0);\n\n          if (totalChildPoints > 0) {\n            angles[ring][sectorIndex] = (pointDistribution[ring][sectorIndex] / totalChildPoints) * parentAngle;\n            angles[ring][sectorIndex + 1] = (pointDistribution[ring][sectorIndex + 1] / totalChildPoints) * parentAngle;\n          } else {\n            angles[ring][sectorIndex] = parentAngle / 2;\n            angles[ring][sectorIndex + 1] = parentAngle / 2;\n          }\n          sectorIndex += 2;\n        }\n      }\n      return angles;\n    };\n\n    const pointDistribution = Object.keys(jsonData).map((key) => jsonData[key].length);\n    const proportionalAngles = calculateProportionalAngles([pointDistribution]);\n\n    console.log(\"Calculated proportional angles:\", proportionalAngles);\n    const renderNormalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n          const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          g.append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", -outerRadius - 5)\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"font-size\", \"16px\")\n            .attr(\"fill\", \"red\")\n            .attr(\"font-weight\", \"bold\")\n            .text(ringLabels[index]);\n        }\n        renderPoints(index, innerRadius, outerRadius, sectors);\n      });\n    };\n\n\n    const renderProportionalView = () => {\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        // Calculate proportional angles for sectors\n        const proportionalAngles = calculateProportionalAngles(index);\n\n        // Draw sectors with proportional angles\n        let currentAngle = rotationOffset;\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + proportionalAngles[i];\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"cursor\", \"pointer\");\n\n          currentAngle = endAngle;\n        }\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n      });\n    };\n\n    const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n      const isProportional = viewMode === \"proportional\";\n      const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n      const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n      const rotationOffset = Math.PI / 2;\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n        let startAngle;\n        if (isProportional) {\n          startAngle = 0;\n          for (let j = 0; j < bitVectorIndex; j++) {\n            startAngle += angles[j];\n          }\n        } else {\n          startAngle = (2 * Math.PI * bitVectorIndex) / sectors ;\n        }\n\n        const angleWidth = angles[bitVectorIndex];\n        const centerAngle = startAngle + angleWidth / 2;\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const totalPoints = pointsData[index].points.length;\n        const clusterFactor = 0.9;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n          totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n        });\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    };\n\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-opacity\", 0.9)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}