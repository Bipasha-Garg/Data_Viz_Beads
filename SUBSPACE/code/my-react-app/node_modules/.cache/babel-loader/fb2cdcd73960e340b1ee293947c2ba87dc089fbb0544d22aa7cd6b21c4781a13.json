{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip container\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1); // Number of sectors based on subspace dimensions\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      // Draw the outer circle representing the subspace\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2).style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n      // Draw the radial lines dividing the sectors\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n      }\n\n      // Place points inside the subspace with bit vectors\n      subspace.points.forEach(point => {\n        // Exclude Point_ID from bit vector calculation if present\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n\n        // Generate bit vector for all coordinates excluding Point_ID\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0) // 1 if positive, 0 if negative\n        .join(\"\"); // Combine into a bit vector string\n\n        // Calculate inner and outer radius for placement\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n        // Calculate the angle for the sector based on the bit vector\n        const bitVectorIndex = parseInt(bitVector, 2); // Convert bit vector to a decimal number (sector index)\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n\n        // Generate a random angle within the sector's angular range\n        const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n\n        // Position based on the calculated angle and random radius\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        // Create a circle for each point and make sure they are on top\n        const pointElement = g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 4).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\") // Make points interactive\n        .on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`\n                <strong>Bit Vector:</strong> ${bitVector}<br>\n                <strong>Coordinates:</strong> (${pointData.map(([key, coord]) => `${key}: ${coord}`).join(\", \")})\n              `);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      });\n    });\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"800px\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","HierarchicalGraph","jsonData","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","tooltip","style","forEach","subspace","index","innerRadius","outerRadius","sectors","colorScale","scaleOrdinal","range","subspaceColor","i","angle","PI","x1","cos","y1","sin","point","pointData","entries","filter","bitVector","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","randomAngle","x","y","pointElement","on","event","html","pageY","pageX","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Tooltip container\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index+1); // Number of sectors based on subspace dimensions\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      // Draw the outer circle representing the subspace\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2)\n        .style(\"pointer-events\", \"none\"); // Ensure circles do not block hover\n\n      // Draw the radial lines dividing the sectors\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1)\n          .style(\"pointer-events\", \"none\"); // Ensure radial lines do not block hover\n      }\n\n      // Place points inside the subspace with bit vectors\n      subspace.points.forEach((point) => {\n        // Exclude Point_ID from bit vector calculation if present\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n\n        // Generate bit vector for all coordinates excluding Point_ID\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0)) // 1 if positive, 0 if negative\n          .join(\"\"); // Combine into a bit vector string\n\n        // Calculate inner and outer radius for placement\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        // Calculate the angle for the sector based on the bit vector\n        const bitVectorIndex = parseInt(bitVector, 2); // Convert bit vector to a decimal number (sector index)\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n        // Generate a random angle within the sector's angular range\n        const randomAngle =\n          angleStart + Math.random() * (angleEnd - angleStart);\n\n        // Position based on the calculated angle and random radius\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        // Create a circle for each point and make sure they are on top\n        const pointElement = g\n          .append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 4)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\") // Make points interactive\n          .on(\"mouseover\", (event) => {\n            tooltip.style(\"visibility\", \"visible\").html(`\n                <strong>Bit Vector:</strong> ${bitVector}<br>\n                <strong>Coordinates:</strong> (${pointData\n                  .map(([key, coord]) => `${key}: ${coord}`)\n                  .join(\", \")})\n              `);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      });\n    });\n  }, [jsonData]);\n\n  return (\n    <>\n      <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>\n    </>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;IAErD,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC;IACvCM,SAAS,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,MAAM,GAAGI,CAAC,CAACJ,MAAM,CAAC;IAE7C,MAAMK,UAAU,GAAGJ,SAAS,CAACK,GAAG,CAAEC,GAAG,KAAM;MACzCA,GAAG;MACHC,MAAM,EAAEb,QAAQ,CAACY,GAAG,CAAC;MACrBE,UAAU,EAAEF,GAAG,CAACP,MAAM;MACtBU,UAAU,EAAEH;IACd,CAAC,CAAC,CAAC;IAEH,MAAMI,GAAG,GAAGtB,EAAE,CAACuB,MAAM,CAACf,QAAQ,CAACgB,OAAO,CAAC;IACvC,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG,EAAE;IAEjBL,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAC3B,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACP,KAAK,EAAEC,MAAM,CAAC,GAAG,CAAC,GAAGC,MAAM;IACtD,MAAMM,CAAC,GAAGX,GAAG,CACVY,IAAI,CAAC,OAAO,EAAET,KAAK,CAAC,CACpBS,IAAI,CAAC,QAAQ,EAAER,MAAM,CAAC,CACtBS,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAaT,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;;IAE9D;IACA,MAAMU,OAAO,GAAGpC,EAAE,CACfuB,MAAM,CAAC,MAAM,CAAC,CACdY,MAAM,CAAC,KAAK,CAAC,CACbD,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBG,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAC7BA,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC7BA,KAAK,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAC/CA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CACvBA,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CACvBA,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAC7BA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC;IAE7BrB,UAAU,CAACsB,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MACtC,MAAMC,WAAW,GAAID,KAAK,GAAG5B,SAAS,CAACD,MAAM,GAAImB,SAAS;MAC1D,MAAMY,WAAW,GAAI,CAACF,KAAK,GAAG,CAAC,IAAI5B,SAAS,CAACD,MAAM,GAAImB,SAAS;MAChE,MAAMa,OAAO,GAAG,CAAC,KAAKH,KAAK,GAAC,CAAC,CAAC,CAAC,CAAC;MAChC,MAAMI,UAAU,GAAG5C,EAAE,CAClB6C,YAAY,CAAC,CAAC,CACdC,KAAK,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;MAC3C,MAAMC,aAAa,GAAGH,UAAU,CAAC,CAACJ,KAAK,GAAG,CAAC,IAAII,UAAU,CAACE,KAAK,CAAC,CAAC,CAACnC,MAAM,CAAC;;MAEzE;MACAsB,CAAC,CAACE,MAAM,CAAC,QAAQ,CAAC,CACfD,IAAI,CAAC,GAAG,EAAEQ,WAAW,CAAC,CACtBR,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAEa,aAAa,CAAC,CAC3Bb,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBG,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;;MAEpC;MACA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,EAAEK,CAAC,EAAE,EAAE;QAChC,MAAMC,KAAK,GAAI,CAAC,GAAGlB,IAAI,CAACmB,EAAE,GAAGF,CAAC,GAAIL,OAAO;QACzC,MAAMQ,EAAE,GAAGT,WAAW,GAAGX,IAAI,CAACqB,GAAG,CAACH,KAAK,CAAC;QACxC,MAAMI,EAAE,GAAGX,WAAW,GAAGX,IAAI,CAACuB,GAAG,CAACL,KAAK,CAAC;QACxChB,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAEiB,EAAE,CAAC,CACdjB,IAAI,CAAC,IAAI,EAAEmB,EAAE,CAAC,CACdnB,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBG,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;MACtC;;MAEA;MACAE,QAAQ,CAACpB,MAAM,CAACmB,OAAO,CAAEiB,KAAK,IAAK;QACjC;QACA,MAAMC,SAAS,GAAG/C,MAAM,CAACgD,OAAO,CAACF,KAAK,CAAC,CAACG,MAAM,CAC5C,CAAC,CAACxC,GAAG,CAAC,KAAKA,GAAG,KAAK,UACrB,CAAC;;QAED;QACA,MAAMyC,SAAS,GAAGH,SAAS,CACxBvC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAE0C,KAAK,CAAC,KAAMA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC;QAAA,CAC5CC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEb;QACA,MAAMC,SAAS,GAAGrB,WAAW;QAC7B,MAAMX,SAAS,GAAGY,WAAW;QAC7B,MAAMqB,YAAY,GAChBD,SAAS,GAAG/B,IAAI,CAACiC,MAAM,CAAC,CAAC,IAAIlC,SAAS,GAAGgC,SAAS,CAAC;;QAErD;QACA,MAAMG,cAAc,GAAGC,QAAQ,CAACP,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/C,MAAMQ,UAAU,GAAI,CAAC,GAAGpC,IAAI,CAACmB,EAAE,GAAGe,cAAc,GAAItB,OAAO;QAC3D,MAAMyB,QAAQ,GAAI,CAAC,GAAGrC,IAAI,CAACmB,EAAE,IAAIe,cAAc,GAAG,CAAC,CAAC,GAAItB,OAAO;;QAE/D;QACA,MAAM0B,WAAW,GACfF,UAAU,GAAGpC,IAAI,CAACiC,MAAM,CAAC,CAAC,IAAII,QAAQ,GAAGD,UAAU,CAAC;;QAEtD;QACA,MAAMG,CAAC,GAAGP,YAAY,GAAGhC,IAAI,CAACqB,GAAG,CAACiB,WAAW,CAAC;QAC9C,MAAME,CAAC,GAAGR,YAAY,GAAGhC,IAAI,CAACuB,GAAG,CAACe,WAAW,CAAC;;QAE9C;QACA,MAAMG,YAAY,GAAGvC,CAAC,CACnBE,MAAM,CAAC,QAAQ,CAAC,CAChBD,IAAI,CAAC,IAAI,EAAEoC,CAAC,CAAC,CACbpC,IAAI,CAAC,IAAI,EAAEqC,CAAC,CAAC,CACbrC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBG,KAAK,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAAA,CACnCoC,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;UAC1BtC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAACsC,IAAI,CAAC;AACxD,+CAA+ChB,SAAS;AACxD,iDAAiDH,SAAS,CACvCvC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAE0C,KAAK,CAAC,KAAK,GAAG1C,GAAG,KAAK0C,KAAK,EAAE,CAAC,CACzCC,IAAI,CAAC,IAAI,CAAC;AAC7B,eAAe,CAAC;QACN,CAAC,CAAC,CACDY,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;UAC1BtC,OAAO,CACJC,KAAK,CAAC,KAAK,EAAEqC,KAAK,CAACE,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrCvC,KAAK,CAAC,MAAM,EAAEqC,KAAK,CAACG,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;QAC3C,CAAC,CAAC,CACDJ,EAAE,CAAC,UAAU,EAAE,MAAM;UACpBrC,OAAO,CAACC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;QACvC,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/B,QAAQ,CAAC,CAAC;EAEd,oBACEJ,OAAA,CAAAE,SAAA;IAAA0E,QAAA,eACE5E,OAAA;MAAK6E,GAAG,EAAEvE,QAAS;MAAC6B,KAAK,EAAE;QAAEZ,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAsD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC,gBACtE,CAAC;AAEP,CAAC;AAAC5E,EAAA,CA7IIF,iBAAiB;AAAA+E,EAAA,GAAjB/E,iBAAiB;AA+IvB,eAAeA,iBAAiB;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}