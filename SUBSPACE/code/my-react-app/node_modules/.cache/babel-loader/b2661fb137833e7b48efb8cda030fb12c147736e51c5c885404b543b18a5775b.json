{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData,labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {};\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 3301 : 0, 1, 0.5);\n//     };\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n\n//       // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n//       const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(subspace.key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//             totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n//         const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n//         const legendData = [\n//           { color: \"yellow\", label: \"Positive Bit\" },\n//           { color: \"pink\", label: \"Negative Bit\" },\n//         ];\n//         legendData.forEach((item, index) => {\n//           legend\n//             .append(\"rect\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", index * 20)\n//             .attr(\"width\", 15)\n//             .attr(\"height\", 15)\n//             .attr(\"fill\", item.color);\n\n//           legend\n//             .append(\"text\")\n//             .attr(\"x\", 20)\n//             .attr(\"y\", index * 20 + 12)\n//             .text(item.label)\n//             .attr(\"font-size\", \"12px\")\n//             .attr(\"alignment-baseline\", \"middle\");\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0 || !labelsData) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const pointPositions = {};\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Generate unique colors for each label\n    const labelKeys = Object.keys(labelsData);\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelKeys);\n\n    // Function to get color by Point_ID\n    const getLabelColor = pointId => {\n      for (const label in labelsData) {\n        if (labelsData[label].includes(pointId)) {\n          return colorScale(label);\n        }\n      }\n      return \"black\"; // Default color if no label is found\n    };\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(2 * Math.PI * i / sectors + rotationOffset).endAngle(2 * Math.PI * (i + 1) / sectors + rotationOffset)).attr(\"fill\", d3.hsl(index % 2 === 1 ? 3301 : 0, 1, 0.5)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n      }\n      subspace.points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const totalPoints = subspace.points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPoints) / totalPoints;\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: subspace.key\n          });\n        });\n        point.Point_ID.forEach(id => {\n          const color = getLabelColor(id);\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", color).attr(\"stroke-width\", 1.5) // Make edges visible\n          .style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${point.Point_ID.join(\", \")}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}<br>Label Color: ${color}`);\n            setHoveredCoordinates(point);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        const color = getLabelColor(pointId); // Use label color for edges\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", color).attr(\"stroke-width\", 0.8).on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n  }, [jsonData, labelsData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"800px\",\n      height: \"800px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","pointPositions","tooltip","style","labelKeys","colorScale","scaleOrdinal","schemeCategory10","domain","getLabelColor","pointId","label","includes","forEach","subspace","index","innerRadius","outerRadius","sectors","rotationOffset","PI","i","arc","startAngle","endAngle","hsl","point","pointData","entries","filter","bitVector","coord","join","minRadius","bitVectorIndex","parseInt","angleStart","angleEnd","centerAngle","totalPoints","clusterFactor","overlapRadius","x","cos","y","sin","Point_ID","id","push","color","on","event","html","toFixed","pageY","pageX","positions","zoom","transform","call","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData,labelsData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {};\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 3301 : 0, 1, 0.5);\n//     };\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n\n//       // const rotationOffset = index === 0 ? Math.PI / 2 : 0;\n//       const rotationOffset = Math.PI / 2; // Apply uniform rotation\n\n//       for (let i = 0; i < sectors; i++) {\n//         g.append(\"path\")\n//           .attr(\n//             \"d\",\n//             d3\n//               .arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5);\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(subspace.key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = subspace.points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//             totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n//         });\n//         const legend = svg.append(\"g\").attr(\"transform\", \"translate(10, 10)\");\n//         const legendData = [\n//           { color: \"yellow\", label: \"Positive Bit\" },\n//           { color: \"pink\", label: \"Negative Bit\" },\n//         ];\n//         legendData.forEach((item, index) => {\n//           legend\n//             .append(\"rect\")\n//             .attr(\"x\", 0)\n//             .attr(\"y\", index * 20)\n//             .attr(\"width\", 15)\n//             .attr(\"height\", 15)\n//             .attr(\"fill\", item.color);\n\n//           legend\n//             .append(\"text\")\n//             .attr(\"x\", 20)\n//             .attr(\"y\", index * 20 + 12)\n//             .text(item.label)\n//             .attr(\"font-size\", \"12px\")\n//             .attr(\"alignment-baseline\", \"middle\");\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})<br>Subspace: ${subspace.key}`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0 || !labelsData) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const pointPositions = {};\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    // Generate unique colors for each label\n    const labelKeys = Object.keys(labelsData);\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(labelKeys);\n\n    // Function to get color by Point_ID\n    const getLabelColor = (pointId) => {\n      for (const label in labelsData) {\n        if (labelsData[label].includes(pointId)) {\n          return colorScale(label);\n        }\n      }\n      return \"black\"; // Default color if no label is found\n    };\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      for (let i = 0; i < sectors; i++) {\n        g.append(\"path\")\n          .attr(\n            \"d\",\n            d3\n              .arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n              .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n          )\n          .attr(\"fill\", d3.hsl(index % 2 === 1 ? 3301 : 0, 1, 0.5))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5);\n      }\n\n      subspace.points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const totalPoints = subspace.points.length;\n        const clusterFactor = 0.86;\n        const overlapRadius =\n          innerRadius +\n          (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n            totalPoints;\n\n        const x = overlapRadius * Math.cos(centerAngle);\n        const y = overlapRadius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: subspace.key });\n        });\n\n        point.Point_ID.forEach((id) => {\n          const color = getLabelColor(id);\n          g.append(\"circle\")\n            .attr(\"cx\", x)\n            .attr(\"cy\", y)\n            .attr(\"r\", 3)\n            .attr(\"fill\", \"black\")\n            .attr(\"stroke\", color)\n            .attr(\"stroke-width\", 1.5) // Make edges visible\n            .style(\"pointer-events\", \"visible\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(\n                  `Point_IDs: ${point.Point_ID.join(\n                    \", \"\n                  )}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(\n                    2\n                  )})<br>Subspace: ${subspace.key}<br>Label Color: ${color}`\n                );\n              setHoveredCoordinates(point);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n              setHoveredCoordinates(null);\n            });\n        });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        const color = getLabelColor(pointId); // Use label color for edges\n        for (let i = 0; i < positions.length - 1; i++) {\n          g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", color)\n            .attr(\"stroke-width\", 0.8)\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n\n    svg.call(zoom);\n  }, [jsonData, labelsData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAsB,CAAC,KAAK;E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}