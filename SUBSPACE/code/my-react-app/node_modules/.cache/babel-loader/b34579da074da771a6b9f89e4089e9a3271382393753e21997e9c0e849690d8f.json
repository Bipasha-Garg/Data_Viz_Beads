{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     // Function to show zoomed sector view\n//     const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n//       // Clear existing zoom view\n//       svg.select(\".zoom-view\").remove();\n\n//       const zoomGroup = svg.append(\"g\")\n//         .attr(\"class\", \"zoom-view\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n//         .filter(point => {\n//           const bitVector = Object.entries(point)\n//             .filter(([k]) => k !== \"Point_ID\")\n//             .map(([_, v]) => v >= 0 ? 1 : 0)\n//             .join(\"\");\n//           const bitIndex = parseInt(bitVector, 2);\n//           const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n//           return bitIndex === sectorIndex;\n//         });\n\n//       const zoomWidth = width * 0.8;\n//       const zoomHeight = height * 0.8;\n//       const arcCount = sectorPoints.length;\n\n//       // Draw zoomed sector background\n//       zoomGroup.append(\"rect\")\n//         .attr(\"x\", -zoomWidth / 2)\n//         .attr(\"y\", -zoomHeight / 2)\n//         .attr(\"width\", zoomWidth)\n//         .attr(\"height\", zoomHeight)\n//         .attr(\"fill\", \"white\")\n//         .attr(\"stroke\", \"black\");\n\n//       // Draw arcs and points\n//       sectorPoints.forEach((point, i) => {\n//         const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n//         const maxValue = Math.max(...sectorPoints.map(p =>\n//           Math.abs(Object.values(p).filter(v => typeof v === \"number\")[0])));\n\n//         const arcRadius = (zoomHeight * 0.4 * (i + 1)) / arcCount;\n//         const arc = d3.arc()\n//           .innerRadius(arcRadius - 5)\n//           .outerRadius(arcRadius)\n//           .startAngle(-Math.PI / 2)\n//           .endAngle(Math.PI / 2);\n\n//         zoomGroup.append(\"path\")\n//           .attr(\"d\", arc)\n//           .attr(\"fill\", \"lightblue\")\n//           .attr(\"opacity\", 0.5);\n\n//         const angle = (value / maxValue) * Math.PI - Math.PI / 2;\n//         const x = arcRadius * Math.cos(angle);\n//         const y = arcRadius * Math.sin(angle);\n\n//         zoomGroup.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", getLabelColor(point.Point_ID[0]));\n//       });\n\n//       // Add close button\n//       zoomGroup.append(\"text\")\n//         .attr(\"x\", zoomWidth / 2 - 20)\n//         .attr(\"y\", -zoomHeight / 2 + 20)\n//         .text(\"Ã—\")\n//         .attr(\"font-size\", \"20px\")\n//         .style(\"cursor\", \"pointer\")\n//         .on(\"click\", () => zoomGroup.remove());\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\")\n//           .on(\"click\", () => {\n//             clearHighlights();\n//             showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n//           });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const edgePopup = d3.select(\"body\").append(\"div\").attr(\"class\", \"edge-popup\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(255, 255, 255, 0.9)\").style(\"color\", \"black\").style(\"padding\", \"10px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\").style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\").style(\"max-width\", \"300px\");\n    const subspaces = Object.keys(jsonData).sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key]\n    }));\n    const pointPositions = {};\n    let highlightedElements = null;\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.forEach(circle => circle.attr(\"r\", 3).attr(\"fill\", \"black\"));\n        highlightedElements = null;\n      }\n    };\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n        const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", d3.hsl(i % 2 === 0 ? 0 : 220, 0.9, 0.6)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\");\n      }\n      pointsData[index].points.forEach((point, i) => {\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const overlapRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const x = overlapRadius * Math.cos(2 * Math.PI * i / pointsData[index].points.length);\n        const y = overlapRadius * Math.sin(2 * Math.PI * i / pointsData[index].points.length);\n        g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`Point_ID: ${point.Point_ID}`);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      });\n    });\n    svg.call(d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    }));\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 566,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","edgePopup","subspaces","sort","a","b","pointsData","map","key","points","pointPositions","highlightedElements","clearHighlights","line","originalColor","circles","forEach","circle","index","innerRadius","outerRadius","sectors","rotationOffset","PI","i","startAngle","endAngle","arc","hsl","point","minRadius","overlapRadius","random","x","cos","y","sin","on","event","html","Point_ID","pageY","pageX","call","zoom","transform","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     // Function to show zoomed sector view\n//     const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n//       // Clear existing zoom view\n//       svg.select(\".zoom-view\").remove();\n\n//       const zoomGroup = svg.append(\"g\")\n//         .attr(\"class\", \"zoom-view\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n//         .filter(point => {\n//           const bitVector = Object.entries(point)\n//             .filter(([k]) => k !== \"Point_ID\")\n//             .map(([_, v]) => v >= 0 ? 1 : 0)\n//             .join(\"\");\n//           const bitIndex = parseInt(bitVector, 2);\n//           const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n//           return bitIndex === sectorIndex;\n//         });\n\n//       const zoomWidth = width * 0.8;\n//       const zoomHeight = height * 0.8;\n//       const arcCount = sectorPoints.length;\n\n//       // Draw zoomed sector background\n//       zoomGroup.append(\"rect\")\n//         .attr(\"x\", -zoomWidth / 2)\n//         .attr(\"y\", -zoomHeight / 2)\n//         .attr(\"width\", zoomWidth)\n//         .attr(\"height\", zoomHeight)\n//         .attr(\"fill\", \"white\")\n//         .attr(\"stroke\", \"black\");\n\n//       // Draw arcs and points\n//       sectorPoints.forEach((point, i) => {\n//         const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n//         const maxValue = Math.max(...sectorPoints.map(p =>\n//           Math.abs(Object.values(p).filter(v => typeof v === \"number\")[0])));\n\n//         const arcRadius = (zoomHeight * 0.4 * (i + 1)) / arcCount;\n//         const arc = d3.arc()\n//           .innerRadius(arcRadius - 5)\n//           .outerRadius(arcRadius)\n//           .startAngle(-Math.PI / 2)\n//           .endAngle(Math.PI / 2);\n\n//         zoomGroup.append(\"path\")\n//           .attr(\"d\", arc)\n//           .attr(\"fill\", \"lightblue\")\n//           .attr(\"opacity\", 0.5);\n\n//         const angle = (value / maxValue) * Math.PI - Math.PI / 2;\n//         const x = arcRadius * Math.cos(angle);\n//         const y = arcRadius * Math.sin(angle);\n\n//         zoomGroup.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", getLabelColor(point.Point_ID[0]));\n//       });\n\n//       // Add close button\n//       zoomGroup.append(\"text\")\n//         .attr(\"x\", zoomWidth / 2 - 20)\n//         .attr(\"y\", -zoomHeight / 2 + 20)\n//         .text(\"Ã—\")\n//         .attr(\"font-size\", \"20px\")\n//         .style(\"cursor\", \"pointer\")\n//         .on(\"click\", () => zoomGroup.remove());\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\")\n//           .on(\"click\", () => {\n//             clearHighlights();\n//             showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n//           });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n\n    \n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg.attr(\"width\", width).attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3.select(\"body\").append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const edgePopup = d3.select(\"body\").append(\"div\")\n      .attr(\"class\", \"edge-popup\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n      .style(\"color\", \"black\")\n      .style(\"padding\", \"10px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\")\n      .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n      .style(\"max-width\", \"300px\");\n\n    const subspaces = Object.keys(jsonData).sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({ key, points: jsonData[key] }));\n    const pointPositions = {};\n    let highlightedElements = null;\n\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.forEach(circle => circle.attr(\"r\", 3).attr(\"fill\", \"black\"));\n        highlightedElements = null;\n      }\n    };\n\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n        const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n        g.append(\"path\")\n          .attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle))\n          .attr(\"fill\", d3.hsl(i % 2 === 0 ? 0 : 220, 0.9, 0.6))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"cursor\", \"pointer\");\n      }\n\n      pointsData[index].points.forEach((point, i) => {\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const overlapRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const x = overlapRadius * Math.cos((2 * Math.PI * i) / pointsData[index].points.length);\n        const y = overlapRadius * Math.sin((2 * Math.PI * i) / pointsData[index].points.length);\n\n        g.append(\"circle\")\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .on(\"mouseover\", (event) => {\n            tooltip.style(\"visibility\", \"visible\").html(`Point_ID: ${point.Point_ID}`);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      });\n    });\n\n    svg.call(d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    }));\n\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIM,MAAM,CAACC,IAAI,CAACP,QAAQ,CAAC,CAACQ,MAAM,KAAK,CAAC,EAAE;MACnFC,OAAO,CAACC,KAAK,CAAC,4BAA4B,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}