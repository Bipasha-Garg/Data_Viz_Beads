{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (\n// // //       !jsonData ||\n// // //       typeof jsonData !== \"object\" ||\n// // //       Object.keys(jsonData).length === 0\n// // //     ) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3\n// // //       .scaleOrdinal(d3.schemeCategory10)\n// // //       .domain(Object.keys(labelsData.labels || {}));\n\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n\n// // //     const pointPositions = {};\n\n// // //     subspaces.forEach((key, index) => {\n// // //       if (!ringVisibility[key]) return;\n\n// // //       const innerRadius = (index / subspaces.length) * maxRadius;\n// // //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //       const sectors = 2 ** (index + 1);\n// // //       const rotationOffset = Math.PI / 2;\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         g.append(\"path\")\n// // //           .attr(\n// // //             \"d\",\n// // //             d3\n// // //               .arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n// // //               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n// // //           )\n// // //           .attr(\"fill\", getSectorColor(index, i))\n// // //           .attr(\"fill-opacity\", 0.3)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.5);\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"12px\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //           .text(key);\n// // //       }\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         const angle = (2 * Math.PI * i) / sectors;\n// // //         const x1 = outerRadius * Math.cos(angle);\n// // //         const y1 = outerRadius * Math.sin(angle);\n// // //         const x2 = innerRadius * Math.cos(angle);\n// // //         const y2 = innerRadius * Math.sin(angle);\n// // //         g.append(\"line\")\n// // //           .attr(\"x1\", x2)\n// // //           .attr(\"y1\", y2)\n// // //           .attr(\"x2\", x1)\n// // //           .attr(\"y2\", y1)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.25)\n// // //           .style(\"pointer-events\", \"none\");\n// // //       }\n\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(\n// // //           ([key]) => key !== \"Point_ID\"\n// // //         );\n// // //         const bitVector = pointData\n// // //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// // //           .join(\"\");\n\n// // //         const minRadius = innerRadius;\n// // //         const maxRadius = outerRadius;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// // //         const bitVectorIndex = parseInt(bitVector, 2);\n// // //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// // //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.86;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           // .on(\"mouseover\", (event) => {\n// // //           //   const pointIds = point.Point_ID.join(\", \");\n// // //           //   tooltip\n// // //           //     .style(\"visibility\", \"visible\")\n// // //           //     .html(\n// // //           //       `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n// // //           //         2\n// // //           //       )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n// // //           //     );\n// // //           //   setHoveredCoordinates(point);\n// // //           // })\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n\n// // //             // Find label(s) associated with this point\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// // //               );\n\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     });\n\n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 0.3)\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n\n// // //     svg.call(zoom);\n// // //     const legendData = [\n// // //       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n// // //       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n// // //     ];\n\n// // //     const legend = svg.append(\"g\")\n// // //       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n// // //     legend.selectAll(\"rect\")\n// // //       .data(legendData)\n// // //       .enter()\n// // //       .append(\"rect\")\n// // //       .attr(\"x\", 0)\n// // //       .attr(\"y\", (d, i) => i * 30)\n// // //       .attr(\"width\", 20)\n// // //       .attr(\"height\", 20)\n// // //       .attr(\"fill\", d => d.color);\n\n// // //     legend.selectAll(\"text\")\n// // //       .data(legendData)\n// // //       .enter()\n// // //       .append(\"text\")\n// // //       .attr(\"x\", 25)\n// // //       .attr(\"y\", (d, i) => i * 30 + 15)\n// // //       .text(d => d.label)\n// // //       .attr(\"font-size\", \"12px\")\n// // //       .attr(\"alignment-baseline\", \"middle\");\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n\n// //     const pointPositions = {};\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         g.append(\"path\")\n// //           .attr(\n// //             \"d\",\n// //             d3\n// //               .arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n// //               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.5);\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"12px\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(key);\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n// //               const label2 = label1;\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label2}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n\n// //     svg.call(zoom);\n\n// //     const legendData = [\n// //       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n// //       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n// //     ];\n\n// //     const legend = svg.append(\"g\")\n// //       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n// //     legend.selectAll(\"rect\")\n// //       .data(legendData)\n// //       .enter()\n// //       .append(\"rect\")\n// //       .attr(\"x\", 0)\n// //       .attr(\"y\", (d, i) => i * 30)\n// //       .attr(\"width\", 20)\n// //       .attr(\"height\", 20)\n// //       .attr(\"fill\", d => d.color);\n\n// //     legend.selectAll(\"text\")\n// //       .data(legendData)\n// //       .enter()\n// //       .append(\"text\")\n// //       .attr(\"x\", 25)\n// //       .attr(\"y\", (d, i) => i * 30 + 15)\n// //       .text(d => d.label)\n// //       .attr(\"font-size\", \"12px\")\n// //       .attr(\"alignment-baseline\", \"middle\");\n\n// //     // Cleanup on unmount\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     // Function to show zoomed sector view\n//     const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n//       // Clear existing zoom view\n//       svg.select(\".zoom-view\").remove();\n\n//       const zoomGroup = svg.append(\"g\")\n//         .attr(\"class\", \"zoom-view\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n//         .filter(point => {\n//           const bitVector = Object.entries(point)\n//             .filter(([k]) => k !== \"Point_ID\")\n//             .map(([_, v]) => v >= 0 ? 1 : 0)\n//             .join(\"\");\n//           const bitIndex = parseInt(bitVector, 2);\n//           const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n//           return bitIndex === sectorIndex;\n//         });\n\n//       const zoomWidth = width * 0.8;\n//       const zoomHeight = height * 0.8;\n//       const arcCount = sectorPoints.length;\n\n//       // Draw zoomed sector background\n//       zoomGroup.append(\"rect\")\n//         .attr(\"x\", -zoomWidth / 2)\n//         .attr(\"y\", -zoomHeight / 2)\n//         .attr(\"width\", zoomWidth)\n//         .attr(\"height\", zoomHeight)\n//         .attr(\"fill\", \"white\")\n//         .attr(\"stroke\", \"black\");\n\n//       // Draw arcs and points\n//       sectorPoints.forEach((point, i) => {\n//         const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n//         const maxValue = Math.max(...sectorPoints.map(p =>\n//           Math.abs(Object.values(p).filter(v => typeof v === \"number\")[0])));\n\n//         const arcRadius = (zoomHeight * 0.4 * (i + 1)) / arcCount;\n//         const arc = d3.arc()\n//           .innerRadius(arcRadius - 5)\n//           .outerRadius(arcRadius)\n//           .startAngle(-Math.PI / 2)\n//           .endAngle(Math.PI / 2);\n\n//         zoomGroup.append(\"path\")\n//           .attr(\"d\", arc)\n//           .attr(\"fill\", \"lightgray\")\n//           .attr(\"opacity\", 0.5);\n\n//         const angle = (value / maxValue) * Math.PI - Math.PI / 2;\n//         const x = arcRadius * Math.cos(angle);\n//         const y = arcRadius * Math.sin(angle);\n\n//         zoomGroup.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", getLabelColor(point.Point_ID[0]));\n//       });\n\n//       // Add close button\n//       zoomGroup.append(\"text\")\n//         .attr(\"x\", zoomWidth / 2 - 20)\n//         .attr(\"y\", -zoomHeight / 2 + 20)\n//         .text(\"×\")\n//         .attr(\"font-size\", \"20px\")\n//         .style(\"cursor\", \"pointer\")\n//         .on(\"click\", () => zoomGroup.remove());\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\")\n//           .on(\"click\", () => {\n//             clearHighlights();\n//             showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n//           });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const edgePopup = d3.select(\"body\").append(\"div\").attr(\"class\", \"edge-popup\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(255, 255, 255, 0.9)\").style(\"color\", \"black\").style(\"padding\", \"10px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\").style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\").style(\"max-width\", \"300px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const pointPositions = {};\n    let highlightedElements = null;\n    let isZoomed = false;\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.attr(\"r\", 3).attr(\"fill\", \"black\");\n        highlightedElements = null;\n      }\n    };\n    const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n      if (isZoomed) return;\n      isZoomed = true;\n      g.transition().duration(300).style(\"opacity\", 0.2);\n      const zoomGroup = svg.append(\"g\").attr(\"class\", \"zoom-view\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n      const sectorPoints = pointsData.find(d => d.key === subspaceKey).points.filter(point => {\n        const bitVector = Object.entries(point).filter(([k]) => k !== \"Point_ID\").map(([_, v]) => v >= 0 ? 1 : 0).join(\"\");\n        const bitIndex = parseInt(bitVector, 2);\n        const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n        return bitIndex === sectorIndex;\n      });\n      zoomGroup.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(subspaces.indexOf(subspaceKey), sectorIndex)).attr(\"fill-opacity\", 0.8).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1);\n      sectorPoints.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const radiusStep = (maxRadius - minRadius) / (sectorPoints.length + 1);\n        const radius = minRadius + (i + 1) * radiusStep;\n        const angleRange = endAngle - startAngle;\n        const angleStep = angleRange / (sectorPoints.length + 1);\n        const centerAngle = startAngle + (i + 1) * angleStep;\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n        zoomGroup.append(\"circle\").datum(point).attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 5).attr(\"fill\", getLabelColor(point.Point_ID[0])).attr(\"stroke\", \"white\").attr(\"stroke-width\", 1).on(\"mouseover\", (event, d) => {\n          const pointIds = d.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (d.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspaceKey}<br>Label: ${labelText}`);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      });\n      svg.on(\"click\", event => {\n        if (isZoomed && !zoomGroup.node().contains(event.target)) {\n          zoomGroup.remove();\n          g.transition().duration(300).style(\"opacity\", 1);\n          isZoomed = false;\n          svg.on(\"click\", null);\n        }\n      });\n    };\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = 2 * Math.PI * i / sectors + rotationOffset;\n        const endAngle = 2 * Math.PI * (i + 1) / sectors + rotationOffset;\n        g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5).style(\"cursor\", \"pointer\").on(\"click\", () => {\n          clearHighlights();\n          showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n        });\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(key);\n      }\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors + rotationOffset;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n      }\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const sectorsCount = 2 ** (index + 1);\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const radiusStep = (maxRadius - minRadius) / (pointsData[index].points.length + 1);\n        const radius = minRadius + (i + 1) * radiusStep;\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectorsCount + rotationOffset;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectorsCount + rotationOffset;\n        const centerAngle = (angleStart + angleEnd) / 2;\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n        point.Point_ID.forEach(id => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({\n            x,\n            y,\n            point,\n            subspaceId: key\n          });\n        });\n        g.append(\"circle\").datum(point).attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", (event, d) => {\n          const pointIds = d.Point_ID.join(\", \");\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (d.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n          tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n          setHoveredCoordinates({\n            ...point,\n            label: labelText\n          });\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n      });\n    });\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n            tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          }).on(\"click\", event => {\n            var _Object$entries$find;\n            clearHighlights();\n            const originalColor = getLabelColor(pointId);\n            line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n            const circles = g.selectAll(\"circle\").filter(function (d) {\n              const circleX = +this.getAttribute(\"cx\");\n              const circleY = +this.getAttribute(\"cy\");\n              return Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1 || Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1;\n            }).attr(\"r\", 6).attr(\"fill\", \"yellow\");\n            highlightedElements = {\n              line,\n              circles,\n              originalColor\n            };\n            const point1 = positions[i].point;\n            const point2 = positions[i + 1].point;\n            const coords1 = Object.entries(point1).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n            const coords2 = Object.entries(point2).filter(([key]) => key !== \"Point_ID\").map(([key, value]) => `${key}: ${value}`).join(\", \");\n            const label1 = ((_Object$entries$find = Object.entries((labelsData === null || labelsData === void 0 ? void 0 : labelsData.labels) || {}).find(([_, ids]) => ids.includes(Number(pointId)))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0]) || \"No Label\";\n            edgePopup.style(\"visibility\", \"visible\").html(`\n                  <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                  <strong>Point 1</strong><br>\n                  Subspace: ${positions[i].subspaceId}<br>\n                  Coordinates: ${coords1}<br>\n                  Label: ${label1}<br><br>\n                  <strong>Point 2</strong><br>\n                  Subspace: ${positions[i + 1].subspaceId}<br>\n                  Coordinates: ${coords2}<br>\n                  Label: ${label1}\n                `).style(\"top\", event.pageY + 15 + \"px\").style(\"left\", event.pageX + 15 + \"px\");\n            d3.select(\"body\").on(\"click.edgePopup\", e => {\n              if (!edgePopup.node().contains(e.target)) {\n                edgePopup.style(\"visibility\", \"hidden\");\n                clearHighlights();\n                d3.select(\"body\").on(\"click.edgePopup\", null);\n              }\n            });\n          });\n        }\n      }\n    });\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      if (!isZoomed) {\n        g.attr(\"transform\", event.transform);\n      }\n    });\n    svg.call(zoom);\n    const legendData = [{\n      color: d3.hsl(11, 0.9, 0.7),\n      label: \"Negative Bit Sector\"\n    }, {\n      color: d3.hsl(220, 0.9, 0.7),\n      label: \"Positive Bit Sector\"\n    }];\n    const legend = svg.append(\"g\").attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n    legend.selectAll(\"rect\").data(legendData).enter().append(\"rect\").attr(\"x\", 0).attr(\"y\", (d, i) => i * 30).attr(\"width\", 20).attr(\"height\", 20).attr(\"fill\", d => d.color);\n    legend.selectAll(\"text\").data(legendData).enter().append(\"text\").attr(\"x\", 25).attr(\"y\", (d, i) => i * 30 + 15).text(d => d.label).attr(\"font-size\", \"12px\").attr(\"alignment-baseline\", \"middle\");\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1509,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1508,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","edgePopup","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","pointPositions","highlightedElements","isZoomed","clearHighlights","line","originalColor","circles","showZoomedSector","subspaceKey","innerRadius","outerRadius","startAngle","endAngle","transition","duration","zoomGroup","sectorPoints","find","d","filter","point","bitVector","entries","k","_","v","join","bitIndex","parseInt","sectors","indexOf","arc","forEach","i","pointData","coord","bitVectorIndex","minRadius","radiusStep","radius","angleRange","angleStep","centerAngle","x","cos","y","sin","datum","Point_ID","on","event","pointIds","associatedLabels","some","id","push","labelText","html","toFixed","pageY","pageX","node","contains","target","rotationOffset","PI","text","angle","x1","y1","x2","y2","sectorsCount","angleStart","angleEnd","positions","_Object$entries$find","circleX","getAttribute","circleY","abs","point1","point2","coords1","value","coords2","label1","ids","e","zoom","transform","call","legendData","color","legend","data","enter","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (\n// // //       !jsonData ||\n// // //       typeof jsonData !== \"object\" ||\n// // //       Object.keys(jsonData).length === 0\n// // //     ) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3\n// // //       .scaleOrdinal(d3.schemeCategory10)\n// // //       .domain(Object.keys(labelsData.labels || {}));\n\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n\n// // //     const pointPositions = {};\n\n// // //     subspaces.forEach((key, index) => {\n// // //       if (!ringVisibility[key]) return;\n\n// // //       const innerRadius = (index / subspaces.length) * maxRadius;\n// // //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //       const sectors = 2 ** (index + 1);\n// // //       const rotationOffset = Math.PI / 2;\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         g.append(\"path\")\n// // //           .attr(\n// // //             \"d\",\n// // //             d3\n// // //               .arc()\n// // //               .innerRadius(innerRadius)\n// // //               .outerRadius(outerRadius)\n// // //               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n// // //               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n// // //           )\n// // //           .attr(\"fill\", getSectorColor(index, i))\n// // //           .attr(\"fill-opacity\", 0.3)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.5);\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"12px\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //           .text(key);\n// // //       }\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         const angle = (2 * Math.PI * i) / sectors;\n// // //         const x1 = outerRadius * Math.cos(angle);\n// // //         const y1 = outerRadius * Math.sin(angle);\n// // //         const x2 = innerRadius * Math.cos(angle);\n// // //         const y2 = innerRadius * Math.sin(angle);\n// // //         g.append(\"line\")\n// // //           .attr(\"x1\", x2)\n// // //           .attr(\"y1\", y2)\n// // //           .attr(\"x2\", x1)\n// // //           .attr(\"y2\", y1)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.25)\n// // //           .style(\"pointer-events\", \"none\");\n// // //       }\n\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(\n// // //           ([key]) => key !== \"Point_ID\"\n// // //         );\n// // //         const bitVector = pointData\n// // //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// // //           .join(\"\");\n\n// // //         const minRadius = innerRadius;\n// // //         const maxRadius = outerRadius;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// // //         const bitVectorIndex = parseInt(bitVector, 2);\n// // //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// // //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.86;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           // .on(\"mouseover\", (event) => {\n// // //           //   const pointIds = point.Point_ID.join(\", \");\n// // //           //   tooltip\n// // //           //     .style(\"visibility\", \"visible\")\n// // //           //     .html(\n// // //           //       `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(\n// // //           //         2\n// // //           //       )}, ${y.toFixed(2)})<br>Subspace: ${key}`\n// // //           //     );\n// // //           //   setHoveredCoordinates(point);\n// // //           // })\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n\n// // //             // Find label(s) associated with this point\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// // //               );\n\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     });\n\n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 0.3)\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n\n// // //     svg.call(zoom);\n// // //     const legendData = [\n// // //       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n// // //       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n// // //     ];\n\n// // //     const legend = svg.append(\"g\")\n// // //       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n// // //     legend.selectAll(\"rect\")\n// // //       .data(legendData)\n// // //       .enter()\n// // //       .append(\"rect\")\n// // //       .attr(\"x\", 0)\n// // //       .attr(\"y\", (d, i) => i * 30)\n// // //       .attr(\"width\", 20)\n// // //       .attr(\"height\", 20)\n// // //       .attr(\"fill\", d => d.color);\n\n// // //     legend.selectAll(\"text\")\n// // //       .data(legendData)\n// // //       .enter()\n// // //       .append(\"text\")\n// // //       .attr(\"x\", 25)\n// // //       .attr(\"y\", (d, i) => i * 30 + 15)\n// // //       .text(d => d.label)\n// // //       .attr(\"font-size\", \"12px\")\n// // //       .attr(\"alignment-baseline\", \"middle\");\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n\n// // import React, { useEffect, useRef } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n\n// //   useEffect(() => {\n// //     if (\n// //       !jsonData ||\n// //       typeof jsonData !== \"object\" ||\n// //       Object.keys(jsonData).length === 0\n// //     ) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const edgePopup = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"edge-popup\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// //       .style(\"color\", \"black\")\n// //       .style(\"padding\", \"10px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\")\n// //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// //       .style(\"max-width\", \"300px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3\n// //       .scaleOrdinal(d3.schemeCategory10)\n// //       .domain(Object.keys(labelsData.labels || {}));\n\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n\n// //     const pointPositions = {};\n\n// //     subspaces.forEach((key, index) => {\n// //       if (!ringVisibility[key]) return;\n\n// //       const innerRadius = (index / subspaces.length) * maxRadius;\n// //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //       const sectors = 2 ** (index + 1);\n// //       const rotationOffset = Math.PI / 2;\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         g.append(\"path\")\n// //           .attr(\n// //             \"d\",\n// //             d3\n// //               .arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n// //               .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n// //           )\n// //           .attr(\"fill\", getSectorColor(index, i))\n// //           .attr(\"fill-opacity\", 0.3)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.5);\n\n// //         g.append(\"text\")\n// //           .attr(\"x\", 0)\n// //           .attr(\"y\", -outerRadius - 5)\n// //           .attr(\"text-anchor\", \"middle\")\n// //           .attr(\"font-size\", \"12px\")\n// //           .attr(\"font-weight\", \"bold\")\n// //           .text(key);\n// //       }\n\n// //       for (let i = 0; i < sectors; i++) {\n// //         const angle = (2 * Math.PI * i) / sectors;\n// //         const x1 = outerRadius * Math.cos(angle);\n// //         const y1 = outerRadius * Math.sin(angle);\n// //         const x2 = innerRadius * Math.cos(angle);\n// //         const y2 = innerRadius * Math.sin(angle);\n// //         g.append(\"line\")\n// //           .attr(\"x1\", x2)\n// //           .attr(\"y1\", y2)\n// //           .attr(\"x2\", x1)\n// //           .attr(\"y2\", y1)\n// //           .attr(\"stroke\", \"black\")\n// //           .attr(\"stroke-width\", 0.25)\n// //           .style(\"pointer-events\", \"none\");\n// //       }\n\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(\n// //           ([key]) => key !== \"Point_ID\"\n// //         );\n// //         const bitVector = pointData\n// //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// //           .join(\"\");\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius =\n// //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// //         const bitVectorIndex = parseInt(bitVector, 2);\n// //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.86;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     });\n\n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 0.3)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             })\n// //             .on(\"click\", (event) => {\n// //               const point1 = positions[i].point;\n// //               const point2 = positions[i + 1].point;\n\n// //               const coords1 = Object.entries(point1)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n// //               const coords2 = Object.entries(point2)\n// //                 .filter(([key]) => key !== \"Point_ID\")\n// //                 .map(([key, value]) => `${key}: ${value}`)\n// //                 .join(\", \");\n\n// //               const label1 = Object.entries(labelsData?.labels || {})\n// //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n// //               const label2 = label1;\n\n// //               edgePopup\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`\n// //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// //                   <strong>Point 1</strong><br>\n// //                   Subspace: ${positions[i].subspaceId}<br>\n// //                   Coordinates: ${coords1}<br>\n// //                   Label: ${label1}<br><br>\n// //                   <strong>Point 2</strong><br>\n// //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// //                   Coordinates: ${coords2}<br>\n// //                   Label: ${label2}\n// //                 `)\n// //                 .style(\"top\", event.pageY + 15 + \"px\")\n// //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// //                 if (!edgePopup.node().contains(e.target)) {\n// //                   edgePopup.style(\"visibility\", \"hidden\");\n// //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// //                 }\n// //               });\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n\n// //     svg.call(zoom);\n\n// //     const legendData = [\n// //       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n// //       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n// //     ];\n\n// //     const legend = svg.append(\"g\")\n// //       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n// //     legend.selectAll(\"rect\")\n// //       .data(legendData)\n// //       .enter()\n// //       .append(\"rect\")\n// //       .attr(\"x\", 0)\n// //       .attr(\"y\", (d, i) => i * 30)\n// //       .attr(\"width\", 20)\n// //       .attr(\"height\", 20)\n// //       .attr(\"fill\", d => d.color);\n\n// //     legend.selectAll(\"text\")\n// //       .data(legendData)\n// //       .enter()\n// //       .append(\"text\")\n// //       .attr(\"x\", 25)\n// //       .attr(\"y\", (d, i) => i * 30 + 15)\n// //       .text(d => d.label)\n// //       .attr(\"font-size\", \"12px\")\n// //       .attr(\"alignment-baseline\", \"middle\");\n\n// //     // Cleanup on unmount\n// //     return () => {\n// //       tooltip.remove();\n// //       edgePopup.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const edgePopup = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"edge-popup\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n//       .style(\"color\", \"black\")\n//       .style(\"padding\", \"10px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\")\n//       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n//       .style(\"max-width\", \"300px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const pointPositions = {};\n//     let highlightedElements = null;\n\n//     // Function to clear highlights\n//     const clearHighlights = () => {\n//       if (highlightedElements) {\n//         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n//         highlightedElements.circles.forEach(circle =>\n//           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n//         );\n//         highlightedElements = null;\n//       }\n//     };\n\n//     // Function to show zoomed sector view\n//     const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n//       // Clear existing zoom view\n//       svg.select(\".zoom-view\").remove();\n\n//       const zoomGroup = svg.append(\"g\")\n//         .attr(\"class\", \"zoom-view\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n//         .filter(point => {\n//           const bitVector = Object.entries(point)\n//             .filter(([k]) => k !== \"Point_ID\")\n//             .map(([_, v]) => v >= 0 ? 1 : 0)\n//             .join(\"\");\n//           const bitIndex = parseInt(bitVector, 2);\n//           const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n//           return bitIndex === sectorIndex;\n//         });\n\n//       const zoomWidth = width * 0.8;\n//       const zoomHeight = height * 0.8;\n//       const arcCount = sectorPoints.length;\n\n//       // Draw zoomed sector background\n//       zoomGroup.append(\"rect\")\n//         .attr(\"x\", -zoomWidth / 2)\n//         .attr(\"y\", -zoomHeight / 2)\n//         .attr(\"width\", zoomWidth)\n//         .attr(\"height\", zoomHeight)\n//         .attr(\"fill\", \"white\")\n//         .attr(\"stroke\", \"black\");\n\n//       // Draw arcs and points\n//       sectorPoints.forEach((point, i) => {\n//         const value = Object.values(point).filter(v => typeof v === \"number\")[0];\n//         const maxValue = Math.max(...sectorPoints.map(p =>\n//           Math.abs(Object.values(p).filter(v => typeof v === \"number\")[0])));\n\n//         const arcRadius = (zoomHeight * 0.4 * (i + 1)) / arcCount;\n//         const arc = d3.arc()\n//           .innerRadius(arcRadius - 5)\n//           .outerRadius(arcRadius)\n//           .startAngle(-Math.PI / 2)\n//           .endAngle(Math.PI / 2);\n\n//         zoomGroup.append(\"path\")\n//           .attr(\"d\", arc)\n//           .attr(\"fill\", \"lightgray\")\n//           .attr(\"opacity\", 0.5);\n\n//         const angle = (value / maxValue) * Math.PI - Math.PI / 2;\n//         const x = arcRadius * Math.cos(angle);\n//         const y = arcRadius * Math.sin(angle);\n\n//         zoomGroup.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", getLabelColor(point.Point_ID[0]));\n//       });\n\n//       // Add close button\n//       zoomGroup.append(\"text\")\n//         .attr(\"x\", zoomWidth / 2 - 20)\n//         .attr(\"y\", -zoomHeight / 2 + 20)\n//         .text(\"×\")\n//         .attr(\"font-size\", \"20px\")\n//         .style(\"cursor\", \"pointer\")\n//         .on(\"click\", () => zoomGroup.remove());\n//     };\n\n//     subspaces.forEach((key, index) => {\n//       if (!ringVisibility[key]) return;\n\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const rotationOffset = Math.PI / 2;\n\n//       for (let i = 0; i < sectors; i++) {\n//         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//         g.append(\"path\")\n//           .attr(\"d\", d3.arc()\n//             .innerRadius(innerRadius)\n//             .outerRadius(outerRadius)\n//             .startAngle(startAngle)\n//             .endAngle(endAngle)\n//           )\n//           .attr(\"fill\", getSectorColor(index, i))\n//           .attr(\"fill-opacity\", 0.3)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"cursor\", \"pointer\")\n//           .on(\"click\", () => {\n//             clearHighlights();\n//             showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n//           });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"12px\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(key);\n//       }\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         const x2 = innerRadius * Math.cos(angle);\n//         const y2 = innerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", x2)\n//           .attr(\"y1\", y2)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 0.25)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const centerAngle = (angleStart + angleEnd) / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.86;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 0.3)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             })\n//             .on(\"click\", (event) => {\n//               // Clear previous highlights\n//               clearHighlights();\n\n//               // Highlight the clicked edge\n//               const originalColor = getLabelColor(pointId);\n//               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//               // Highlight connected points\n//               const circles = g.selectAll(\"circle\")\n//                 .filter(d => {\n//                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                   return (\n//                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                 )})\n//                 .attr(\"r\", 6)\n//                 .attr(\"fill\", \"yellow\");\n\n//               highlightedElements = { line, circles, originalColor };\n\n//               // Show popup\n//               const point1 = positions[i].point;\n//               const point2 = positions[i + 1].point;\n\n//               const coords1 = Object.entries(point1)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n//               const coords2 = Object.entries(point2)\n//                 .filter(([key]) => key !== \"Point_ID\")\n//                 .map(([key, value]) => `${key}: ${value}`)\n//                 .join(\", \");\n\n//               const label1 = Object.entries(labelsData?.labels || {})\n//                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n//               edgePopup\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`\n//                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n//                   <strong>Point 1</strong><br>\n//                   Subspace: ${positions[i].subspaceId}<br>\n//                   Coordinates: ${coords1}<br>\n//                   Label: ${label1}<br><br>\n//                   <strong>Point 2</strong><br>\n//                   Subspace: ${positions[i + 1].subspaceId}<br>\n//                   Coordinates: ${coords2}<br>\n//                   Label: ${label1}\n//                 `)\n//                 .style(\"top\", event.pageY + 15 + \"px\")\n//                 .style(\"left\", event.pageX + 15 + \"px\");\n\n//               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n//                 if (!edgePopup.node().contains(e.target)) {\n//                   edgePopup.style(\"visibility\", \"hidden\");\n//                   clearHighlights();\n//                   d3.select(\"body\").on(\"click.edgePopup\", null);\n//                 }\n//               });\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n\n//     svg.call(zoom);\n\n//     const legendData = [\n//       { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n//       { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n//     ];\n\n//     const legend = svg.append(\"g\")\n//       .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n//     legend.selectAll(\"rect\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"rect\")\n//       .attr(\"x\", 0)\n//       .attr(\"y\", (d, i) => i * 30)\n//       .attr(\"width\", 20)\n//       .attr(\"height\", 20)\n//       .attr(\"fill\", d => d.color);\n\n//     legend.selectAll(\"text\")\n//       .data(legendData)\n//       .enter()\n//       .append(\"text\")\n//       .attr(\"x\", 25)\n//       .attr(\"y\", (d, i) => i * 30 + 15)\n//       .text(d => d.label)\n//       .attr(\"font-size\", \"12px\")\n//       .attr(\"alignment-baseline\", \"middle\");\n\n//     return () => {\n//       tooltip.remove();\n//       edgePopup.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const edgePopup = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"edge-popup\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n      .style(\"color\", \"black\")\n      .style(\"padding\", \"10px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\")\n      .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n      .style(\"max-width\", \"300px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3\n      .scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n    };\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const pointPositions = {};\n    let highlightedElements = null;\n    let isZoomed = false;\n\n    const clearHighlights = () => {\n      if (highlightedElements) {\n        highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n        highlightedElements.circles.attr(\"r\", 3).attr(\"fill\", \"black\");\n        highlightedElements = null;\n      }\n    };\n\n    const showZoomedSector = (subspaceKey, sectorIndex, innerRadius, outerRadius, startAngle, endAngle) => {\n      if (isZoomed) return;\n      isZoomed = true;\n\n      g.transition().duration(300).style(\"opacity\", 0.2);\n\n      const zoomGroup = svg.append(\"g\")\n        .attr(\"class\", \"zoom-view\")\n        .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n      const sectorPoints = pointsData.find(d => d.key === subspaceKey).points\n        .filter(point => {\n          const bitVector = Object.entries(point)\n            .filter(([k]) => k !== \"Point_ID\")\n            .map(([_, v]) => v >= 0 ? 1 : 0)\n            .join(\"\");\n          const bitIndex = parseInt(bitVector, 2);\n          const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n          return bitIndex === sectorIndex;\n        });\n\n      zoomGroup.append(\"path\")\n        .attr(\"d\", d3.arc()\n          .innerRadius(innerRadius)\n          .outerRadius(outerRadius)\n          .startAngle(startAngle)\n          .endAngle(endAngle)\n        )\n        .attr(\"fill\", getSectorColor(subspaces.indexOf(subspaceKey), sectorIndex))\n        .attr(\"fill-opacity\", 0.8)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", 1);\n\n      sectorPoints.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const sectors = 2 ** (subspaces.indexOf(subspaceKey) + 1);\n        \n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const radiusStep = (maxRadius - minRadius) / (sectorPoints.length + 1);\n        const radius = minRadius + (i + 1) * radiusStep;\n        \n        const angleRange = endAngle - startAngle;\n        const angleStep = angleRange / (sectorPoints.length + 1);\n        const centerAngle = startAngle + (i + 1) * angleStep;\n\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n\n        zoomGroup.append(\"circle\")\n          .datum(point)\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 5)\n          .attr(\"fill\", getLabelColor(point.Point_ID[0]))\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 1)\n          .on(\"mouseover\", (event, d) => {\n            const pointIds = d.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (d.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            \n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${subspaceKey}<br>Label: ${labelText}`\n              );\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      });\n\n      svg.on(\"click\", (event) => {\n        if (isZoomed && !zoomGroup.node().contains(event.target)) {\n          zoomGroup.remove();\n          g.transition().duration(300).style(\"opacity\", 1);\n          isZoomed = false;\n          svg.on(\"click\", null);\n        }\n      });\n    };\n\n    subspaces.forEach((key, index) => {\n      if (!ringVisibility[key]) return;\n\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const rotationOffset = Math.PI / 2;\n\n      for (let i = 0; i < sectors; i++) {\n        const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n        const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n        g.append(\"path\")\n          .attr(\"d\", d3.arc()\n            .innerRadius(innerRadius)\n            .outerRadius(outerRadius)\n            .startAngle(startAngle)\n            .endAngle(endAngle)\n          )\n          .attr(\"fill\", getSectorColor(index, i))\n          .attr(\"fill-opacity\", 0.3)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"cursor\", \"pointer\")\n          .on(\"click\", () => {\n            clearHighlights();\n            showZoomedSector(key, i, innerRadius, outerRadius, startAngle, endAngle);\n          });\n\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"12px\")\n          .attr(\"font-weight\", \"bold\")\n          .text(key);\n      }\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors + rotationOffset;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        const x2 = innerRadius * Math.cos(angle);\n        const y2 = innerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", x2)\n          .attr(\"y1\", y2)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 0.25)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      pointsData[index].points.forEach((point, i) => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const sectorsCount = 2 ** (index + 1);\n        \n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const radiusStep = (maxRadius - minRadius) / (pointsData[index].points.length + 1);\n        const radius = minRadius + (i + 1) * radiusStep;\n\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectorsCount + rotationOffset;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectorsCount + rotationOffset;\n        const centerAngle = (angleStart + angleEnd) / 2;\n\n        const x = radius * Math.cos(centerAngle);\n        const y = radius * Math.sin(centerAngle);\n\n        point.Point_ID.forEach((id) => {\n          if (!pointPositions[id]) {\n            pointPositions[id] = [];\n          }\n          pointPositions[id].push({ x, y, point, subspaceId: key });\n        });\n\n        g.append(\"circle\")\n          .datum(point)\n          .attr(\"cx\", x)\n          .attr(\"cy\", y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"black\")\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 0.5)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event, d) => {\n            const pointIds = d.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (d.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            \n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(\n                `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n              );\n            setHoveredCoordinates({ ...point, label: labelText });\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n      });\n    });\n\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        for (let i = 0; i < positions.length - 1; i++) {\n          const line = g.append(\"line\")\n            .attr(\"x1\", positions[i].x)\n            .attr(\"y1\", positions[i].y)\n            .attr(\"x2\", positions[i + 1].x)\n            .attr(\"y2\", positions[i + 1].y)\n            .attr(\"stroke\", getLabelColor(pointId))\n            .attr(\"stroke-width\", 0.3)\n            .style(\"cursor\", \"pointer\")\n            .on(\"mouseover\", (event) => {\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(`Connection: Point_ID ${pointId}`);\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            })\n            .on(\"click\", (event) => {\n              clearHighlights();\n\n              const originalColor = getLabelColor(pointId);\n              line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n              const circles = g.selectAll(\"circle\")\n                .filter(function(d) {\n                  const circleX = +this.getAttribute(\"cx\");\n                  const circleY = +this.getAttribute(\"cy\");\n                  return (\n                    (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n                    (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n                  );\n                })\n                .attr(\"r\", 6)\n                .attr(\"fill\", \"yellow\");\n\n              highlightedElements = { line, circles, originalColor };\n\n              const point1 = positions[i].point;\n              const point2 = positions[i + 1].point;\n              \n              const coords1 = Object.entries(point1)\n                .filter(([key]) => key !== \"Point_ID\")\n                .map(([key, value]) => `${key}: ${value}`)\n                .join(\", \");\n              const coords2 = Object.entries(point2)\n                .filter(([key]) => key !== \"Point_ID\")\n                .map(([key, value]) => `${key}: ${value}`)\n                .join(\", \");\n\n              const label1 = Object.entries(labelsData?.labels || {})\n                .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n              edgePopup\n                .style(\"visibility\", \"visible\")\n                .html(`\n                  <strong>Connected Points (ID: ${pointId})</strong><br><br>\n                  <strong>Point 1</strong><br>\n                  Subspace: ${positions[i].subspaceId}<br>\n                  Coordinates: ${coords1}<br>\n                  Label: ${label1}<br><br>\n                  <strong>Point 2</strong><br>\n                  Subspace: ${positions[i + 1].subspaceId}<br>\n                  Coordinates: ${coords2}<br>\n                  Label: ${label1}\n                `)\n                .style(\"top\", event.pageY + 15 + \"px\")\n                .style(\"left\", event.pageX + 15 + \"px\");\n\n              d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n                if (!edgePopup.node().contains(e.target)) {\n                  edgePopup.style(\"visibility\", \"hidden\");\n                  clearHighlights();\n                  d3.select(\"body\").on(\"click.edgePopup\", null);\n                }\n              });\n            });\n        }\n      }\n    });\n\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      if (!isZoomed) {\n        g.attr(\"transform\", event.transform);\n      }\n    });\n\n    svg.call(zoom);\n\n    const legendData = [\n      { color: d3.hsl(11, 0.9, 0.7), label: \"Negative Bit Sector\" },\n      { color: d3.hsl(220, 0.9, 0.7), label: \"Positive Bit Sector\" }\n    ];\n\n    const legend = svg.append(\"g\")\n      .attr(\"transform\", `translate(${width - 200}, ${height - 70})`);\n\n    legend.selectAll(\"rect\")\n      .data(legendData)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", (d, i) => i * 30)\n      .attr(\"width\", 20)\n      .attr(\"height\", 20)\n      .attr(\"fill\", d => d.color);\n\n    legend.selectAll(\"text\")\n      .data(legendData)\n      .enter()\n      .append(\"text\")\n      .attr(\"x\", 25)\n      .attr(\"y\", (d, i) => i * 30 + 15)\n      .text(d => d.label)\n      .attr(\"font-size\", \"12px\")\n      .attr(\"alignment-baseline\", \"middle\");\n\n    return () => {\n      tooltip.remove();\n      edgePopup.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIM,MAAM,CAACC,IAAI,CAACP,QAAQ,CAAC,CAACQ,MAAM,KAAK,CAAC,EAAE;MACnFC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEV,QAAQ,CAAC;MACrD;IACF;IAEA,IAAI,CAACC,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MACjDQ,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAET,UAAU,CAAC;MAChD;IACF;IAEA,MAAMU,GAAG,GAAGf,EAAE,CAACgB,MAAM,CAACP,QAAQ,CAACQ,OAAO,CAAC;IACvCF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAE3B,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,KAAK,EAAEC,MAAM,CAAC,GAAG,CAAC,GAAGC,MAAM;IAEtD,MAAMI,CAAC,GAAGX,GAAG,CACVY,IAAI,CAAC,OAAO,EAAEP,KAAK,CAAC,CACpBO,IAAI,CAAC,QAAQ,EAAEN,MAAM,CAAC,CACtBO,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAaP,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;IAE9D,MAAMQ,OAAO,GAAG7B,EAAE,CACfgB,MAAM,CAAC,MAAM,CAAC,CACdY,MAAM,CAAC,KAAK,CAAC,CACbD,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBG,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAC7BA,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC7BA,KAAK,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAC/CA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CACvBA,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CACvBA,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAC7BA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC;IAE7B,MAAMC,SAAS,GAAG/B,EAAE,CACjBgB,MAAM,CAAC,MAAM,CAAC,CACdY,MAAM,CAAC,KAAK,CAAC,CACbD,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAC3BG,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAC7BA,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC7BA,KAAK,CAAC,kBAAkB,EAAE,0BAA0B,CAAC,CACrDA,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CACvBA,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CACxBA,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAC7BA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,YAAY,EAAE,2BAA2B,CAAC,CAChDA,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC;IAE9B,MAAME,aAAa,GAAIC,OAAO,IAAK;MACjC,IAAI,CAAC5B,UAAU,IAAI,CAACA,UAAU,CAAC6B,MAAM,EAAE,OAAO,MAAM;MACpD,KAAK,MAAMC,KAAK,IAAIzB,MAAM,CAACC,IAAI,CAACN,UAAU,CAAC6B,MAAM,CAAC,EAAE;QAClD,MAAME,SAAS,GAAG/B,UAAU,CAAC6B,MAAM,CAACC,KAAK,CAAC;QAC1C,IAAIE,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACG,QAAQ,CAACC,MAAM,CAACP,OAAO,CAAC,CAAC,EAAE;UACnE,OAAOQ,UAAU,CAACN,KAAK,CAAC;QAC1B;MACF;MACA,OAAO,MAAM;IACf,CAAC;IAED,MAAMM,UAAU,GAAGzC,EAAE,CAClB0C,YAAY,CAAC1C,EAAE,CAAC2C,gBAAgB,CAAC,CACjCC,MAAM,CAAClC,MAAM,CAACC,IAAI,CAACN,UAAU,CAAC6B,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;IAE/C,MAAMW,cAAc,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;MAC7C,OAAO/C,EAAE,CAACgD,GAAG,CAACD,WAAW,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC1D,CAAC;IAED,MAAME,SAAS,GAAGvC,MAAM,CAACC,IAAI,CAACP,QAAQ,CAAC;IACvC6C,SAAS,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACvC,MAAM,GAAGwC,CAAC,CAACxC,MAAM,CAAC;IAE7C,MAAMyC,UAAU,GAAGJ,SAAS,CAACK,GAAG,CAAEC,GAAG,KAAM;MACzCA,GAAG;MACHC,MAAM,EAAEpD,QAAQ,CAACmD,GAAG,CAAC;MACrBE,UAAU,EAAEF,GAAG,CAAC3C,MAAM;MACtB8C,UAAU,EAAEH;IACd,CAAC,CAAC,CAAC;IAEH,MAAMI,cAAc,GAAG,CAAC,CAAC;IACzB,IAAIC,mBAAmB,GAAG,IAAI;IAC9B,IAAIC,QAAQ,GAAG,KAAK;IAEpB,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIF,mBAAmB,EAAE;QACvBA,mBAAmB,CAACG,IAAI,CAACpC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAACA,IAAI,CAAC,QAAQ,EAAEiC,mBAAmB,CAACI,aAAa,CAAC;QACpGJ,mBAAmB,CAACK,OAAO,CAACtC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAACA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;QAC9DiC,mBAAmB,GAAG,IAAI;MAC5B;IACF,CAAC;IAED,MAAMM,gBAAgB,GAAGA,CAACC,WAAW,EAAEpB,WAAW,EAAEqB,WAAW,EAAEC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,KAAK;MACrG,IAAIV,QAAQ,EAAE;MACdA,QAAQ,GAAG,IAAI;MAEfnC,CAAC,CAAC8C,UAAU,CAAC,CAAC,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC3C,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC;MAElD,MAAM4C,SAAS,GAAG3D,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAC9BD,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAC1BA,IAAI,CAAC,WAAW,EAAE,aAAaP,KAAK,GAAG,CAAC,KAAKC,MAAM,GAAG,CAAC,GAAG,CAAC;MAE9D,MAAMsD,YAAY,GAAGtB,UAAU,CAACuB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACtB,GAAG,KAAKY,WAAW,CAAC,CAACX,MAAM,CACpEsB,MAAM,CAACC,KAAK,IAAI;QACf,MAAMC,SAAS,GAAGtE,MAAM,CAACuE,OAAO,CAACF,KAAK,CAAC,CACpCD,MAAM,CAAC,CAAC,CAACI,CAAC,CAAC,KAAKA,CAAC,KAAK,UAAU,CAAC,CACjC5B,GAAG,CAAC,CAAC,CAAC6B,CAAC,EAAEC,CAAC,CAAC,KAAKA,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAC/BC,IAAI,CAAC,EAAE,CAAC;QACX,MAAMC,QAAQ,GAAGC,QAAQ,CAACP,SAAS,EAAE,CAAC,CAAC;QACvC,MAAMQ,OAAO,GAAG,CAAC,KAAKvC,SAAS,CAACwC,OAAO,CAACtB,WAAW,CAAC,GAAG,CAAC,CAAC;QACzD,OAAOmB,QAAQ,KAAKvC,WAAW;MACjC,CAAC,CAAC;MAEJ2B,SAAS,CAAC9C,MAAM,CAAC,MAAM,CAAC,CACrBD,IAAI,CAAC,GAAG,EAAE3B,EAAE,CAAC0F,GAAG,CAAC,CAAC,CAChBtB,WAAW,CAACA,WAAW,CAAC,CACxBC,WAAW,CAACA,WAAW,CAAC,CACxBC,UAAU,CAACA,UAAU,CAAC,CACtBC,QAAQ,CAACA,QAAQ,CACpB,CAAC,CACA5C,IAAI,CAAC,MAAM,EAAEkB,cAAc,CAACI,SAAS,CAACwC,OAAO,CAACtB,WAAW,CAAC,EAAEpB,WAAW,CAAC,CAAC,CACzEpB,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;MAE1BgD,YAAY,CAACgB,OAAO,CAAC,CAACZ,KAAK,EAAEa,CAAC,KAAK;QACjC,MAAMC,SAAS,GAAGnF,MAAM,CAACuE,OAAO,CAACF,KAAK,CAAC,CAACD,MAAM,CAAC,CAAC,CAACvB,GAAG,CAAC,KAAKA,GAAG,KAAK,UAAU,CAAC;QAC7E,MAAMyB,SAAS,GAAGa,SAAS,CAACvC,GAAG,CAAC,CAAC,CAAC6B,CAAC,EAAEW,KAAK,CAAC,KAAKA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC;QAC5E,MAAMU,cAAc,GAAGR,QAAQ,CAACP,SAAS,EAAE,CAAC,CAAC;QAC7C,MAAMQ,OAAO,GAAG,CAAC,KAAKvC,SAAS,CAACwC,OAAO,CAACtB,WAAW,CAAC,GAAG,CAAC,CAAC;QAEzD,MAAM6B,SAAS,GAAG5B,WAAW;QAC7B,MAAM7C,SAAS,GAAG8C,WAAW;QAC7B,MAAM4B,UAAU,GAAG,CAAC1E,SAAS,GAAGyE,SAAS,KAAKrB,YAAY,CAAC/D,MAAM,GAAG,CAAC,CAAC;QACtE,MAAMsF,MAAM,GAAGF,SAAS,GAAG,CAACJ,CAAC,GAAG,CAAC,IAAIK,UAAU;QAE/C,MAAME,UAAU,GAAG5B,QAAQ,GAAGD,UAAU;QACxC,MAAM8B,SAAS,GAAGD,UAAU,IAAIxB,YAAY,CAAC/D,MAAM,GAAG,CAAC,CAAC;QACxD,MAAMyF,WAAW,GAAG/B,UAAU,GAAG,CAACsB,CAAC,GAAG,CAAC,IAAIQ,SAAS;QAEpD,MAAME,CAAC,GAAGJ,MAAM,GAAG1E,IAAI,CAAC+E,GAAG,CAACF,WAAW,CAAC;QACxC,MAAMG,CAAC,GAAGN,MAAM,GAAG1E,IAAI,CAACiF,GAAG,CAACJ,WAAW,CAAC;QAExC3B,SAAS,CAAC9C,MAAM,CAAC,QAAQ,CAAC,CACvB8E,KAAK,CAAC3B,KAAK,CAAC,CACZpD,IAAI,CAAC,IAAI,EAAE2E,CAAC,CAAC,CACb3E,IAAI,CAAC,IAAI,EAAE6E,CAAC,CAAC,CACb7E,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAEK,aAAa,CAAC+C,KAAK,CAAC4B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9ChF,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBiF,EAAE,CAAC,WAAW,EAAE,CAACC,KAAK,EAAEhC,CAAC,KAAK;UAC7B,MAAMiC,QAAQ,GAAGjC,CAAC,CAAC8B,QAAQ,CAACtB,IAAI,CAAC,IAAI,CAAC;UACtC,IAAI0B,gBAAgB,GAAG,EAAE;UACzB,IAAI1G,UAAU,IAAIA,UAAU,CAAC6B,MAAM,EAAE;YACnCxB,MAAM,CAACuE,OAAO,CAAC5E,UAAU,CAAC6B,MAAM,CAAC,CAACyD,OAAO,CAAC,CAAC,CAACxD,KAAK,EAAEC,SAAS,CAAC,KAAK;cAChE,IAAIyC,CAAC,CAAC8B,QAAQ,CAACK,IAAI,CAACC,EAAE,IAAI7E,SAAS,CAACG,QAAQ,CAACC,MAAM,CAACyE,EAAE,CAAC,CAAC,CAAC,EAAE;gBACzDF,gBAAgB,CAACG,IAAI,CAAC/E,KAAK,CAAC;cAC9B;YACF,CAAC,CAAC;UACJ;UACA,MAAMgF,SAAS,GAAGJ,gBAAgB,CAACnG,MAAM,GAAG,CAAC,GAAGmG,gBAAgB,CAAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU;UAExFxD,OAAO,CACJC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9BsF,IAAI,CACH,cAAcN,QAAQ,qBAAqBR,CAAC,CAACe,OAAO,CAAC,CAAC,CAAC,KAAKb,CAAC,CAACa,OAAO,CAAC,CAAC,CAAC,kBAAkBlD,WAAW,cAAcgD,SAAS,EAC9H,CAAC;QACL,CAAC,CAAC,CACDP,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;UAC1BhF,OAAO,CACJC,KAAK,CAAC,KAAK,EAAE+E,KAAK,CAACS,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrCxF,KAAK,CAAC,MAAM,EAAE+E,KAAK,CAACU,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;QAC3C,CAAC,CAAC,CACDX,EAAE,CAAC,UAAU,EAAE,MAAM;UACpB/E,OAAO,CAACC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;QACvC,CAAC,CAAC;MACN,CAAC,CAAC;MAEFf,GAAG,CAAC6F,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;QACzB,IAAIhD,QAAQ,IAAI,CAACa,SAAS,CAAC8C,IAAI,CAAC,CAAC,CAACC,QAAQ,CAACZ,KAAK,CAACa,MAAM,CAAC,EAAE;UACxDhD,SAAS,CAACvD,MAAM,CAAC,CAAC;UAClBO,CAAC,CAAC8C,UAAU,CAAC,CAAC,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC3C,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;UAChD+B,QAAQ,GAAG,KAAK;UAChB9C,GAAG,CAAC6F,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC;IAED3D,SAAS,CAAC0C,OAAO,CAAC,CAACpC,GAAG,EAAET,KAAK,KAAK;MAChC,IAAI,CAACvC,cAAc,CAACgD,GAAG,CAAC,EAAE;MAE1B,MAAMa,WAAW,GAAItB,KAAK,GAAGG,SAAS,CAACrC,MAAM,GAAIW,SAAS;MAC1D,MAAM8C,WAAW,GAAI,CAACvB,KAAK,GAAG,CAAC,IAAIG,SAAS,CAACrC,MAAM,GAAIW,SAAS;MAChE,MAAMiE,OAAO,GAAG,CAAC,KAAK1C,KAAK,GAAG,CAAC,CAAC;MAChC,MAAM6E,cAAc,GAAGnG,IAAI,CAACoG,EAAE,GAAG,CAAC;MAElC,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;QAChC,MAAMtB,UAAU,GAAI,CAAC,GAAG9C,IAAI,CAACoG,EAAE,GAAGhC,CAAC,GAAIJ,OAAO,GAAGmC,cAAc;QAC/D,MAAMpD,QAAQ,GAAI,CAAC,GAAG/C,IAAI,CAACoG,EAAE,IAAIhC,CAAC,GAAG,CAAC,CAAC,GAAIJ,OAAO,GAAGmC,cAAc;QAEnEjG,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAE3B,EAAE,CAAC0F,GAAG,CAAC,CAAC,CAChBtB,WAAW,CAACA,WAAW,CAAC,CACxBC,WAAW,CAACA,WAAW,CAAC,CACxBC,UAAU,CAACA,UAAU,CAAC,CACtBC,QAAQ,CAACA,QAAQ,CACpB,CAAC,CACA5C,IAAI,CAAC,MAAM,EAAEkB,cAAc,CAACC,KAAK,EAAE8C,CAAC,CAAC,CAAC,CACtCjE,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBG,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAC1B8E,EAAE,CAAC,OAAO,EAAE,MAAM;UACjB9C,eAAe,CAAC,CAAC;UACjBI,gBAAgB,CAACX,GAAG,EAAEqC,CAAC,EAAExB,WAAW,EAAEC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,CAAC;QAC1E,CAAC,CAAC;QAEJ7C,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,CAAC0C,WAAW,GAAG,CAAC,CAAC,CAC3B1C,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3BkG,IAAI,CAACtE,GAAG,CAAC;MACd;MAEA,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAE;QAChC,MAAMkC,KAAK,GAAI,CAAC,GAAGtG,IAAI,CAACoG,EAAE,GAAGhC,CAAC,GAAIJ,OAAO,GAAGmC,cAAc;QAC1D,MAAMI,EAAE,GAAG1D,WAAW,GAAG7C,IAAI,CAAC+E,GAAG,CAACuB,KAAK,CAAC;QACxC,MAAME,EAAE,GAAG3D,WAAW,GAAG7C,IAAI,CAACiF,GAAG,CAACqB,KAAK,CAAC;QACxC,MAAMG,EAAE,GAAG7D,WAAW,GAAG5C,IAAI,CAAC+E,GAAG,CAACuB,KAAK,CAAC;QACxC,MAAMI,EAAE,GAAG9D,WAAW,GAAG5C,IAAI,CAACiF,GAAG,CAACqB,KAAK,CAAC;QACxCpG,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CACbD,IAAI,CAAC,IAAI,EAAEsG,EAAE,CAAC,CACdtG,IAAI,CAAC,IAAI,EAAEuG,EAAE,CAAC,CACdvG,IAAI,CAAC,IAAI,EAAEoG,EAAE,CAAC,CACdpG,IAAI,CAAC,IAAI,EAAEqG,EAAE,CAAC,CACdrG,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAC1BG,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;MACpC;MAEAuB,UAAU,CAACP,KAAK,CAAC,CAACU,MAAM,CAACmC,OAAO,CAAC,CAACZ,KAAK,EAAEa,CAAC,KAAK;QAC7C,MAAMC,SAAS,GAAGnF,MAAM,CAACuE,OAAO,CAACF,KAAK,CAAC,CAACD,MAAM,CAAC,CAAC,CAACvB,GAAG,CAAC,KAAKA,GAAG,KAAK,UAAU,CAAC;QAC7E,MAAMyB,SAAS,GAAGa,SAAS,CAACvC,GAAG,CAAC,CAAC,CAAC6B,CAAC,EAAEW,KAAK,CAAC,KAAKA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAACT,IAAI,CAAC,EAAE,CAAC;QAC5E,MAAMU,cAAc,GAAGR,QAAQ,CAACP,SAAS,EAAE,CAAC,CAAC;QAC7C,MAAMmD,YAAY,GAAG,CAAC,KAAKrF,KAAK,GAAG,CAAC,CAAC;QAErC,MAAMkD,SAAS,GAAG5B,WAAW;QAC7B,MAAM7C,SAAS,GAAG8C,WAAW;QAC7B,MAAM4B,UAAU,GAAG,CAAC1E,SAAS,GAAGyE,SAAS,KAAK3C,UAAU,CAACP,KAAK,CAAC,CAACU,MAAM,CAAC5C,MAAM,GAAG,CAAC,CAAC;QAClF,MAAMsF,MAAM,GAAGF,SAAS,GAAG,CAACJ,CAAC,GAAG,CAAC,IAAIK,UAAU;QAE/C,MAAMmC,UAAU,GAAI,CAAC,GAAG5G,IAAI,CAACoG,EAAE,GAAG7B,cAAc,GAAIoC,YAAY,GAAGR,cAAc;QACjF,MAAMU,QAAQ,GAAI,CAAC,GAAG7G,IAAI,CAACoG,EAAE,IAAI7B,cAAc,GAAG,CAAC,CAAC,GAAIoC,YAAY,GAAGR,cAAc;QACrF,MAAMtB,WAAW,GAAG,CAAC+B,UAAU,GAAGC,QAAQ,IAAI,CAAC;QAE/C,MAAM/B,CAAC,GAAGJ,MAAM,GAAG1E,IAAI,CAAC+E,GAAG,CAACF,WAAW,CAAC;QACxC,MAAMG,CAAC,GAAGN,MAAM,GAAG1E,IAAI,CAACiF,GAAG,CAACJ,WAAW,CAAC;QAExCtB,KAAK,CAAC4B,QAAQ,CAAChB,OAAO,CAAEsB,EAAE,IAAK;UAC7B,IAAI,CAACtD,cAAc,CAACsD,EAAE,CAAC,EAAE;YACvBtD,cAAc,CAACsD,EAAE,CAAC,GAAG,EAAE;UACzB;UACAtD,cAAc,CAACsD,EAAE,CAAC,CAACC,IAAI,CAAC;YAAEZ,CAAC;YAAEE,CAAC;YAAEzB,KAAK;YAAErB,UAAU,EAAEH;UAAI,CAAC,CAAC;QAC3D,CAAC,CAAC;QAEF7B,CAAC,CAACE,MAAM,CAAC,QAAQ,CAAC,CACf8E,KAAK,CAAC3B,KAAK,CAAC,CACZpD,IAAI,CAAC,IAAI,EAAE2E,CAAC,CAAC,CACb3E,IAAI,CAAC,IAAI,EAAE6E,CAAC,CAAC,CACb7E,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBG,KAAK,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAClC8E,EAAE,CAAC,WAAW,EAAE,CAACC,KAAK,EAAEhC,CAAC,KAAK;UAC7B,MAAMiC,QAAQ,GAAGjC,CAAC,CAAC8B,QAAQ,CAACtB,IAAI,CAAC,IAAI,CAAC;UACtC,IAAI0B,gBAAgB,GAAG,EAAE;UACzB,IAAI1G,UAAU,IAAIA,UAAU,CAAC6B,MAAM,EAAE;YACnCxB,MAAM,CAACuE,OAAO,CAAC5E,UAAU,CAAC6B,MAAM,CAAC,CAACyD,OAAO,CAAC,CAAC,CAACxD,KAAK,EAAEC,SAAS,CAAC,KAAK;cAChE,IAAIyC,CAAC,CAAC8B,QAAQ,CAACK,IAAI,CAACC,EAAE,IAAI7E,SAAS,CAACG,QAAQ,CAACC,MAAM,CAACyE,EAAE,CAAC,CAAC,CAAC,EAAE;gBACzDF,gBAAgB,CAACG,IAAI,CAAC/E,KAAK,CAAC;cAC9B;YACF,CAAC,CAAC;UACJ;UACA,MAAMgF,SAAS,GAAGJ,gBAAgB,CAACnG,MAAM,GAAG,CAAC,GAAGmG,gBAAgB,CAAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU;UAExFxD,OAAO,CACJC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9BsF,IAAI,CACH,cAAcN,QAAQ,qBAAqBR,CAAC,CAACe,OAAO,CAAC,CAAC,CAAC,KAAKb,CAAC,CAACa,OAAO,CAAC,CAAC,CAAC,kBAAkB9D,GAAG,cAAc4D,SAAS,EACtH,CAAC;UACH7G,qBAAqB,CAAC;YAAE,GAAGyE,KAAK;YAAE5C,KAAK,EAAEgF;UAAU,CAAC,CAAC;QACvD,CAAC,CAAC,CACDP,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;UAC1BhF,OAAO,CACJC,KAAK,CAAC,KAAK,EAAE+E,KAAK,CAACS,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrCxF,KAAK,CAAC,MAAM,EAAE+E,KAAK,CAACU,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;QAC3C,CAAC,CAAC,CACDX,EAAE,CAAC,UAAU,EAAE,MAAM;UACpB/E,OAAO,CAACC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;UACrCxB,qBAAqB,CAAC,IAAI,CAAC;QAC7B,CAAC,CAAC;MACN,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFI,MAAM,CAACuE,OAAO,CAACtB,cAAc,CAAC,CAACgC,OAAO,CAAC,CAAC,CAAC1D,OAAO,EAAEqG,SAAS,CAAC,KAAK;MAC/D,IAAIA,SAAS,CAAC1H,MAAM,GAAG,CAAC,EAAE;QACxB,KAAK,IAAIgF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0C,SAAS,CAAC1H,MAAM,GAAG,CAAC,EAAEgF,CAAC,EAAE,EAAE;UAC7C,MAAM7B,IAAI,GAAGrC,CAAC,CAACE,MAAM,CAAC,MAAM,CAAC,CAC1BD,IAAI,CAAC,IAAI,EAAE2G,SAAS,CAAC1C,CAAC,CAAC,CAACU,CAAC,CAAC,CAC1B3E,IAAI,CAAC,IAAI,EAAE2G,SAAS,CAAC1C,CAAC,CAAC,CAACY,CAAC,CAAC,CAC1B7E,IAAI,CAAC,IAAI,EAAE2G,SAAS,CAAC1C,CAAC,GAAG,CAAC,CAAC,CAACU,CAAC,CAAC,CAC9B3E,IAAI,CAAC,IAAI,EAAE2G,SAAS,CAAC1C,CAAC,GAAG,CAAC,CAAC,CAACY,CAAC,CAAC,CAC9B7E,IAAI,CAAC,QAAQ,EAAEK,aAAa,CAACC,OAAO,CAAC,CAAC,CACtCN,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBG,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAC1B8E,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;YAC1BhF,OAAO,CACJC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9BsF,IAAI,CAAC,wBAAwBnF,OAAO,EAAE,CAAC;UAC5C,CAAC,CAAC,CACD2E,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;YAC1BhF,OAAO,CACJC,KAAK,CAAC,KAAK,EAAE+E,KAAK,CAACS,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrCxF,KAAK,CAAC,MAAM,EAAE+E,KAAK,CAACU,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;UAC3C,CAAC,CAAC,CACDX,EAAE,CAAC,UAAU,EAAE,MAAM;YACpB/E,OAAO,CAACC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;UACvC,CAAC,CAAC,CACD8E,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;YAAA,IAAA0B,oBAAA;YACtBzE,eAAe,CAAC,CAAC;YAEjB,MAAME,aAAa,GAAGhC,aAAa,CAACC,OAAO,CAAC;YAC5C8B,IAAI,CAACpC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAACA,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAErD,MAAMsC,OAAO,GAAGvC,CAAC,CAACR,SAAS,CAAC,QAAQ,CAAC,CAClC4D,MAAM,CAAC,UAASD,CAAC,EAAE;cAClB,MAAM2D,OAAO,GAAG,CAAC,IAAI,CAACC,YAAY,CAAC,IAAI,CAAC;cACxC,MAAMC,OAAO,GAAG,CAAC,IAAI,CAACD,YAAY,CAAC,IAAI,CAAC;cACxC,OACGjH,IAAI,CAACmH,GAAG,CAACH,OAAO,GAAGF,SAAS,CAAC1C,CAAC,CAAC,CAACU,CAAC,CAAC,GAAG,GAAG,IAAI9E,IAAI,CAACmH,GAAG,CAACD,OAAO,GAAGJ,SAAS,CAAC1C,CAAC,CAAC,CAACY,CAAC,CAAC,GAAG,GAAG,IACpFhF,IAAI,CAACmH,GAAG,CAACH,OAAO,GAAGF,SAAS,CAAC1C,CAAC,GAAG,CAAC,CAAC,CAACU,CAAC,CAAC,GAAG,GAAG,IAAI9E,IAAI,CAACmH,GAAG,CAACD,OAAO,GAAGJ,SAAS,CAAC1C,CAAC,GAAG,CAAC,CAAC,CAACY,CAAC,CAAC,GAAG,GAAI;YAElG,CAAC,CAAC,CACD7E,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC;YAEzBiC,mBAAmB,GAAG;cAAEG,IAAI;cAAEE,OAAO;cAAED;YAAc,CAAC;YAEtD,MAAM4E,MAAM,GAAGN,SAAS,CAAC1C,CAAC,CAAC,CAACb,KAAK;YACjC,MAAM8D,MAAM,GAAGP,SAAS,CAAC1C,CAAC,GAAG,CAAC,CAAC,CAACb,KAAK;YAErC,MAAM+D,OAAO,GAAGpI,MAAM,CAACuE,OAAO,CAAC2D,MAAM,CAAC,CACnC9D,MAAM,CAAC,CAAC,CAACvB,GAAG,CAAC,KAAKA,GAAG,KAAK,UAAU,CAAC,CACrCD,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEwF,KAAK,CAAC,KAAK,GAAGxF,GAAG,KAAKwF,KAAK,EAAE,CAAC,CACzC1D,IAAI,CAAC,IAAI,CAAC;YACb,MAAM2D,OAAO,GAAGtI,MAAM,CAACuE,OAAO,CAAC4D,MAAM,CAAC,CACnC/D,MAAM,CAAC,CAAC,CAACvB,GAAG,CAAC,KAAKA,GAAG,KAAK,UAAU,CAAC,CACrCD,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEwF,KAAK,CAAC,KAAK,GAAGxF,GAAG,KAAKwF,KAAK,EAAE,CAAC,CACzC1D,IAAI,CAAC,IAAI,CAAC;YAEb,MAAM4D,MAAM,GAAG,EAAAV,oBAAA,GAAA7H,MAAM,CAACuE,OAAO,CAAC,CAAA5E,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE6B,MAAM,KAAI,CAAC,CAAC,CAAC,CACpD0C,IAAI,CAAC,CAAC,CAACO,CAAC,EAAE+D,GAAG,CAAC,KAAKA,GAAG,CAAC3G,QAAQ,CAACC,MAAM,CAACP,OAAO,CAAC,CAAC,CAAC,cAAAsG,oBAAA,uBADrCA,oBAAA,CACwC,CAAC,CAAC,KAAI,UAAU;YAEvExG,SAAS,CACND,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC9BsF,IAAI,CAAC;AACtB,kDAAkDnF,OAAO;AACzD;AACA,8BAA8BqG,SAAS,CAAC1C,CAAC,CAAC,CAAClC,UAAU;AACrD,iCAAiCoF,OAAO;AACxC,2BAA2BG,MAAM;AACjC;AACA,8BAA8BX,SAAS,CAAC1C,CAAC,GAAG,CAAC,CAAC,CAAClC,UAAU;AACzD,iCAAiCsF,OAAO;AACxC,2BAA2BC,MAAM;AACjC,iBAAiB,CAAC,CACDnH,KAAK,CAAC,KAAK,EAAE+E,KAAK,CAACS,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CACrCxF,KAAK,CAAC,MAAM,EAAE+E,KAAK,CAACU,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC;YAEzCvH,EAAE,CAACgB,MAAM,CAAC,MAAM,CAAC,CAAC4F,EAAE,CAAC,iBAAiB,EAAGuC,CAAC,IAAK;cAC7C,IAAI,CAACpH,SAAS,CAACyF,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC0B,CAAC,CAACzB,MAAM,CAAC,EAAE;gBACxC3F,SAAS,CAACD,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC;gBACvCgC,eAAe,CAAC,CAAC;gBACjB9D,EAAE,CAACgB,MAAM,CAAC,MAAM,CAAC,CAAC4F,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC;cAC/C;YACF,CAAC,CAAC;UACJ,CAAC,CAAC;QACN;MACF;IACF,CAAC,CAAC;IAEF,MAAMwC,IAAI,GAAGpJ,EAAE,CAACoJ,IAAI,CAAC,CAAC,CAACxC,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MAC3C,IAAI,CAAChD,QAAQ,EAAE;QACbnC,CAAC,CAACC,IAAI,CAAC,WAAW,EAAEkF,KAAK,CAACwC,SAAS,CAAC;MACtC;IACF,CAAC,CAAC;IAEFtI,GAAG,CAACuI,IAAI,CAACF,IAAI,CAAC;IAEd,MAAMG,UAAU,GAAG,CACjB;MAAEC,KAAK,EAAExJ,EAAE,CAACgD,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;MAAEb,KAAK,EAAE;IAAsB,CAAC,EAC7D;MAAEqH,KAAK,EAAExJ,EAAE,CAACgD,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAAEb,KAAK,EAAE;IAAsB,CAAC,CAC/D;IAED,MAAMsH,MAAM,GAAG1I,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAC3BD,IAAI,CAAC,WAAW,EAAE,aAAaP,KAAK,GAAG,GAAG,KAAKC,MAAM,GAAG,EAAE,GAAG,CAAC;IAEjEoI,MAAM,CAACvI,SAAS,CAAC,MAAM,CAAC,CACrBwI,IAAI,CAACH,UAAU,CAAC,CAChBI,KAAK,CAAC,CAAC,CACP/H,MAAM,CAAC,MAAM,CAAC,CACdD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,GAAG,EAAE,CAACkD,CAAC,EAAEe,CAAC,KAAKA,CAAC,GAAG,EAAE,CAAC,CAC3BjE,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CACjBA,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClBA,IAAI,CAAC,MAAM,EAAEkD,CAAC,IAAIA,CAAC,CAAC2E,KAAK,CAAC;IAE7BC,MAAM,CAACvI,SAAS,CAAC,MAAM,CAAC,CACrBwI,IAAI,CAACH,UAAU,CAAC,CAChBI,KAAK,CAAC,CAAC,CACP/H,MAAM,CAAC,MAAM,CAAC,CACdD,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,GAAG,EAAE,CAACkD,CAAC,EAAEe,CAAC,KAAKA,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAChCiC,IAAI,CAAChD,CAAC,IAAIA,CAAC,CAAC1C,KAAK,CAAC,CAClBR,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC;IAEvC,OAAO,MAAM;MACXE,OAAO,CAACV,MAAM,CAAC,CAAC;MAChBY,SAAS,CAACZ,MAAM,CAAC,CAAC;MAClBJ,GAAG,CAACC,MAAM,CAAC,YAAY,CAAC,CAACG,MAAM,CAAC,CAAC;IACnC,CAAC;EACH,CAAC,EAAE,CAACf,QAAQ,EAAEC,UAAU,EAAEE,cAAc,EAAED,qBAAqB,CAAC,CAAC;EAEjE,oBACEJ,OAAA;IAAK4B,KAAK,EAAE;MAAEV,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAuI,QAAA,eAC5C1J,OAAA;MAAK2J,GAAG,EAAEpJ,QAAS;MAACqB,KAAK,EAAE;QAAEV,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAyI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEV,CAAC;AAACzJ,EAAA,CA9bIL,iBAAiB;AAAA+J,EAAA,GAAjB/J,iBAAiB;AAgcvB,eAAeA,iBAAiB;AAAC,IAAA+J,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}