{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     console.log(\"Points data:\", pointsData.dimensions);\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           g.append(\"text\")\n// //             .attr(\"x\", 0)\n// //             .attr(\"y\", -outerRadius - 5)\n// //             .attr(\"text-anchor\", \"middle\")\n// //             .attr(\"font-size\", \"16px\")\n// //             .attr(\"fill\", \"red\")\n// //             .attr(\"font-weight\", \"bold\")\n// //             .text(ringLabels[index]);\n// //         }\n// //         renderPoints(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n// //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// //       const isProportional = viewMode === \"proportional\";\n// //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// //       let currentAngle = Math.PI / 2;\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         const startAngle = isProportional ?\n// //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// //           (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// //         const centerAngle = startAngle + angleWidth / 2;\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } \n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = (index) => {\n//       const sectors = 2 ** (index + 1);\n//       const points = pointsData[index].points;\n//       const sectorCounts = Array(sectors).fill(0);\n//       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n//       points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//         sectorCounts[bitVectorIndex]++;\n//       });\n\n//       const totalPoints = points.length || 1; // Avoid division by zero\n//       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n//       return sectorCounts.map(count => {\n//         if (count === 0) return minAngle;\n//         return (count / totalPoints) * remainingAngle;\n//       });\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const rotationOffset = Math.PI / 2;\n\n//         const proportionalAngles = calculateProportionalAngles(index);\n\n//         let currentAngle = rotationOffset;\n//         proportionalAngles.forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n//       const rotationOffset = Math.PI / 2;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         let startAngle = rotationOffset;\n//         if (isProportional) {\n//           for (let j = 0; j < bitVectorIndex; j++) {\n//             startAngle += angles[j];\n//           }\n//         } else {\n//           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n//         }\n\n//         const angleWidth = angles[bitVectorIndex];\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    // Clear previous graph and tooltip\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    d3.select(\"body .tooltip\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Create tooltip once\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n\n    // Color functions\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getRingColor = index => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    // Sort subspaces by dimension (length of key)\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    // Process data once\n    const pointsData = subspaces.map(key => {\n      // Pre-process points to avoid repeated calculations\n      const processedPoints = (jsonData[key] || []).map(point => {\n        const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        return {\n          ...point,\n          bitVector,\n          sectorIndex: parseInt(bitVector, 2)\n        };\n      });\n      return {\n        key,\n        points: processedPoints,\n        dimensions: key.length\n      };\n    });\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    // Memory-efficient angle calculation\n    const calculateSectorAngles = () => {\n      const sectorAngles = {};\n      const ringsOrderedByDimension = [...pointsData].sort((a, b) => b.dimensions - a.dimensions);\n\n      // Process each ring, starting from the outermost\n      ringsOrderedByDimension.forEach(ringData => {\n        const key = ringData.key;\n        const sectors = 2 ** ringData.dimensions;\n        const sectorCounts = new Array(sectors).fill(0);\n\n        // Count points in each sector\n        ringData.points.forEach(point => {\n          const sectorIndex = Math.min(point.sectorIndex, sectors - 1);\n          sectorCounts[sectorIndex]++;\n        });\n\n        // Calculate angles\n        const minAngle = 0.02 * (Math.PI * 2) / sectors;\n        const totalPoints = ringData.points.length || 1;\n        const emptySectors = sectorCounts.filter(count => count === 0).length;\n        const remainingAngle = 2 * Math.PI - minAngle * emptySectors;\n\n        // Store only what's needed\n        const angles = [];\n        let currentAngle = Math.PI / 2; // Start from top\n\n        for (let i = 0; i < sectors; i++) {\n          const angle = sectorCounts[i] === 0 ? minAngle : sectorCounts[i] / totalPoints * remainingAngle;\n          angles.push({\n            start: currentAngle,\n            end: currentAngle + angle\n          });\n          currentAngle += angle;\n        }\n        sectorAngles[key] = angles;\n      });\n\n      // Propagate angles from outer to inner rings\n      subspaces.forEach(key => {\n        const dimensions = key.length;\n        const parentKey = subspaces.find(k => k.length === dimensions + 1);\n\n        // Skip if this is the outermost ring or no parent\n        if (!parentKey || !sectorAngles[parentKey]) return;\n        const parentAngles = sectorAngles[parentKey];\n        const sectors = 2 ** dimensions;\n        const angles = [];\n\n        // For each sector in this ring\n        for (let i = 0; i < sectors; i++) {\n          const startSector = i * 2;\n          const endSector = startSector + 1;\n\n          // Merge angles from parent sectors\n          if (startSector < parentAngles.length && endSector < parentAngles.length) {\n            angles.push({\n              start: parentAngles[startSector].start,\n              end: parentAngles[endSector].end\n            });\n          } else if (startSector < parentAngles.length) {\n            angles.push(parentAngles[startSector]);\n          } else {\n            // Fallback\n            const angle = 2 * Math.PI / sectors;\n            angles.push({\n              start: Math.PI / 2 + i * angle,\n              end: Math.PI / 2 + (i + 1) * angle\n            });\n          }\n        }\n        sectorAngles[key] = angles;\n      });\n      return sectorAngles;\n    };\n\n    // Point positioning function (reused across views)\n    const positionPoint = (point, angle, radius) => {\n      return {\n        x: radius * Math.cos(angle),\n        y: radius * Math.sin(angle)\n      };\n    };\n\n    // Draw a single point\n    const drawPoint = (point, pos, ringKey, index) => {\n      // Store point positions for connections\n      point.Point_ID.forEach(id => {\n        if (!pointPositions[id]) pointPositions[id] = [];\n        pointPositions[id].push({\n          x: pos.x,\n          y: pos.y,\n          subspaceId: ringKey\n        });\n      });\n      g.append(\"circle\").attr(\"cx\", pos.x).attr(\"cy\", pos.y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n        const pointIds = point.Point_ID.join(\", \");\n\n        // Find labels efficiently\n        let associatedLabels = [];\n        if (labelsData && labelsData.labels) {\n          Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n            if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n              associatedLabels.push(label);\n            }\n          });\n        }\n        const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n        tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${pos.x.toFixed(2)}, ${pos.y.toFixed(2)})<br>Subspace: ${ringKey}<br>Label: ${labelText}`);\n        setHoveredCoordinates({\n          ...point,\n          label: labelText\n        });\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.style(\"visibility\", \"hidden\");\n        setHoveredCoordinates(null);\n      });\n    };\n\n    // Render normal view\n    const renderNormalView = () => {\n      // Reuse point positions for line connections\n      const pointPositions = {};\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const ringData = pointsData[index];\n        const sectors = 2 ** ringData.dimensions;\n        const sectorAngle = 2 * Math.PI / sectors;\n        const rotationOffset = Math.PI / 2;\n\n        // Draw sectors\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = rotationOffset + sectorAngle * i;\n          const endAngle = startAngle + sectorAngle;\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n        }\n\n        // Draw ring label\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n\n        // Draw points\n        ringData.points.forEach((point, pIndex) => {\n          const sectorIndex = Math.min(point.sectorIndex, sectors - 1);\n          const centerAngle = rotationOffset + sectorAngle * sectorIndex + sectorAngle / 2;\n\n          // Distribute points within the sector\n          const clusterFactor = 0.9;\n          const totalPoints = ringData.points.length;\n          const radius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (pIndex % totalPoints) / totalPoints;\n          const pos = positionPoint(point, centerAngle, radius);\n          drawPoint(point, pos, key, index);\n        });\n      });\n      return pointPositions;\n    };\n\n    // Render proportional view\n    const renderProportionalView = () => {\n      const sectorAngles = calculateSectorAngles();\n      // Reuse point positions for line connections\n      const pointPositions = {};\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const ringData = pointsData[index];\n        const angles = sectorAngles[key] || [];\n\n        // Draw sectors\n        angles.forEach((sector, i) => {\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(sector.start).endAngle(sector.end)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.5);\n        });\n\n        // Draw ring label\n        g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n\n        // Draw points\n        ringData.points.forEach((point, pIndex) => {\n          const sectorIndex = Math.min(point.sectorIndex, angles.length - 1);\n          if (!angles[sectorIndex]) return;\n          const sector = angles[sectorIndex];\n          const centerAngle = sector.start + (sector.end - sector.start) / 2;\n\n          // Distribute points within the sector\n          const clusterFactor = 0.9;\n          const totalPoints = ringData.points.length;\n          const radius = innerRadius + clusterFactor * (outerRadius - innerRadius) * (pIndex % totalPoints) / totalPoints;\n          const pos = positionPoint(point, centerAngle, radius);\n          drawPoint(point, pos, key, index);\n        });\n      });\n      return pointPositions;\n    };\n\n    // Create a shared pointPositions object\n    const pointPositions = {};\n\n    // Render based on view mode\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw connections between related points\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        // Batch line creation to reduce DOM operations\n        const lineData = [];\n        for (let i = 0; i < positions.length - 1; i++) {\n          lineData.push({\n            x1: positions[i].x,\n            y1: positions[i].y,\n            x2: positions[i + 1].x,\n            y2: positions[i + 1].y\n          });\n        }\n\n        // Draw lines as a group\n        g.selectAll(\"line.connection\").data(lineData).enter().append(\"line\").attr(\"class\", \"connection\").attr(\"x1\", d => d.x1).attr(\"y1\", d => d.y1).attr(\"x2\", d => d.x2).attr(\"y2\", d => d.y2).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 1.5).attr(\"stroke-opacity\", 0.9).on(\"mouseover\", () => {\n          tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      }\n    });\n\n    // Add zoom functionality\n    const zoom = d3.zoom().on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"normal\"),\n        style: {\n          marginRight: \"10px\",\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"normal\" ? \"white\" : \"black\"\n        },\n        children: \"Normal View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setViewMode(\"proportional\"),\n        style: {\n          padding: \"5px 10px\",\n          backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n          color: viewMode === \"proportional\" ? \"white\" : \"black\"\n        },\n        children: \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1044,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1032,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1031,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"CVuPsSNXbeMAdW5BbQwuQu7RE7g=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","viewMode","setViewMode","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","g","attr","append","tooltip","style","colorScale","scaleOrdinal","schemeCategory10","domain","labels","getRingColor","index","totalRings","colorScaleInd","scaleSequential","interpolatePlasma","color","getSectorColor","sectorIndex","baseColor","hsl","isPositive","h","s","toString","getLabelColor","pointId","label","pointList","Array","isArray","includes","Number","subspaces","sort","a","b","pointsData","map","key","processedPoints","point","pointData","entries","filter","k","bitVector","_","coord","join","parseInt","points","dimensions","ringLabels","i","String","fromCharCode","calculateSectorAngles","sectorAngles","ringsOrderedByDimension","forEach","ringData","sectors","sectorCounts","fill","minAngle","PI","totalPoints","emptySectors","count","remainingAngle","angles","currentAngle","angle","push","start","end","parentKey","find","parentAngles","startSector","endSector","positionPoint","radius","x","cos","y","sin","drawPoint","pos","ringKey","Point_ID","id","pointPositions","subspaceId","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","renderNormalView","innerRadius","outerRadius","sectorAngle","rotationOffset","startAngle","endAngle","arc","text","pIndex","centerAngle","clusterFactor","renderProportionalView","sector","positions","lineData","x1","y1","x2","y2","data","enter","d","zoom","transform","call","children","marginBottom","onClick","marginRight","padding","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // import React, { useEffect, useRef, useState } from \"react\";\n// // import * as d3 from \"d3\";\n\n// // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// //   const graphRef = useRef(null);\n// //   const [viewMode, setViewMode] = useState(\"normal\");\n\n// //   useEffect(() => {\n// //     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n// //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// //       return;\n// //     }\n\n// //     if (!labelsData || typeof labelsData !== \"object\") {\n// //       console.error(\"Invalid labelsData:\", labelsData);\n// //       return;\n// //     }\n\n// //     const svg = d3.select(graphRef.current);\n// //     svg.selectAll(\"*\").remove();\n\n// //     const width = 800;\n// //     const height = 800;\n// //     const margin = 20;\n// //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// //     const g = svg\n// //       .attr(\"width\", width)\n// //       .attr(\"height\", height)\n// //       .append(\"g\")\n// //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// //     const tooltip = d3\n// //       .select(\"body\")\n// //       .append(\"div\")\n// //       .attr(\"class\", \"tooltip\")\n// //       .style(\"position\", \"absolute\")\n// //       .style(\"visibility\", \"hidden\")\n// //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// //       .style(\"color\", \"white\")\n// //       .style(\"padding\", \"5px\")\n// //       .style(\"border-radius\", \"4px\")\n// //       .style(\"font-size\", \"12px\");\n\n// //     const getLabelColor = (pointId) => {\n// //       if (!labelsData || !labelsData.labels) return \"gray\";\n// //       for (const label of Object.keys(labelsData.labels)) {\n// //         const pointList = labelsData.labels[label];\n// //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// //           return colorScale(label);\n// //         }\n// //       }\n// //       return \"gray\";\n// //     };\n\n// //     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n// //     const getRingColor = (index) => {\n// //       const totalRings = Object.keys(jsonData).length;\n// //       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n// //       return d3.color(colorScaleInd(index));\n// //     };\n// //     const getSectorColor = (index, sectorIndex) => {\n// //       const baseColor = d3.hsl(getRingColor(index));\n// //       const isPositive = sectorIndex % 2 === 0;\n// //       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n// //     };\n\n// //     const subspaces = Object.keys(jsonData);\n// //     subspaces.sort((a, b) => a.length - b.length);\n// //     const pointsData = subspaces.map((key) => ({\n// //       key,\n// //       points: jsonData[key] || [],\n// //       dimensions: key.length,\n// //       subspaceId: key,\n// //     }));\n// //     console.log(\"Points data:\", pointsData.dimensions);\n// //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n// //     const pointPositions = {};\n\n// //     const renderNormalView = () => {\n// //       subspaces.forEach((key, index) => {\n// //         if (!ringVisibility[key]) return;\n// //         const innerRadius = (index / subspaces.length) * maxRadius;\n// //         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// //         const sectors = 2 ** (index + 1);\n// //         const rotationOffset = Math.PI / 2;\n\n// //         for (let i = 0; i < sectors; i++) {\n// //           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// //           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// //           g.append(\"path\")\n// //             .attr(\"d\", d3.arc()\n// //               .innerRadius(innerRadius)\n// //               .outerRadius(outerRadius)\n// //               .startAngle(startAngle)\n// //               .endAngle(endAngle)\n// //             )\n// //             .attr(\"fill\", getSectorColor(index, i))\n// //             .attr(\"fill-opacity\", 0.3)\n// //             .attr(\"stroke\", \"black\")\n// //             .attr(\"stroke-width\", 0.5)\n// //             .style(\"cursor\", \"pointer\");\n\n// //           g.append(\"text\")\n// //             .attr(\"x\", 0)\n// //             .attr(\"y\", -outerRadius - 5)\n// //             .attr(\"text-anchor\", \"middle\")\n// //             .attr(\"font-size\", \"16px\")\n// //             .attr(\"fill\", \"red\")\n// //             .attr(\"font-weight\", \"bold\")\n// //             .text(ringLabels[index]);\n// //         }\n// //         renderPoints(index, innerRadius, outerRadius, sectors);\n// //       });\n// //     };\n\n\n// //     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n// //       const isProportional = viewMode === \"proportional\";\n// //       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n// //       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n\n// //       let currentAngle = Math.PI / 2;\n// //       pointsData[index].points.forEach((point, i) => {\n// //         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n// //         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n// //         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n// //         const startAngle = isProportional ?\n// //           currentAngle + angles.slice(0, bitVectorIndex).reduce((a, b) => a + b, 0) :\n// //           (2 * Math.PI * bitVectorIndex) / sectors;\n// //         const angleWidth = isProportional ? angles[bitVectorIndex] : (2 * Math.PI / sectors);\n// //         const centerAngle = startAngle + angleWidth / 2;\n\n// //         const minRadius = innerRadius;\n// //         const maxRadius = outerRadius;\n// //         const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n// //         const totalPoints = pointsData[index].points.length;\n// //         const clusterFactor = 0.9;\n// //         const overlapRadius =\n// //           innerRadius +\n// //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// //           totalPoints;\n// //         const x = overlapRadius * Math.cos(centerAngle);\n// //         const y = overlapRadius * Math.sin(centerAngle);\n\n// //         point.Point_ID.forEach((id) => {\n// //           if (!pointPositions[id]) {\n// //             pointPositions[id] = [];\n// //           }\n// //           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n// //         });\n\n// //         g.append(\"circle\")\n// //           .attr(\"cx\", x)\n// //           .attr(\"cy\", y)\n// //           .attr(\"r\", 3)\n// //           .attr(\"fill\", \"black\")\n// //           .attr(\"stroke\", \"white\")\n// //           .attr(\"stroke-width\", 0.5)\n// //           .style(\"pointer-events\", \"visible\")\n// //           .on(\"mouseover\", (event) => {\n// //             const pointIds = point.Point_ID.join(\", \");\n// //             let associatedLabels = [];\n// //             if (labelsData && labelsData.labels) {\n// //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// //                   associatedLabels.push(label);\n// //                 }\n// //               });\n// //             }\n// //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// //             tooltip\n// //               .style(\"visibility\", \"visible\")\n// //               .html(\n// //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n// //               );\n// //             setHoveredCoordinates({ ...point, label: labelText });\n// //           })\n// //           .on(\"mousemove\", (event) => {\n// //             tooltip\n// //               .style(\"top\", event.pageY + 10 + \"px\")\n// //               .style(\"left\", event.pageX + 10 + \"px\");\n// //           })\n// //           .on(\"mouseout\", () => {\n// //             tooltip.style(\"visibility\", \"hidden\");\n// //             setHoveredCoordinates(null);\n// //           });\n// //       });\n// //     };\n\n// //     if (viewMode === \"normal\") {\n// //       renderNormalView();\n// //     } \n// //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// //       if (positions.length > 1) {\n// //         for (let i = 0; i < positions.length - 1; i++) {\n// //           const line = g.append(\"line\")\n// //             .attr(\"x1\", positions[i].x)\n// //             .attr(\"y1\", positions[i].y)\n// //             .attr(\"x2\", positions[i + 1].x)\n// //             .attr(\"y2\", positions[i + 1].y)\n// //             .attr(\"stroke\", getLabelColor(pointId))\n// //             .attr(\"stroke-width\", 1.5)\n// //             .attr(\"stroke-opacity\", 0.9)\n// //             .style(\"cursor\", \"pointer\")\n// //             .on(\"mouseover\", (event) => {\n// //               tooltip\n// //                 .style(\"visibility\", \"visible\")\n// //                 .html(`Connection: Point_ID ${pointId}`);\n// //             })\n// //             .on(\"mousemove\", (event) => {\n// //               tooltip\n// //                 .style(\"top\", event.pageY + 10 + \"px\")\n// //                 .style(\"left\", event.pageX + 10 + \"px\");\n// //             })\n// //             .on(\"mouseout\", () => {\n// //               tooltip.style(\"visibility\", \"hidden\");\n// //             });\n// //         }\n// //       }\n// //     });\n\n// //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// //       g.attr(\"transform\", event.transform);\n// //     });\n// //     svg.call(zoom);\n\n// //     return () => {\n// //       tooltip.remove();\n// //     };\n// //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n// //   return (\n// //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// //       <div style={{ marginBottom: \"10px\" }}>\n// //         <button\n// //           onClick={() => setViewMode(\"normal\")}\n// //           style={{\n// //             marginRight: \"10px\",\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"normal\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Normal View\n// //         </button>\n// //         <button\n// //           onClick={() => setViewMode(\"proportional\")}\n// //           style={{\n// //             padding: \"5px 10px\",\n// //             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n// //             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n// //           }}\n// //         >\n// //           Proportional View\n// //         </button>\n// //       </div>\n// //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// //     </div>\n// //   );\n// // };\n\n// // export default HierarchicalGraph;\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [viewMode, setViewMode] = useState(\"normal\");\n\n//   useEffect(() => {\n//     if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n//     const getRingColor = (index) => {\n//       const totalRings = Object.keys(jsonData).length;\n//       const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n//       return d3.color(colorScaleInd(index));\n//     };\n//     const getSectorColor = (index, sectorIndex) => {\n//       const baseColor = d3.hsl(getRingColor(index));\n//       const isPositive = sectorIndex % 2 === 0;\n//       return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key] || [],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n//     const pointPositions = {};\n\n//     const calculateProportionalAngles = (index) => {\n//       const sectors = 2 ** (index + 1);\n//       const points = pointsData[index].points;\n//       const sectorCounts = Array(sectors).fill(0);\n//       const minAngle = 0.1 * (Math.PI * 2) / sectors;\n\n//       points.forEach(point => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n//         sectorCounts[bitVectorIndex]++;\n//       });\n\n//       const totalPoints = points.length || 1; // Avoid division by zero\n//       const remainingAngle = 2 * Math.PI - (minAngle * sectorCounts.filter(count => count === 0).length);\n\n//       return sectorCounts.map(count => {\n//         if (count === 0) return minAngle;\n//         return (count / totalPoints) * remainingAngle;\n//       });\n//     };\n\n//     const renderNormalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n//           const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n//         }\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, sectors);\n//       });\n//     };\n\n//     const renderProportionalView = () => {\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const rotationOffset = Math.PI / 2;\n\n//         const proportionalAngles = calculateProportionalAngles(index);\n\n//         let currentAngle = rotationOffset;\n//         proportionalAngles.forEach((angle, i) => {\n//           const startAngle = currentAngle;\n//           const endAngle = currentAngle + angle;\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"cursor\", \"pointer\");\n\n//           currentAngle = endAngle;\n//         });\n\n//         g.append(\"text\")\n//           .attr(\"x\", 0)\n//           .attr(\"y\", -outerRadius - 5)\n//           .attr(\"text-anchor\", \"middle\")\n//           .attr(\"font-size\", \"16px\")\n//           .attr(\"fill\", \"red\")\n//           .attr(\"font-weight\", \"bold\")\n//           .text(ringLabels[index]);\n\n//         renderPoints(index, innerRadius, outerRadius, proportionalAngles);\n//       });\n//     };\n\n//     const renderPoints = (index, innerRadius, outerRadius, anglesOrSectors) => {\n//       const isProportional = viewMode === \"proportional\";\n//       const sectors = isProportional ? anglesOrSectors.length : anglesOrSectors;\n//       const angles = isProportional ? anglesOrSectors : Array(sectors).fill(2 * Math.PI / sectors);\n//       const rotationOffset = Math.PI / 2;\n\n//       pointsData[index].points.forEach((point, i) => {\n//         const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n//         const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//         const bitVectorIndex = Math.min(parseInt(bitVector, 2), sectors - 1);\n\n//         let startAngle = rotationOffset;\n//         if (isProportional) {\n//           for (let j = 0; j < bitVectorIndex; j++) {\n//             startAngle += angles[j];\n//           }\n//         } else {\n//           startAngle += (2 * Math.PI * bitVectorIndex) / sectors;\n//         }\n\n//         const angleWidth = angles[bitVectorIndex];\n//         const centerAngle = startAngle + angleWidth / 2;\n\n//         const totalPoints = pointsData[index].points.length;\n//         const clusterFactor = 0.9;\n//         const overlapRadius =\n//           innerRadius +\n//           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n//           totalPoints;\n//         const x = overlapRadius * Math.cos(centerAngle);\n//         const y = overlapRadius * Math.sin(centerAngle);\n\n//         point.Point_ID.forEach((id) => {\n//           if (!pointPositions[id]) {\n//             pointPositions[id] = [];\n//           }\n//           pointPositions[id].push({ x, y, point, subspaceId: pointsData[index].key });\n//         });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 3)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             const pointIds = point.Point_ID.join(\", \");\n//             let associatedLabels = [];\n//             if (labelsData && labelsData.labels) {\n//               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                   associatedLabels.push(label);\n//                 }\n//               });\n//             }\n//             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${pointsData[index].key}<br>Label: ${labelText}`\n//               );\n//             setHoveredCoordinates({ ...point, label: labelText });\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     };\n\n//     if (viewMode === \"normal\") {\n//       renderNormalView();\n//     } else if (viewMode === \"proportional\") {\n//       renderProportionalView();\n//     }\n\n//     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           const line = g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", getLabelColor(pointId))\n//             .attr(\"stroke-width\", 1.5)\n//             .attr(\"stroke-opacity\", 0.9)\n//             .style(\"cursor\", \"pointer\")\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${pointId}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n\n//     const zoom = d3.zoom().on(\"zoom\", (event) => {\n//       g.attr(\"transform\", event.transform);\n//     });\n//     svg.call(zoom);\n\n//     return () => {\n//       tooltip.remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setViewMode(\"normal\")}\n//           style={{\n//             marginRight: \"10px\",\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"normal\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Normal View\n//         </button>\n//         <button\n//           onClick={() => setViewMode(\"proportional\")}\n//           style={{\n//             padding: \"5px 10px\",\n//             backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: viewMode === \"proportional\" ? \"white\" : \"black\",\n//           }}\n//         >\n//           Proportional View\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [viewMode, setViewMode] = useState(\"normal\");\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    // Clear previous graph and tooltip\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    d3.select(\"body .tooltip\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Create tooltip once\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    // Color functions\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getRingColor = (index) => {\n      const totalRings = Object.keys(jsonData).length;\n      const colorScaleInd = d3.scaleSequential(d3.interpolatePlasma).domain([totalRings, 0]);\n      return d3.color(colorScaleInd(index));\n    };\n\n    const getSectorColor = (index, sectorIndex) => {\n      const baseColor = d3.hsl(getRingColor(index));\n      const isPositive = sectorIndex % 2 === 0;\n      return d3.hsl(baseColor.h, baseColor.s, isPositive ? 0.75 : 0.35).toString();\n    };\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    // Sort subspaces by dimension (length of key)\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    // Process data once\n    const pointsData = subspaces.map((key) => {\n      // Pre-process points to avoid repeated calculations\n      const processedPoints = (jsonData[key] || []).map(point => {\n        const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n        const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n        return {\n          ...point,\n          bitVector,\n          sectorIndex: parseInt(bitVector, 2)\n        };\n      });\n\n      return {\n        key,\n        points: processedPoints,\n        dimensions: key.length,\n      };\n    });\n\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n    // Memory-efficient angle calculation\n    const calculateSectorAngles = () => {\n      const sectorAngles = {};\n      const ringsOrderedByDimension = [...pointsData].sort((a, b) => b.dimensions - a.dimensions);\n\n      // Process each ring, starting from the outermost\n      ringsOrderedByDimension.forEach(ringData => {\n        const key = ringData.key;\n        const sectors = 2 ** ringData.dimensions;\n        const sectorCounts = new Array(sectors).fill(0);\n\n        // Count points in each sector\n        ringData.points.forEach(point => {\n          const sectorIndex = Math.min(point.sectorIndex, sectors - 1);\n          sectorCounts[sectorIndex]++;\n        });\n\n        // Calculate angles\n        const minAngle = 0.02 * (Math.PI * 2) / sectors;\n        const totalPoints = ringData.points.length || 1;\n        const emptySectors = sectorCounts.filter(count => count === 0).length;\n        const remainingAngle = 2 * Math.PI - (minAngle * emptySectors);\n\n        // Store only what's needed\n        const angles = [];\n        let currentAngle = Math.PI / 2; // Start from top\n\n        for (let i = 0; i < sectors; i++) {\n          const angle = sectorCounts[i] === 0 ? minAngle : (sectorCounts[i] / totalPoints) * remainingAngle;\n          angles.push({ start: currentAngle, end: currentAngle + angle });\n          currentAngle += angle;\n        }\n\n        sectorAngles[key] = angles;\n      });\n\n      // Propagate angles from outer to inner rings\n      subspaces.forEach(key => {\n        const dimensions = key.length;\n        const parentKey = subspaces.find(k => k.length === dimensions + 1);\n\n        // Skip if this is the outermost ring or no parent\n        if (!parentKey || !sectorAngles[parentKey]) return;\n\n        const parentAngles = sectorAngles[parentKey];\n        const sectors = 2 ** dimensions;\n        const angles = [];\n\n        // For each sector in this ring\n        for (let i = 0; i < sectors; i++) {\n          const startSector = i * 2;\n          const endSector = startSector + 1;\n\n          // Merge angles from parent sectors\n          if (startSector < parentAngles.length && endSector < parentAngles.length) {\n            angles.push({\n              start: parentAngles[startSector].start,\n              end: parentAngles[endSector].end\n            });\n          } else if (startSector < parentAngles.length) {\n            angles.push(parentAngles[startSector]);\n          } else {\n            // Fallback\n            const angle = (2 * Math.PI) / sectors;\n            angles.push({\n              start: (Math.PI / 2) + (i * angle),\n              end: (Math.PI / 2) + ((i + 1) * angle)\n            });\n          }\n        }\n\n        sectorAngles[key] = angles;\n      });\n\n      return sectorAngles;\n    };\n\n    // Point positioning function (reused across views)\n    const positionPoint = (point, angle, radius) => {\n      return {\n        x: radius * Math.cos(angle),\n        y: radius * Math.sin(angle)\n      };\n    };\n\n    // Draw a single point\n    const drawPoint = (point, pos, ringKey, index) => {\n      // Store point positions for connections\n      point.Point_ID.forEach(id => {\n        if (!pointPositions[id]) pointPositions[id] = [];\n        pointPositions[id].push({\n          x: pos.x,\n          y: pos.y,\n          subspaceId: ringKey\n        });\n      });\n\n      g.append(\"circle\")\n        .attr(\"cx\", pos.x)\n        .attr(\"cy\", pos.y)\n        .attr(\"r\", 3)\n        .attr(\"fill\", \"black\")\n        .attr(\"stroke\", \"white\")\n        .attr(\"stroke-width\", 0.5)\n        .style(\"pointer-events\", \"visible\")\n        .on(\"mouseover\", (event) => {\n          const pointIds = point.Point_ID.join(\", \");\n\n          // Find labels efficiently\n          let associatedLabels = [];\n          if (labelsData && labelsData.labels) {\n            Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n              if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                associatedLabels.push(label);\n              }\n            });\n          }\n          const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n          tooltip\n            .style(\"visibility\", \"visible\")\n            .html(\n              `Point_IDs: ${pointIds}<br>Coordinates: (${pos.x.toFixed(2)}, ${pos.y.toFixed(2)})<br>Subspace: ${ringKey}<br>Label: ${labelText}`\n            );\n\n          setHoveredCoordinates({ ...point, label: labelText });\n        })\n        .on(\"mousemove\", (event) => {\n          tooltip\n            .style(\"top\", event.pageY + 10 + \"px\")\n            .style(\"left\", event.pageX + 10 + \"px\");\n        })\n        .on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n          setHoveredCoordinates(null);\n        });\n    };\n\n    // Render normal view\n    const renderNormalView = () => {\n      // Reuse point positions for line connections\n      const pointPositions = {};\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const ringData = pointsData[index];\n        const sectors = 2 ** ringData.dimensions;\n        const sectorAngle = 2 * Math.PI / sectors;\n        const rotationOffset = Math.PI / 2;\n\n        // Draw sectors\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = rotationOffset + (sectorAngle * i);\n          const endAngle = startAngle + sectorAngle;\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5);\n        }\n\n        // Draw ring label\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        // Draw points\n        ringData.points.forEach((point, pIndex) => {\n          const sectorIndex = Math.min(point.sectorIndex, sectors - 1);\n          const centerAngle = rotationOffset + (sectorAngle * sectorIndex) + (sectorAngle / 2);\n\n          // Distribute points within the sector\n          const clusterFactor = 0.9;\n          const totalPoints = ringData.points.length;\n          const radius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (pIndex % totalPoints)) / totalPoints;\n\n          const pos = positionPoint(point, centerAngle, radius);\n          drawPoint(point, pos, key, index);\n        });\n      });\n\n      return pointPositions;\n    };\n\n    // Render proportional view\n    const renderProportionalView = () => {\n      const sectorAngles = calculateSectorAngles();\n      // Reuse point positions for line connections\n      const pointPositions = {};\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const ringData = pointsData[index];\n        const angles = sectorAngles[key] || [];\n\n        // Draw sectors\n        angles.forEach((sector, i) => {\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(sector.start)\n              .endAngle(sector.end)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.5);\n        });\n\n        // Draw ring label\n        g.append(\"text\")\n          .attr(\"x\", 0)\n          .attr(\"y\", -outerRadius - 5)\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"16px\")\n          .attr(\"fill\", \"red\")\n          .attr(\"font-weight\", \"bold\")\n          .text(ringLabels[index]);\n\n        // Draw points\n        ringData.points.forEach((point, pIndex) => {\n          const sectorIndex = Math.min(point.sectorIndex, angles.length - 1);\n          if (!angles[sectorIndex]) return;\n\n          const sector = angles[sectorIndex];\n          const centerAngle = sector.start + ((sector.end - sector.start) / 2);\n\n          // Distribute points within the sector\n          const clusterFactor = 0.9;\n          const totalPoints = ringData.points.length;\n          const radius = innerRadius + (clusterFactor * (outerRadius - innerRadius) * (pIndex % totalPoints)) / totalPoints;\n\n          const pos = positionPoint(point, centerAngle, radius);\n          drawPoint(point, pos, key, index);\n        });\n      });\n\n      return pointPositions;\n    };\n\n    // Create a shared pointPositions object\n    const pointPositions = {};\n\n    // Render based on view mode\n    if (viewMode === \"normal\") {\n      renderNormalView();\n    } else if (viewMode === \"proportional\") {\n      renderProportionalView();\n    }\n\n    // Draw connections between related points\n    Object.entries(pointPositions).forEach(([pointId, positions]) => {\n      if (positions.length > 1) {\n        // Batch line creation to reduce DOM operations\n        const lineData = [];\n        for (let i = 0; i < positions.length - 1; i++) {\n          lineData.push({\n            x1: positions[i].x,\n            y1: positions[i].y,\n            x2: positions[i + 1].x,\n            y2: positions[i + 1].y\n          });\n        }\n\n        // Draw lines as a group\n        g.selectAll(\"line.connection\")\n          .data(lineData)\n          .enter()\n          .append(\"line\")\n          .attr(\"class\", \"connection\")\n          .attr(\"x1\", d => d.x1)\n          .attr(\"y1\", d => d.y1)\n          .attr(\"x2\", d => d.x2)\n          .attr(\"y2\", d => d.y2)\n          .attr(\"stroke\", getLabelColor(pointId))\n          .attr(\"stroke-width\", 1.5)\n          .attr(\"stroke-opacity\", 0.9)\n          .on(\"mouseover\", () => {\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(`Connection: Point_ID ${pointId}`);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      }\n    });\n\n    // Add zoom functionality\n    const zoom = d3.zoom().on(\"zoom\", (event) => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n\n    return () => {\n      tooltip.remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, viewMode]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setViewMode(\"normal\")}\n          style={{\n            marginRight: \"10px\",\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"normal\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"normal\" ? \"white\" : \"black\",\n          }}\n        >\n          Normal View\n        </button>\n        <button\n          onClick={() => setViewMode(\"proportional\")}\n          style={{\n            padding: \"5px 10px\",\n            backgroundColor: viewMode === \"proportional\" ? \"#4CAF50\" : \"#f0f0f0\",\n            color: viewMode === \"proportional\" ? \"white\" : \"black\",\n          }}\n        >\n          Proportional View\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}