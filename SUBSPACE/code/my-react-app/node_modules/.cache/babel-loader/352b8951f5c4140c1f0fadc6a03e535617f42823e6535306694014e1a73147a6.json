{"ast":null,"code":"var _jsxFileName = \"/home/divyansh/misc/GRAPH/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n\n// const JsonDisplay = ({ jsonFilename }) => {\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchJson = async () => {\n//       try {\n//         // Adjust the fetch URL depending on where the JSON file is located\n//         const response = await fetch(`/public/${jsonFilename}`);\n//         if (!response.ok) {\n//           throw new Error(`Failed to fetch ${jsonFilename}`);\n//         }\n//         const data = await response.json();\n//         setJsonData(data);\n//       } catch (err) {\n//         console.error(\"Error fetching JSON:\", err);\n//         setError(err.message);\n//       }\n//     };\n\n//     fetchJson();\n//   }, [jsonFilename]);\n\n//   return (\n//     <div className=\"bg-white shadow-lg rounded-lg p-6 mt-4 w-full max-w-3xl\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-blue-800 text-center\">\n//         Processed JSON File\n//       </h2>\n//       {error ? (\n//         <p className=\"text-red-500\">{error}</p>\n//       ) : jsonData ? (\n//         <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto text-sm\">\n//           {JSON.stringify(jsonData, null, 2)}\n//         </pre>\n//       ) : (\n//         <p className=\"text-gray-500 text-sm\">Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JsonDisplay;\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JsonDisplay = ({\n  jsonFilename\n}) => {\n  _s();\n  const [jsonData, setJsonData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!jsonFilename) {\n      setError(\"No JSON filename provided\");\n      return;\n    }\n    fetch(`http://127.0.0.1:5000/public/${jsonFilename}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`Failed to fetch ${jsonFilename}`);\n      }\n      return response.json();\n    }).then(data => {\n      setJsonData(data);\n      setError(null);\n    }).catch(err => {\n      setError(err.message);\n      console.error(\"Error fetching JSON:\", err);\n    });\n  }, [jsonFilename]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [jsonData && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(jsonData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(JsonDisplay, \"nIzsJgtFFOmnQ6T3TRcv41JWAoI=\");\n_c = JsonDisplay;\nexport default JsonDisplay;\nvar _c;\n$RefreshReg$(_c, \"JsonDisplay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","JsonDisplay","jsonFilename","_s","jsonData","setJsonData","error","setError","fetch","then","response","ok","Error","json","data","catch","err","message","console","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/divyansh/misc/GRAPH/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// const JsonDisplay = ({ jsonFilename }) => {\n//   const [jsonData, setJsonData] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchJson = async () => {\n//       try {\n//         // Adjust the fetch URL depending on where the JSON file is located\n//         const response = await fetch(`/public/${jsonFilename}`);\n//         if (!response.ok) {\n//           throw new Error(`Failed to fetch ${jsonFilename}`);\n//         }\n//         const data = await response.json();\n//         setJsonData(data);\n//       } catch (err) {\n//         console.error(\"Error fetching JSON:\", err);\n//         setError(err.message);\n//       }\n//     };\n\n//     fetchJson();\n//   }, [jsonFilename]);\n\n//   return (\n//     <div className=\"bg-white shadow-lg rounded-lg p-6 mt-4 w-full max-w-3xl\">\n//       <h2 className=\"text-2xl font-bold mb-4 text-blue-800 text-center\">\n//         Processed JSON File\n//       </h2>\n//       {error ? (\n//         <p className=\"text-red-500\">{error}</p>\n//       ) : jsonData ? (\n//         <pre className=\"bg-gray-100 p-4 rounded-lg overflow-auto text-sm\">\n//           {JSON.stringify(jsonData, null, 2)}\n//         </pre>\n//       ) : (\n//         <p className=\"text-gray-500 text-sm\">Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default JsonDisplay;\n\nimport React, { useEffect, useState } from \"react\";\n\nconst JsonDisplay = ({ jsonFilename }) => {\n  const [jsonData, setJsonData] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!jsonFilename) {\n      setError(\"No JSON filename provided\");\n      return;\n    }\n\n    fetch(`http://127.0.0.1:5000/public/${jsonFilename}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Failed to fetch ${jsonFilename}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setJsonData(data);\n        setError(null);\n      })\n      .catch((err) => {\n        setError(err.message);\n        console.error(\"Error fetching JSON:\", err);\n      });\n  }, [jsonFilename]);\n\n  return (\n    <div>\n      {jsonData && <pre>{JSON.stringify(jsonData, null, 2)}</pre>}\n      {error && <p>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default JsonDisplay;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,YAAY,EAAE;MACjBK,QAAQ,CAAC,2BAA2B,CAAC;MACrC;IACF;IAEAC,KAAK,CAAC,gCAAgCN,YAAY,EAAE,CAAC,CAClDO,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmBV,YAAY,EAAE,CAAC;MACpD;MACA,OAAOQ,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdT,WAAW,CAACS,IAAI,CAAC;MACjBP,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,CACDQ,KAAK,CAAEC,GAAG,IAAK;MACdT,QAAQ,CAACS,GAAG,CAACC,OAAO,CAAC;MACrBC,OAAO,CAACZ,KAAK,CAAC,sBAAsB,EAAEU,GAAG,CAAC;IAC5C,CAAC,CAAC;EACN,CAAC,EAAE,CAACd,YAAY,CAAC,CAAC;EAElB,oBACEF,OAAA;IAAAmB,QAAA,GACGf,QAAQ,iBAAIJ,OAAA;MAAAmB,QAAA,EAAMC,IAAI,CAACC,SAAS,CAACjB,QAAQ,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC1DnB,KAAK,iBAAIN,OAAA;MAAAmB,QAAA,GAAG,SAAO,EAACb,KAAK;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAACtB,EAAA,CAjCIF,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}