{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (\n// // //       !jsonData ||\n// // //       typeof jsonData !== \"object\" ||\n// // //       Object.keys(jsonData).length === 0\n// // //     ) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const edgePopup = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"edge-popup\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// // //       .style(\"color\", \"black\")\n// // //       .style(\"padding\", \"10px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\")\n// // //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// // //       .style(\"max-width\", \"300px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3\n// // //       .scaleOrdinal(d3.schemeCategory10)\n// // //       .domain(Object.keys(labelsData.labels || {}));\n\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// // //     };\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n// // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// // //     const pointPositions = {};\n// // //     let highlightedElements = null;\n\n// // //     // Function to clear highlights\n// // //     const clearHighlights = () => {\n// // //       if (highlightedElements) {\n// // //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// // //         highlightedElements.circles.forEach(circle =>\n// // //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// // //         );\n// // //         highlightedElements = null;\n// // //       }\n// // //     };\n\n// // //     subspaces.forEach((key, index) => {\n// // //       if (!ringVisibility[key]) return;\n\n// // //       const innerRadius = (index / subspaces.length) * maxRadius;\n// // //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //       const sectors = 2 ** (index + 1);\n// // //       const rotationOffset = Math.PI / 2;\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // //         g.append(\"path\")\n// // //           .attr(\"d\", d3.arc()\n// // //             .innerRadius(innerRadius)\n// // //             .outerRadius(outerRadius)\n// // //             .startAngle(startAngle)\n// // //             .endAngle(endAngle)\n// // //           )\n// // //           .attr(\"fill\", getSectorColor(index, i))\n// // //           .attr(\"fill-opacity\", 0.3)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.1)\n// // //           .style(\"cursor\", \"pointer\");\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"16px\")\n// // //           .attr(\"fill\", \"red\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //         // .text(key);\n// // //           .text(ringLabels[index]); // Use generated lab\n// // //       }\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         const angle = (2 * Math.PI * i) / sectors;\n// // //         const x1 = outerRadius * Math.cos(angle);\n// // //         const y1 = outerRadius * Math.sin(angle);\n// // //         const x2 = innerRadius * Math.cos(angle);\n// // //         const y2 = innerRadius * Math.sin(angle);\n// // //         g.append(\"line\")\n// // //           .attr(\"x1\", x2)\n// // //           .attr(\"y1\", y2)\n// // //           .attr(\"x2\", x1)\n// // //           .attr(\"y2\", y1)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.25)\n// // //           .style(\"pointer-events\", \"none\");\n// // //       }\n\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(\n// // //           ([key]) => key !== \"Point_ID\"\n// // //         );\n// // //         const bitVector = pointData\n// // //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// // //           .join(\"\");\n\n// // //         const minRadius = innerRadius;\n// // //         const maxRadius = outerRadius;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// // //         const bitVectorIndex = parseInt(bitVector, 2);\n// // //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// // //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.86;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// // //               );\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     });\n\n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           const line = g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 0.3)\n// // //             .style(\"cursor\", \"pointer\")\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             })\n// // //             .on(\"click\", (event) => {\n// // //               // Clear previous highlights\n// // //               clearHighlights();\n\n// // //               // Highlight the clicked edge\n// // //               const originalColor = getLabelColor(pointId);\n// // //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// // //               // Highlight connected points\n// // //               const circles = g.selectAll(\"circle\")\n// // //                 .filter(d => {\n// // //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// // //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// // //                   return (\n// // //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// // //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// // //                 )})\n// // //                 .attr(\"r\", 6)\n// // //                 .attr(\"fill\", \"yellow\");\n\n// // //               highlightedElements = { line, circles, originalColor };\n\n// // //               // Show popup\n// // //               const point1 = positions[i].point;\n// // //               const point2 = positions[i + 1].point;\n\n// // //               const coords1 = Object.entries(point1)\n// // //                 .filter(([key]) => key !== \"Point_ID\")\n// // //                 .map(([key, value]) => `${key}: ${value}`)\n// // //                 .join(\", \");\n// // //               const coords2 = Object.entries(point2)\n// // //                 .filter(([key]) => key !== \"Point_ID\")\n// // //                 .map(([key, value]) => `${key}: ${value}`)\n// // //                 .join(\", \");\n\n// // //               const label1 = Object.entries(labelsData?.labels || {})\n// // //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// // //               edgePopup\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`\n// // //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// // //                   <strong>Point 1</strong><br>\n// // //                   Subspace: ${positions[i].subspaceId}<br>\n// // //                   Coordinates: ${coords1}<br>\n// // //                   Label: ${label1}<br><br>\n// // //                   <strong>Point 2</strong><br>\n// // //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// // //                   Coordinates: ${coords2}<br>\n// // //                   Label: ${label1}\n// // //                 `)\n// // //                 .style(\"top\", event.pageY + 15 + \"px\")\n// // //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// // //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// // //                 if (!edgePopup.node().contains(e.target)) {\n// // //                   edgePopup.style(\"visibility\", \"hidden\");\n// // //                   clearHighlights();\n// // //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// // //                 }\n// // //               });\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n// // //     svg.call(zoom);\n// // //     return () => {\n// // //       tooltip.remove();\n// // //       edgePopup.remove();\n// // //       svg.select(\".zoom-view\").remove();\n// // //     };\n\n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n// // ____________________________________________________________________________________________________________________________________________\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//       // Calculate points distribution for all rings\n//       const pointsBySectorByRing = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n//         return pointsBySector;\n//       });\n\n//       // Calculate sector angles starting from the outermost ring\n//       const sectorAnglesByRing = [];\n//       const totalAngle = 2 * Math.PI;\n\n//       // Outermost ring (proportional to point counts)\n//       const outerRingIndex = subspaces.length - 1;\n//       const outerSectors = 2 ** (outerRingIndex + 1);\n//       const outerPointsBySector = pointsBySectorByRing[outerRingIndex];\n//       const totalPoints = outerPointsBySector.reduce((sum, count) => sum + count, 0);\n//       const emptySectors = outerPointsBySector.filter(count => count === 0).length;\n\n//       let minAngleForEmpty = 0;\n//       const occupiedAngle = Math.min(totalAngle * 0.9, totalAngle);\n//       if (emptySectors > 0 && totalPoints > 0) {\n//         // const occupiedAngle = Math.min(totalAngle * 0.9, totalAngle);\n//         minAngleForEmpty = (totalAngle - occupiedAngle) / emptySectors;\n//       }\n\n//       const outerAngles = outerPointsBySector.map(count => {\n//         if (count === 0) return minAngleForEmpty;\n//         return (count / totalPoints) * (occupiedAngle);\n\n//         // return (count / totalPoints) * (totalAngle - (emptySectors * minAngleForEmpty));\n//       });\n//       sectorAnglesByRing[outerRingIndex] = outerAngles;\n\n//       // Calculate inner ring angles based on outer ring relationships\n//       for (let index = outerRingIndex - 1; index >= 0; index--) {\n//         const sectors = 2 ** (index + 1);\n//         const angles = new Array(sectors).fill(0);\n//         const sectorSizeMultiplier = Math.pow(2, outerRingIndex - index);\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startOuterIndex = i * sectorSizeMultiplier;\n//           const endOuterIndex = (i + 1) * sectorSizeMultiplier;\n//           angles[i] = outerAngles.slice(startOuterIndex, endOuterIndex)\n//             .reduce((sum, angle) => sum + angle, 0);\n//         }\n//         sectorAnglesByRing[index] = angles;\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n//         // const rotationOffset = 0;\n//         const sectorAngles = isProportionalView\n//           ? sectorAnglesByRing[index]\n//           : new Array(sectors).fill(totalAngle / sectors);\n\n//         let currentAngle = rotationOffset;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//               // .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               // .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySectorByRing[index][bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 g.selectAll(\"circle\")\n//                   .filter(function () {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  labelsData,\n  setHoveredCoordinates,\n  ringVisibility\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    const getLabelColor = pointId => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(Object.keys(labelsData.labels || {}));\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 0 : 220, 0.9, 0.6);\n    };\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n      const pointsBySectorByRing = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        const pointsBySector = new Array(sectors).fill(0);\n        pointsData[index].points.forEach(point => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          pointsBySector[sectorIndex]++;\n        });\n        return pointsBySector;\n      });\n      const totalAngle = 2 * Math.PI;\n      const sectorAnglesByRing = [];\n      if (isProportionalView) {\n        const outerRingIndex = subspaces.length - 1;\n        const outerSectors = 2 ** (outerRingIndex + 1);\n        const outerPointsBySector = pointsBySectorByRing[outerRingIndex];\n        const totalPoints = outerPointsBySector.reduce((sum, count) => sum + count, 0);\n        const emptySectors = outerPointsBySector.filter(count => count === 0).length;\n        let minAngleForEmpty = 0;\n        const occupiedAngle = Math.min(totalAngle * 0.9, totalAngle);\n        if (emptySectors > 0 && totalPoints > 0) {\n          minAngleForEmpty = (totalAngle - occupiedAngle) / emptySectors;\n        }\n        const outerAngles = outerPointsBySector.map(count => {\n          if (count === 0) return minAngleForEmpty;\n          return count / totalPoints * occupiedAngle;\n        });\n        sectorAnglesByRing[outerRingIndex] = outerAngles;\n        for (let index = outerRingIndex - 1; index >= 0; index--) {\n          const sectors = 2 ** (index + 1);\n          const angles = new Array(sectors).fill(0);\n          const sectorSizeMultiplier = Math.pow(2, outerRingIndex - index);\n          for (let i = 0; i < sectors; i++) {\n            const startOuterIndex = i * sectorSizeMultiplier;\n            const endOuterIndex = (i + 1) * sectorSizeMultiplier;\n            angles[i] = outerAngles.slice(startOuterIndex, endOuterIndex).reduce((sum, angle) => sum + angle, 0);\n          }\n          sectorAnglesByRing[index] = angles;\n        }\n      }\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n        const innerRadius = index / subspaces.length * maxRadius;\n        const outerRadius = (index + 1) / subspaces.length * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        // Use equal angles for normal view, proportional angles for proportional view\n        const sectorAngles = isProportionalView ? sectorAnglesByRing[index] : new Array(sectors).fill(totalAngle / sectors);\n        let currentAngle = rotationOffset;\n        const sectorStartAngles = [currentAngle];\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const sectorAngle = sectorAngles[i];\n          const endAngle = startAngle + sectorAngle;\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n          g.append(\"path\").attr(\"d\", d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(startAngle).endAngle(endAngle).startAngle(2 * Math.PI * i / sectors + rotationOffset).endAngle(2 * Math.PI * (i + 1) / sectors + rotationOffset)).attr(\"fill\", getSectorColor(index, i)).attr(\"fill-opacity\", 0.3).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.1).style(\"cursor\", \"pointer\");\n          if (i === 0) {\n            g.append(\"text\").attr(\"x\", 0).attr(\"y\", -outerRadius - 5).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"fill\", \"red\").attr(\"font-weight\", \"bold\").text(ringLabels[index]);\n          }\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\").attr(\"x1\", x2).attr(\"y1\", y2).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 0.25).style(\"pointer-events\", \"none\");\n        }\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n          const totalPointsInSector = pointsBySectorByRing[index][bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0 ? innerRadius + clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector) / totalPointsInSector : randomRadius;\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach(id => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({\n              x,\n              y,\n              point,\n              subspaceId: key\n            });\n          });\n          g.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 3).attr(\"fill\", \"black\").attr(\"stroke\", \"white\").attr(\"stroke-width\", 0.5).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n            const pointIds = point.Point_ID.join(\", \");\n            let associatedLabels = [];\n            if (labelsData && labelsData.labels) {\n              Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                  associatedLabels.push(label);\n                }\n              });\n            }\n            const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n            tooltip.style(\"visibility\", \"visible\").html(`Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`);\n            setHoveredCoordinates({\n              ...point,\n              label: labelText\n            });\n          }).on(\"mousemove\", event => {\n            tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n          }).on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n            setHoveredCoordinates(null);\n          });\n        });\n      });\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            const line = g.append(\"line\").attr(\"x1\", positions[i].x).attr(\"y1\", positions[i].y).attr(\"x2\", positions[i + 1].x).attr(\"y2\", positions[i + 1].y).attr(\"stroke\", getLabelColor(pointId)).attr(\"stroke-width\", 0.3).style(\"cursor\", \"pointer\").on(\"mouseover\", event => {\n              tooltip.style(\"visibility\", \"visible\").html(`Connection: Point_ID ${pointId}`);\n            }).on(\"mousemove\", event => {\n              tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n            }).on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n            }).on(\"click\", event => {\n              const originalColor = getLabelColor(pointId);\n              line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n              g.selectAll(\"circle\").filter(function () {\n                const circleX = parseFloat(this.getAttribute(\"cx\"));\n                const circleY = parseFloat(this.getAttribute(\"cy\"));\n                return Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1 || Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1;\n              }).attr(\"r\", 6).attr(\"fill\", \"yellow\");\n            });\n          }\n        }\n      });\n      const zoom = d3.zoom().on(\"zoom\", event => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n    drawGraph();\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsProportionalView(!isProportionalView),\n        style: {\n          padding: \"5px 10px\",\n          marginRight: \"10px\",\n          backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n          color: isProportionalView ? \"white\" : \"black\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        children: isProportionalView ? \"Normal View\" : \"Proportional View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: graphRef,\n      style: {\n        width: \"100%\",\n        height: \"800px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1023,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1006,\n    columnNumber: 5\n  }, this);\n};\n_s(HierarchicalGraph, \"9s6zjkFI7sGGsI16SRKRmv9lgWY=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","labelsData","setHoveredCoordinates","ringVisibility","_s","graphRef","isProportionalView","setIsProportionalView","Object","keys","length","console","error","svg","select","current","selectAll","remove","width","height","margin","maxRadius","Math","min","tooltip","append","attr","style","getLabelColor","pointId","labels","label","pointList","Array","isArray","includes","Number","colorScale","scaleOrdinal","schemeCategory10","domain","getSectorColor","index","sectorIndex","hsl","subspaces","pointsData","map","key","points","dimensions","subspaceId","ringLabels","_","i","String","fromCharCode","pointPositions","drawGraph","g","pointsBySectorByRing","sectors","pointsBySector","fill","forEach","point","pointData","entries","filter","k","bitVector","coord","join","parseInt","totalAngle","PI","sectorAnglesByRing","outerRingIndex","outerSectors","outerPointsBySector","totalPoints","reduce","sum","count","emptySectors","minAngleForEmpty","occupiedAngle","outerAngles","angles","sectorSizeMultiplier","pow","startOuterIndex","endOuterIndex","slice","angle","innerRadius","outerRadius","rotationOffset","sectorAngles","currentAngle","sectorStartAngles","startAngle","sectorAngle","endAngle","push","arc","text","x1","cos","y1","sin","x2","y2","bitVectorIndex","minRadius","randomRadius","random","centerAngle","totalPointsInSector","clusterFactor","overlapRadius","x","y","Point_ID","id","on","event","pointIds","associatedLabels","some","labelText","html","toFixed","pageY","pageX","positions","line","originalColor","circleX","parseFloat","getAttribute","circleY","abs","zoom","transform","call","children","marginBottom","onClick","padding","marginRight","backgroundColor","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["// // // import React, { useEffect, useRef } from \"react\";\n// // // import * as d3 from \"d3\";\n\n// // // const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n// // //   const graphRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     if (\n// // //       !jsonData ||\n// // //       typeof jsonData !== \"object\" ||\n// // //       Object.keys(jsonData).length === 0\n// // //     ) {\n// // //       console.error(\"Invalid or empty jsonData:\", jsonData);\n// // //       return;\n// // //     }\n\n// // //     if (!labelsData || typeof labelsData !== \"object\") {\n// // //       console.error(\"Invalid labelsData:\", labelsData);\n// // //       return;\n// // //     }\n\n// // //     const svg = d3.select(graphRef.current);\n// // //     svg.selectAll(\"*\").remove();\n\n// // //     const width = 800;\n// // //     const height = 800;\n// // //     const margin = 20;\n// // //     const maxRadius = Math.min(width, height) / 2 - margin;\n\n// // //     const g = svg\n// // //       .attr(\"width\", width)\n// // //       .attr(\"height\", height)\n// // //       .append(\"g\")\n// // //       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n// // //     const tooltip = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"tooltip\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n// // //       .style(\"color\", \"white\")\n// // //       .style(\"padding\", \"5px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\");\n\n// // //     const edgePopup = d3\n// // //       .select(\"body\")\n// // //       .append(\"div\")\n// // //       .attr(\"class\", \"edge-popup\")\n// // //       .style(\"position\", \"absolute\")\n// // //       .style(\"visibility\", \"hidden\")\n// // //       .style(\"background-color\", \"rgba(255, 255, 255, 0.9)\")\n// // //       .style(\"color\", \"black\")\n// // //       .style(\"padding\", \"10px\")\n// // //       .style(\"border-radius\", \"4px\")\n// // //       .style(\"font-size\", \"12px\")\n// // //       .style(\"box-shadow\", \"0 2px 4px rgba(0,0,0,0.2)\")\n// // //       .style(\"max-width\", \"300px\");\n\n// // //     const getLabelColor = (pointId) => {\n// // //       if (!labelsData || !labelsData.labels) return \"gray\";\n// // //       for (const label of Object.keys(labelsData.labels)) {\n// // //         const pointList = labelsData.labels[label];\n// // //         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n// // //           return colorScale(label);\n// // //         }\n// // //       }\n// // //       return \"gray\";\n// // //     };\n\n// // //     const colorScale = d3\n// // //       .scaleOrdinal(d3.schemeCategory10)\n// // //       .domain(Object.keys(labelsData.labels || {}));\n\n// // //     const getSectorColor = (index, sectorIndex) => {\n// // //       return d3.hsl(sectorIndex % 2 === 0 ? 0 : 220, 0.9, 0.6);\n// // //     };\n\n\n// // //     const subspaces = Object.keys(jsonData);\n// // //     subspaces.sort((a, b) => a.length - b.length);\n\n// // //     const pointsData = subspaces.map((key) => ({\n// // //       key,\n// // //       points: jsonData[key],\n// // //       dimensions: key.length,\n// // //       subspaceId: key,\n// // //     }));\n// // //     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i)); \n\n// // //     const pointPositions = {};\n// // //     let highlightedElements = null;\n\n// // //     // Function to clear highlights\n// // //     const clearHighlights = () => {\n// // //       if (highlightedElements) {\n// // //         highlightedElements.line.attr(\"stroke-width\", 0.3).attr(\"stroke\", highlightedElements.originalColor);\n// // //         highlightedElements.circles.forEach(circle =>\n// // //           circle.attr(\"r\", 3).attr(\"fill\", \"black\")\n// // //         );\n// // //         highlightedElements = null;\n// // //       }\n// // //     };\n\n// // //     subspaces.forEach((key, index) => {\n// // //       if (!ringVisibility[key]) return;\n\n// // //       const innerRadius = (index / subspaces.length) * maxRadius;\n// // //       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n// // //       const sectors = 2 ** (index + 1);\n// // //       const rotationOffset = Math.PI / 2;\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         const startAngle = (2 * Math.PI * i) / sectors + rotationOffset;\n// // //         const endAngle = (2 * Math.PI * (i + 1)) / sectors + rotationOffset;\n\n// // //         g.append(\"path\")\n// // //           .attr(\"d\", d3.arc()\n// // //             .innerRadius(innerRadius)\n// // //             .outerRadius(outerRadius)\n// // //             .startAngle(startAngle)\n// // //             .endAngle(endAngle)\n// // //           )\n// // //           .attr(\"fill\", getSectorColor(index, i))\n// // //           .attr(\"fill-opacity\", 0.3)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.1)\n// // //           .style(\"cursor\", \"pointer\");\n\n// // //         g.append(\"text\")\n// // //           .attr(\"x\", 0)\n// // //           .attr(\"y\", -outerRadius - 5)\n// // //           .attr(\"text-anchor\", \"middle\")\n// // //           .attr(\"font-size\", \"16px\")\n// // //           .attr(\"fill\", \"red\")\n// // //           .attr(\"font-weight\", \"bold\")\n// // //         // .text(key);\n// // //           .text(ringLabels[index]); // Use generated lab\n// // //       }\n\n// // //       for (let i = 0; i < sectors; i++) {\n// // //         const angle = (2 * Math.PI * i) / sectors;\n// // //         const x1 = outerRadius * Math.cos(angle);\n// // //         const y1 = outerRadius * Math.sin(angle);\n// // //         const x2 = innerRadius * Math.cos(angle);\n// // //         const y2 = innerRadius * Math.sin(angle);\n// // //         g.append(\"line\")\n// // //           .attr(\"x1\", x2)\n// // //           .attr(\"y1\", y2)\n// // //           .attr(\"x2\", x1)\n// // //           .attr(\"y2\", y1)\n// // //           .attr(\"stroke\", \"black\")\n// // //           .attr(\"stroke-width\", 0.25)\n// // //           .style(\"pointer-events\", \"none\");\n// // //       }\n\n// // //       pointsData[index].points.forEach((point, i) => {\n// // //         const pointData = Object.entries(point).filter(\n// // //           ([key]) => key !== \"Point_ID\"\n// // //         );\n// // //         const bitVector = pointData\n// // //           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n// // //           .join(\"\");\n\n// // //         const minRadius = innerRadius;\n// // //         const maxRadius = outerRadius;\n// // //         const randomRadius =\n// // //           minRadius + Math.random() * (maxRadius - minRadius);\n\n// // //         const bitVectorIndex = parseInt(bitVector, 2);\n// // //         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n// // //         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n// // //         const centerAngle = (angleStart + angleEnd) / 2;\n\n// // //         const totalPoints = pointsData[index].points.length;\n// // //         const clusterFactor = 0.86;\n// // //         const overlapRadius =\n// // //           innerRadius +\n// // //           (clusterFactor * (outerRadius - innerRadius) * (i % totalPoints)) /\n// // //           totalPoints;\n\n// // //         const x = overlapRadius * Math.cos(centerAngle);\n// // //         const y = overlapRadius * Math.sin(centerAngle);\n// // //         point.Point_ID.forEach((id) => {\n// // //           if (!pointPositions[id]) {\n// // //             pointPositions[id] = [];\n// // //           }\n// // //           pointPositions[id].push({ x, y, point, subspaceId: key });\n// // //         });\n\n// // //         g.append(\"circle\")\n// // //           .attr(\"cx\", x)\n// // //           .attr(\"cy\", y)\n// // //           .attr(\"r\", 3)\n// // //           .attr(\"fill\", \"black\")\n// // //           .attr(\"stroke\", \"white\")\n// // //           .attr(\"stroke-width\", 0.5)\n// // //           .style(\"pointer-events\", \"visible\")\n// // //           .on(\"mouseover\", (event) => {\n// // //             const pointIds = point.Point_ID.join(\", \");\n// // //             let associatedLabels = [];\n// // //             if (labelsData && labelsData.labels) {\n// // //               Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n// // //                 if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n// // //                   associatedLabels.push(label);\n// // //                 }\n// // //               });\n// // //             }\n// // //             const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n// // //             tooltip\n// // //               .style(\"visibility\", \"visible\")\n// // //               .html(\n// // //                 `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n// // //               );\n// // //             setHoveredCoordinates({ ...point, label: labelText });\n// // //           })\n// // //           .on(\"mousemove\", (event) => {\n// // //             tooltip\n// // //               .style(\"top\", event.pageY + 10 + \"px\")\n// // //               .style(\"left\", event.pageX + 10 + \"px\");\n// // //           })\n// // //           .on(\"mouseout\", () => {\n// // //             tooltip.style(\"visibility\", \"hidden\");\n// // //             setHoveredCoordinates(null);\n// // //           });\n// // //       });\n// // //     });\n\n// // //     Object.entries(pointPositions).forEach(([pointId, positions]) => {\n// // //       if (positions.length > 1) {\n// // //         for (let i = 0; i < positions.length - 1; i++) {\n// // //           const line = g.append(\"line\")\n// // //             .attr(\"x1\", positions[i].x)\n// // //             .attr(\"y1\", positions[i].y)\n// // //             .attr(\"x2\", positions[i + 1].x)\n// // //             .attr(\"y2\", positions[i + 1].y)\n// // //             .attr(\"stroke\", getLabelColor(pointId))\n// // //             .attr(\"stroke-width\", 0.3)\n// // //             .style(\"cursor\", \"pointer\")\n// // //             .on(\"mouseover\", (event) => {\n// // //               tooltip\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`Connection: Point_ID ${pointId}`);\n// // //             })\n// // //             .on(\"mousemove\", (event) => {\n// // //               tooltip\n// // //                 .style(\"top\", event.pageY + 10 + \"px\")\n// // //                 .style(\"left\", event.pageX + 10 + \"px\");\n// // //             })\n// // //             .on(\"mouseout\", () => {\n// // //               tooltip.style(\"visibility\", \"hidden\");\n// // //             })\n// // //             .on(\"click\", (event) => {\n// // //               // Clear previous highlights\n// // //               clearHighlights();\n\n// // //               // Highlight the clicked edge\n// // //               const originalColor = getLabelColor(pointId);\n// // //               line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n// // //               // Highlight connected points\n// // //               const circles = g.selectAll(\"circle\")\n// // //                 .filter(d => {\n// // //                   const circleX = parseFloat(this.getAttribute(\"cx\"));\n// // //                   const circleY = parseFloat(this.getAttribute(\"cy\"));\n// // //                   return (\n// // //                     (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n// // //                     (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n// // //                 )})\n// // //                 .attr(\"r\", 6)\n// // //                 .attr(\"fill\", \"yellow\");\n\n// // //               highlightedElements = { line, circles, originalColor };\n\n// // //               // Show popup\n// // //               const point1 = positions[i].point;\n// // //               const point2 = positions[i + 1].point;\n\n// // //               const coords1 = Object.entries(point1)\n// // //                 .filter(([key]) => key !== \"Point_ID\")\n// // //                 .map(([key, value]) => `${key}: ${value}`)\n// // //                 .join(\", \");\n// // //               const coords2 = Object.entries(point2)\n// // //                 .filter(([key]) => key !== \"Point_ID\")\n// // //                 .map(([key, value]) => `${key}: ${value}`)\n// // //                 .join(\", \");\n\n// // //               const label1 = Object.entries(labelsData?.labels || {})\n// // //                 .find(([_, ids]) => ids.includes(Number(pointId)))?.[0] || \"No Label\";\n\n// // //               edgePopup\n// // //                 .style(\"visibility\", \"visible\")\n// // //                 .html(`\n// // //                   <strong>Connected Points (ID: ${pointId})</strong><br><br>\n// // //                   <strong>Point 1</strong><br>\n// // //                   Subspace: ${positions[i].subspaceId}<br>\n// // //                   Coordinates: ${coords1}<br>\n// // //                   Label: ${label1}<br><br>\n// // //                   <strong>Point 2</strong><br>\n// // //                   Subspace: ${positions[i + 1].subspaceId}<br>\n// // //                   Coordinates: ${coords2}<br>\n// // //                   Label: ${label1}\n// // //                 `)\n// // //                 .style(\"top\", event.pageY + 15 + \"px\")\n// // //                 .style(\"left\", event.pageX + 15 + \"px\");\n\n// // //               d3.select(\"body\").on(\"click.edgePopup\", (e) => {\n// // //                 if (!edgePopup.node().contains(e.target)) {\n// // //                   edgePopup.style(\"visibility\", \"hidden\");\n// // //                   clearHighlights();\n// // //                   d3.select(\"body\").on(\"click.edgePopup\", null);\n// // //                 }\n// // //               });\n// // //             });\n// // //         }\n// // //       }\n// // //     });\n\n// // //     const zoom = d3.zoom().on(\"zoom\", (event) => {\n// // //       g.attr(\"transform\", event.transform);\n// // //     });\n// // //     svg.call(zoom);\n// // //     return () => {\n// // //       tooltip.remove();\n// // //       edgePopup.remove();\n// // //       svg.select(\".zoom-view\").remove();\n// // //     };\n\n    \n// // //   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates]);\n\n// // //   return (\n// // //     <div style={{ width: \"100%\", height: \"100%\" }}>\n// // //       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default HierarchicalGraph;\n\n\n\n\n// // ____________________________________________________________________________________________________________________________________________\n\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n//   const graphRef = useRef(null);\n//   const [isProportionalView, setIsProportionalView] = useState(false);\n\n//   useEffect(() => {\n//     if (\n//       !jsonData ||\n//       typeof jsonData !== \"object\" ||\n//       Object.keys(jsonData).length === 0\n//     ) {\n//       console.error(\"Invalid or empty jsonData:\", jsonData);\n//       return;\n//     }\n//     if (!labelsData || typeof labelsData !== \"object\") {\n//       console.error(\"Invalid labelsData:\", labelsData);\n//       return;\n//     }\n\n//     const svg = d3.select(graphRef.current);\n//     svg.selectAll(\"*\").remove();\n\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     const getLabelColor = (pointId) => {\n//       if (!labelsData || !labelsData.labels) return \"gray\";\n//       for (const label of Object.keys(labelsData.labels)) {\n//         const pointList = labelsData.labels[label];\n//         if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n//           return colorScale(label);\n//         }\n//       }\n//       return \"gray\";\n//     };\n\n//     const colorScale = d3\n//       .scaleOrdinal(d3.schemeCategory10)\n//       .domain(Object.keys(labelsData.labels || {}));\n\n//     const getSectorColor = (index, sectorIndex) => {\n//       return d3.hsl(sectorIndex % 2 === 1 ? 0 : 220, 0.9, 0.6);\n//     };\n\n//     const subspaces = Object.keys(jsonData);\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n//     const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n\n//     const pointPositions = {};\n\n//     const drawGraph = () => {\n//       svg.selectAll(\"*\").remove();\n//       const g = svg\n//         .attr(\"width\", width)\n//         .attr(\"height\", height)\n//         .append(\"g\")\n//         .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    \n//       // Calculate points distribution for all rings\n//       const pointsBySectorByRing = subspaces.map((key, index) => {\n//         const sectors = 2 ** (index + 1);\n//         const pointsBySector = new Array(sectors).fill(0);\n//         pointsData[index].points.forEach((point) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const sectorIndex = parseInt(bitVector, 2);\n//           pointsBySector[sectorIndex]++;\n//         });\n//         return pointsBySector;\n//       });\n\n//       // Calculate sector angles starting from the outermost ring\n//       const sectorAnglesByRing = [];\n//       const totalAngle = 2 * Math.PI;\n\n//       // Outermost ring (proportional to point counts)\n//       const outerRingIndex = subspaces.length - 1;\n//       const outerSectors = 2 ** (outerRingIndex + 1);\n//       const outerPointsBySector = pointsBySectorByRing[outerRingIndex];\n//       const totalPoints = outerPointsBySector.reduce((sum, count) => sum + count, 0);\n//       const emptySectors = outerPointsBySector.filter(count => count === 0).length;\n\n//       let minAngleForEmpty = 0;\n//       const occupiedAngle = Math.min(totalAngle * 0.9, totalAngle);\n//       if (emptySectors > 0 && totalPoints > 0) {\n//         // const occupiedAngle = Math.min(totalAngle * 0.9, totalAngle);\n//         minAngleForEmpty = (totalAngle - occupiedAngle) / emptySectors;\n//       }\n\n//       const outerAngles = outerPointsBySector.map(count => {\n//         if (count === 0) return minAngleForEmpty;\n//         return (count / totalPoints) * (occupiedAngle);\n\n//         // return (count / totalPoints) * (totalAngle - (emptySectors * minAngleForEmpty));\n//       });\n//       sectorAnglesByRing[outerRingIndex] = outerAngles;\n\n//       // Calculate inner ring angles based on outer ring relationships\n//       for (let index = outerRingIndex - 1; index >= 0; index--) {\n//         const sectors = 2 ** (index + 1);\n//         const angles = new Array(sectors).fill(0);\n//         const sectorSizeMultiplier = Math.pow(2, outerRingIndex - index);\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startOuterIndex = i * sectorSizeMultiplier;\n//           const endOuterIndex = (i + 1) * sectorSizeMultiplier;\n//           angles[i] = outerAngles.slice(startOuterIndex, endOuterIndex)\n//             .reduce((sum, angle) => sum + angle, 0);\n//         }\n//         sectorAnglesByRing[index] = angles;\n//       }\n\n//       subspaces.forEach((key, index) => {\n//         if (!ringVisibility[key]) return;\n\n//         const innerRadius = (index / subspaces.length) * maxRadius;\n//         const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//         const sectors = 2 ** (index + 1);\n//         const rotationOffset = Math.PI / 2;\n//         // const rotationOffset = 0;\n//         const sectorAngles = isProportionalView\n//           ? sectorAnglesByRing[index]\n//           : new Array(sectors).fill(totalAngle / sectors);\n\n//         let currentAngle = rotationOffset;\n//         const sectorStartAngles = [currentAngle];\n\n//         for (let i = 0; i < sectors; i++) {\n//           const startAngle = currentAngle;\n//           const endAngle = startAngle + sectorAngles[i];\n//           currentAngle = endAngle;\n//           sectorStartAngles.push(currentAngle);\n\n//           g.append(\"path\")\n//             .attr(\"d\", d3.arc()\n//               .innerRadius(innerRadius)\n//               .outerRadius(outerRadius)\n//               .startAngle(startAngle)\n//               .endAngle(endAngle)\n//               // .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n//               // .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n\n//             )\n//             .attr(\"fill\", getSectorColor(index, i))\n//             .attr(\"fill-opacity\", 0.3)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.1)\n//             .style(\"cursor\", \"pointer\");\n\n//           if (i === 0) {\n//             g.append(\"text\")\n//               .attr(\"x\", 0)\n//               .attr(\"y\", -outerRadius - 5)\n//               .attr(\"text-anchor\", \"middle\")\n//               .attr(\"font-size\", \"16px\")\n//               .attr(\"fill\", \"red\")\n//               .attr(\"font-weight\", \"bold\")\n//               .text(ringLabels[index]);\n//           }\n\n//           const x1 = outerRadius * Math.cos(endAngle);\n//           const y1 = outerRadius * Math.sin(endAngle);\n//           const x2 = innerRadius * Math.cos(endAngle);\n//           const y2 = innerRadius * Math.sin(endAngle);\n//           g.append(\"line\")\n//             .attr(\"x1\", x2)\n//             .attr(\"y1\", y2)\n//             .attr(\"x2\", x1)\n//             .attr(\"y2\", y1)\n//             .attr(\"stroke\", \"black\")\n//             .attr(\"stroke-width\", 0.25)\n//             .style(\"pointer-events\", \"none\");\n//         }\n\n//         pointsData[index].points.forEach((point, i) => {\n//           const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n//           const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n//           const bitVectorIndex = parseInt(bitVector, 2);\n\n//           const minRadius = innerRadius;\n//           const maxRadius = outerRadius;\n//           const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n//           const startAngle = sectorStartAngles[bitVectorIndex];\n//           const endAngle = sectorStartAngles[bitVectorIndex + 1];\n//           const centerAngle = (startAngle + endAngle) / 2;\n\n//           const totalPointsInSector = pointsBySectorByRing[index][bitVectorIndex];\n//           const clusterFactor = 0.86;\n//           const overlapRadius = totalPointsInSector > 0\n//             ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n//             : randomRadius;\n\n//           const x = overlapRadius * Math.cos(centerAngle);\n//           const y = overlapRadius * Math.sin(centerAngle);\n//           point.Point_ID.forEach((id) => {\n//             if (!pointPositions[id]) {\n//               pointPositions[id] = [];\n//             }\n//             pointPositions[id].push({ x, y, point, subspaceId: key });\n//           });\n\n//           g.append(\"circle\")\n//             .attr(\"cx\", x)\n//             .attr(\"cy\", y)\n//             .attr(\"r\", 3)\n//             .attr(\"fill\", \"black\")\n//             .attr(\"stroke\", \"white\")\n//             .attr(\"stroke-width\", 0.5)\n//             .style(\"pointer-events\", \"visible\")\n//             .on(\"mouseover\", (event) => {\n//               const pointIds = point.Point_ID.join(\", \");\n//               let associatedLabels = [];\n//               if (labelsData && labelsData.labels) {\n//                 Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n//                   if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n//                     associatedLabels.push(label);\n//                   }\n//                 });\n//               }\n//               const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(\n//                   `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n//                 );\n//               setHoveredCoordinates({ ...point, label: labelText });\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//               setHoveredCoordinates(null);\n//             });\n//         });\n//       });\n\n//       Object.entries(pointPositions).forEach(([pointId, positions]) => {\n//         if (positions.length > 1) {\n//           for (let i = 0; i < positions.length - 1; i++) {\n//             const line = g.append(\"line\")\n//               .attr(\"x1\", positions[i].x)\n//               .attr(\"y1\", positions[i].y)\n//               .attr(\"x2\", positions[i + 1].x)\n//               .attr(\"y2\", positions[i + 1].y)\n//               .attr(\"stroke\", getLabelColor(pointId))\n//               .attr(\"stroke-width\", 0.3)\n//               .style(\"cursor\", \"pointer\")\n//               .on(\"mouseover\", (event) => {\n//                 tooltip\n//                   .style(\"visibility\", \"visible\")\n//                   .html(`Connection: Point_ID ${pointId}`);\n//               })\n//               .on(\"mousemove\", (event) => {\n//                 tooltip\n//                   .style(\"top\", event.pageY + 10 + \"px\")\n//                   .style(\"left\", event.pageX + 10 + \"px\");\n//               })\n//               .on(\"mouseout\", () => {\n//                 tooltip.style(\"visibility\", \"hidden\");\n//               })\n//               .on(\"click\", (event) => {\n//                 const originalColor = getLabelColor(pointId);\n//                 line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n//                 g.selectAll(\"circle\")\n//                   .filter(function () {\n//                     const circleX = parseFloat(this.getAttribute(\"cx\"));\n//                     const circleY = parseFloat(this.getAttribute(\"cy\"));\n//                     return (\n//                       (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n//                       (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n//                     );\n//                   })\n//                   .attr(\"r\", 6)\n//                   .attr(\"fill\", \"yellow\");\n//               });\n//           }\n//         }\n//       });\n\n//       const zoom = d3.zoom().on(\"zoom\", (event) => {\n//         g.attr(\"transform\", event.transform);\n//       });\n//       svg.call(zoom);\n//     };\n\n//     drawGraph();\n\n//     return () => {\n//       tooltip.remove();\n//       svg.select(\".zoom-view\").remove();\n//     };\n//   }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n//   return (\n//     <div style={{ width: \"100%\", height: \"100%\" }}>\n//       <div style={{ marginBottom: \"10px\" }}>\n//         <button\n//           onClick={() => setIsProportionalView(!isProportionalView)}\n//           style={{\n//             padding: \"5px 10px\",\n//             marginRight: \"10px\",\n//             backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n//             color: isProportionalView ? \"white\" : \"black\",\n//             border: \"1px solid #ccc\",\n//             borderRadius: \"4px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n//         </button>\n//       </div>\n//       <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n//     </div>\n//   );\n// };\n\n// export default HierarchicalGraph;\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, labelsData, setHoveredCoordinates, ringVisibility }) => {\n  const graphRef = useRef(null);\n  const [isProportionalView, setIsProportionalView] = useState(false);\n\n  useEffect(() => {\n    if (!jsonData || typeof jsonData !== \"object\" || Object.keys(jsonData).length === 0) {\n      console.error(\"Invalid or empty jsonData:\", jsonData);\n      return;\n    }\n    if (!labelsData || typeof labelsData !== \"object\") {\n      console.error(\"Invalid labelsData:\", labelsData);\n      return;\n    }\n\n    const svg = d3.select(graphRef.current);\n    svg.selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    const maxRadius = Math.min(width, height) / 2 - margin;\n\n    const tooltip = d3.select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    const getLabelColor = (pointId) => {\n      if (!labelsData || !labelsData.labels) return \"gray\";\n      for (const label of Object.keys(labelsData.labels)) {\n        const pointList = labelsData.labels[label];\n        if (Array.isArray(pointList) && pointList.includes(Number(pointId))) {\n          return colorScale(label);\n        }\n      }\n      return \"gray\";\n    };\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10)\n      .domain(Object.keys(labelsData.labels || {}));\n\n    const getSectorColor = (index, sectorIndex) => {\n      return d3.hsl(sectorIndex % 2 === 1 ? 0 : 220, 0.9, 0.6);\n    };\n\n    const subspaces = Object.keys(jsonData);\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n    const ringLabels = subspaces.map((_, i) => String.fromCharCode(65 + i));\n    const pointPositions = {};\n\n    const drawGraph = () => {\n      svg.selectAll(\"*\").remove();\n      const g = svg\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n      const pointsBySectorByRing = subspaces.map((key, index) => {\n        const sectors = 2 ** (index + 1);\n        const pointsBySector = new Array(sectors).fill(0);\n        pointsData[index].points.forEach((point) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const sectorIndex = parseInt(bitVector, 2);\n          pointsBySector[sectorIndex]++;\n        });\n        return pointsBySector;\n      });\n\n      const totalAngle = 2 * Math.PI;\n      const sectorAnglesByRing = [];\n\n      if (isProportionalView) {\n        const outerRingIndex = subspaces.length - 1;\n        const outerSectors = 2 ** (outerRingIndex + 1);\n        const outerPointsBySector = pointsBySectorByRing[outerRingIndex];\n        const totalPoints = outerPointsBySector.reduce((sum, count) => sum + count, 0);\n        const emptySectors = outerPointsBySector.filter(count => count === 0).length;\n        let minAngleForEmpty = 0;\n        const occupiedAngle = Math.min(totalAngle * 0.9, totalAngle);\n        if (emptySectors > 0 && totalPoints > 0) {\n          minAngleForEmpty = (totalAngle - occupiedAngle) / emptySectors;\n        }\n        const outerAngles = outerPointsBySector.map(count => {\n          if (count === 0) return minAngleForEmpty;\n          return (count / totalPoints) * occupiedAngle;\n        });\n        sectorAnglesByRing[outerRingIndex] = outerAngles;\n\n        for (let index = outerRingIndex - 1; index >= 0; index--) {\n          const sectors = 2 ** (index + 1);\n          const angles = new Array(sectors).fill(0);\n          const sectorSizeMultiplier = Math.pow(2, outerRingIndex - index);\n          for (let i = 0; i < sectors; i++) {\n            const startOuterIndex = i * sectorSizeMultiplier;\n            const endOuterIndex = (i + 1) * sectorSizeMultiplier;\n            angles[i] = outerAngles.slice(startOuterIndex, endOuterIndex)\n              .reduce((sum, angle) => sum + angle, 0);\n          }\n          sectorAnglesByRing[index] = angles;\n        }\n      }\n\n      subspaces.forEach((key, index) => {\n        if (!ringVisibility[key]) return;\n\n        const innerRadius = (index / subspaces.length) * maxRadius;\n        const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n        const sectors = 2 ** (index + 1);\n        const rotationOffset = Math.PI / 2;\n\n        // Use equal angles for normal view, proportional angles for proportional view\n        const sectorAngles = isProportionalView\n          ? sectorAnglesByRing[index]\n          : new Array(sectors).fill(totalAngle / sectors);\n\n        let currentAngle = rotationOffset;\n        const sectorStartAngles = [currentAngle];\n\n        for (let i = 0; i < sectors; i++) {\n          const startAngle = currentAngle;\n          const sectorAngle = sectorAngles[i];\n          const endAngle = startAngle + sectorAngle;\n          currentAngle = endAngle;\n          sectorStartAngles.push(currentAngle);\n\n          g.append(\"path\")\n            .attr(\"d\", d3.arc()\n              .innerRadius(innerRadius)\n              .outerRadius(outerRadius)\n              .startAngle(startAngle)\n              .endAngle(endAngle)\n              .startAngle((2 * Math.PI * i) / sectors + rotationOffset)\n              .endAngle((2 * Math.PI * (i + 1)) / sectors + rotationOffset)\n            )\n            .attr(\"fill\", getSectorColor(index, i))\n            .attr(\"fill-opacity\", 0.3)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.1)\n            .style(\"cursor\", \"pointer\");\n\n          if (i === 0) {\n            g.append(\"text\")\n              .attr(\"x\", 0)\n              .attr(\"y\", -outerRadius - 5)\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"font-size\", \"16px\")\n              .attr(\"fill\", \"red\")\n              .attr(\"font-weight\", \"bold\")\n              .text(ringLabels[index]);\n          }\n\n          const x1 = outerRadius * Math.cos(endAngle);\n          const y1 = outerRadius * Math.sin(endAngle);\n          const x2 = innerRadius * Math.cos(endAngle);\n          const y2 = innerRadius * Math.sin(endAngle);\n          g.append(\"line\")\n            .attr(\"x1\", x2)\n            .attr(\"y1\", y2)\n            .attr(\"x2\", x1)\n            .attr(\"y2\", y1)\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 0.25)\n            .style(\"pointer-events\", \"none\");\n        }\n\n        pointsData[index].points.forEach((point, i) => {\n          const pointData = Object.entries(point).filter(([k]) => k !== \"Point_ID\");\n          const bitVector = pointData.map(([_, coord]) => (coord >= 0 ? 1 : 0)).join(\"\");\n          const bitVectorIndex = parseInt(bitVector, 2);\n\n          const minRadius = innerRadius;\n          const maxRadius = outerRadius;\n          const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n\n          const startAngle = sectorStartAngles[bitVectorIndex];\n          const endAngle = sectorStartAngles[bitVectorIndex + 1];\n          const centerAngle = (startAngle + endAngle) / 2;\n\n          const totalPointsInSector = pointsBySectorByRing[index][bitVectorIndex];\n          const clusterFactor = 0.86;\n          const overlapRadius = totalPointsInSector > 0\n            ? innerRadius + (clusterFactor * (outerRadius - innerRadius) * (i % totalPointsInSector)) / totalPointsInSector\n            : randomRadius;\n\n          const x = overlapRadius * Math.cos(centerAngle);\n          const y = overlapRadius * Math.sin(centerAngle);\n          point.Point_ID.forEach((id) => {\n            if (!pointPositions[id]) {\n              pointPositions[id] = [];\n            }\n            pointPositions[id].push({ x, y, point, subspaceId: key });\n          });\n\n          g.append(\"circle\")\n            .attr(\"cx\", x)\n            .attr(\"cy\", y)\n            .attr(\"r\", 3)\n            .attr(\"fill\", \"black\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .style(\"pointer-events\", \"visible\")\n            .on(\"mouseover\", (event) => {\n              const pointIds = point.Point_ID.join(\", \");\n              let associatedLabels = [];\n              if (labelsData && labelsData.labels) {\n                Object.entries(labelsData.labels).forEach(([label, pointList]) => {\n                  if (point.Point_ID.some(id => pointList.includes(Number(id)))) {\n                    associatedLabels.push(label);\n                  }\n                });\n              }\n              const labelText = associatedLabels.length > 0 ? associatedLabels.join(\", \") : \"No Label\";\n\n              tooltip\n                .style(\"visibility\", \"visible\")\n                .html(\n                  `Point_IDs: ${pointIds}<br>Coordinates: (${x.toFixed(2)}, ${y.toFixed(2)})<br>Subspace: ${key}<br>Label: ${labelText}`\n                );\n              setHoveredCoordinates({ ...point, label: labelText });\n            })\n            .on(\"mousemove\", (event) => {\n              tooltip\n                .style(\"top\", event.pageY + 10 + \"px\")\n                .style(\"left\", event.pageX + 10 + \"px\");\n            })\n            .on(\"mouseout\", () => {\n              tooltip.style(\"visibility\", \"hidden\");\n              setHoveredCoordinates(null);\n            });\n        });\n      });\n\n      Object.entries(pointPositions).forEach(([pointId, positions]) => {\n        if (positions.length > 1) {\n          for (let i = 0; i < positions.length - 1; i++) {\n            const line = g.append(\"line\")\n              .attr(\"x1\", positions[i].x)\n              .attr(\"y1\", positions[i].y)\n              .attr(\"x2\", positions[i + 1].x)\n              .attr(\"y2\", positions[i + 1].y)\n              .attr(\"stroke\", getLabelColor(pointId))\n              .attr(\"stroke-width\", 0.3)\n              .style(\"cursor\", \"pointer\")\n              .on(\"mouseover\", (event) => {\n                tooltip\n                  .style(\"visibility\", \"visible\")\n                  .html(`Connection: Point_ID ${pointId}`);\n              })\n              .on(\"mousemove\", (event) => {\n                tooltip\n                  .style(\"top\", event.pageY + 10 + \"px\")\n                  .style(\"left\", event.pageX + 10 + \"px\");\n              })\n              .on(\"mouseout\", () => {\n                tooltip.style(\"visibility\", \"hidden\");\n              })\n              .on(\"click\", (event) => {\n                const originalColor = getLabelColor(pointId);\n                line.attr(\"stroke-width\", 2).attr(\"stroke\", \"yellow\");\n\n                g.selectAll(\"circle\")\n                  .filter(function () {\n                    const circleX = parseFloat(this.getAttribute(\"cx\"));\n                    const circleY = parseFloat(this.getAttribute(\"cy\"));\n                    return (\n                      (Math.abs(circleX - positions[i].x) < 0.1 && Math.abs(circleY - positions[i].y) < 0.1) ||\n                      (Math.abs(circleX - positions[i + 1].x) < 0.1 && Math.abs(circleY - positions[i + 1].y) < 0.1)\n                    );\n                  })\n                  .attr(\"r\", 6)\n                  .attr(\"fill\", \"yellow\");\n              });\n          }\n        }\n      });\n\n      const zoom = d3.zoom().on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n      svg.call(zoom);\n    };\n\n    drawGraph();\n\n    return () => {\n      tooltip.remove();\n      svg.select(\".zoom-view\").remove();\n    };\n  }, [jsonData, labelsData, ringVisibility, setHoveredCoordinates, isProportionalView]);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <div style={{ marginBottom: \"10px\" }}>\n        <button\n          onClick={() => setIsProportionalView(!isProportionalView)}\n          style={{\n            padding: \"5px 10px\",\n            marginRight: \"10px\",\n            backgroundColor: isProportionalView ? \"#4CAF50\" : \"#f0f0f0\",\n            color: isProportionalView ? \"white\" : \"black\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          }}\n        >\n          {isProportionalView ? \"Normal View\" : \"Proportional View\"}\n        </button>\n      </div>\n      <svg ref={graphRef} style={{ width: \"100%\", height: \"800px\" }}></svg>\n    </div>\n  );\n};\n\nexport default HierarchicalGraph;"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAOA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC,qBAAqB;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACY,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEnEF,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIQ,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAACU,MAAM,KAAK,CAAC,EAAE;MACnFC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}