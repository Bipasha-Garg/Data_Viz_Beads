{"ast":null,"code":"var _jsxFileName = \"/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {}; // Store positions of points by Point_ID\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2)\n//         .style(\"pointer-events\", \"none\");\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const randomAngle =\n//           angleStart + Math.random() * (angleEnd - angleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         if (!pointPositions[point.Point_ID]) {\n//           pointPositions[point.Point_ID] = [];\n//         }\n//         pointPositions[point.Point_ID].push({ x, y, point });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_ID: ${point.Point_ID}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.values(pointPositions).forEach((positions) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${positions[i].point.Point_ID}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HierarchicalGraph = ({\n  jsonData,\n  setHoveredCoordinates\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n    const pointsData = subspaces.map(key => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key\n    }));\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg.attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    const zoom = d3.zoom().scaleExtent([0.5, 5]).on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    const pointPositions = {};\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"rgba(0, 0, 0, 0.7)\").style(\"color\", \"white\").style(\"padding\", \"5px\").style(\"border-radius\", \"4px\").style(\"font-size\", \"12px\");\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = index / subspaces.length * maxRadius;\n      const outerRadius = (index + 1) / subspaces.length * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3.scaleOrdinal().range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n      g.append(\"circle\").attr(\"r\", outerRadius).attr(\"stroke\", \"black\").attr(\"fill\", subspaceColor).attr(\"fill-opacity\", 0.2).attr(\"stroke-width\", 2).style(\"pointer-events\", \"none\");\n      for (let i = 0; i < sectors; i++) {\n        const angle = 2 * Math.PI * i / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", x1).attr(\"y2\", y1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 1).style(\"pointer-events\", \"none\");\n      }\n      subspace.points.forEach(point => {\n        const pointData = Object.entries(point).filter(([key]) => key !== \"Point_ID\");\n        const bitVector = pointData.map(([key, coord]) => coord >= 0 ? 1 : 0).join(\"\");\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius = minRadius + Math.random() * (maxRadius - minRadius);\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = 2 * Math.PI * bitVectorIndex / sectors;\n        const angleEnd = 2 * Math.PI * (bitVectorIndex + 1) / sectors;\n        const randomAngle = angleStart + Math.random() * (angleEnd - angleStart);\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n        if (!pointPositions[point.Point_ID]) {\n          pointPositions[point.Point_ID] = [];\n        }\n        pointPositions[point.Point_ID].push({\n          x,\n          y,\n          point\n        });\n      });\n    });\n    Object.values(pointPositions).forEach(points => {\n      for (let i = 0; i < points.length - 1; i++) {\n        g.append(\"line\").attr(\"x1\", points[i].x).attr(\"y1\", points[i].y).attr(\"x2\", points[i + 1].x).attr(\"y2\", points[i + 1].y).attr(\"stroke\", \"blue\").attr(\"stroke-width\", 0.1).style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`Point_ID: ${points[i].point.Point_ID}`);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      }\n    });\n\n    // Add points tooltips\n    Object.values(pointPositions).forEach(points => {\n      points.forEach(point => {\n        g.append(\"circle\").attr(\"cx\", point.x).attr(\"cy\", point.y).attr(\"r\", 3).attr(\"fill\", \"red\").style(\"pointer-events\", \"visible\").on(\"mouseover\", event => {\n          tooltip.style(\"visibility\", \"visible\").html(`Point_ID: ${point.point.Point_ID}`);\n        }).on(\"mousemove\", event => {\n          tooltip.style(\"top\", event.pageY + 10 + \"px\").style(\"left\", event.pageX + 10 + \"px\");\n        }).on(\"mouseout\", () => {\n          tooltip.style(\"visibility\", \"hidden\");\n        });\n      });\n    });\n  }, [jsonData, setHoveredCoordinates]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: graphRef,\n    style: {\n      width: \"800px\",\n      height: \"800px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 10\n  }, this);\n};\n_s(HierarchicalGraph, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = HierarchicalGraph;\nexport default HierarchicalGraph;\nvar _c;\n$RefreshReg$(_c, \"HierarchicalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","HierarchicalGraph","jsonData","setHoveredCoordinates","_s","graphRef","Object","keys","length","subspaces","sort","a","b","pointsData","map","key","points","dimensions","subspaceId","svg","select","current","width","height","margin","selectAll","remove","maxRadius","Math","min","g","attr","append","zoom","scaleExtent","on","event","transform","call","pointPositions","tooltip","style","forEach","subspace","index","innerRadius","outerRadius","sectors","colorScale","scaleOrdinal","range","subspaceColor","i","angle","PI","x1","cos","y1","sin","point","pointData","entries","filter","bitVector","coord","join","minRadius","randomRadius","random","bitVectorIndex","parseInt","angleStart","angleEnd","randomAngle","x","y","Point_ID","push","values","html","pageY","pageX","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bipasha/Desktop/research/Data_Viz_Beads/Subspace/code/my-react-app/src/JsonDisplay.js"],"sourcesContent":["\n// import React, { useEffect, useRef } from \"react\";\n// import * as d3 from \"d3\";\n\n// const HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n//   const graphRef = useRef(null);\n\n//   useEffect(() => {\n//     if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n//     const subspaces = Object.keys(jsonData);\n//     subspaces.sort((a, b) => a.length - b.length);\n\n//     const pointsData = subspaces.map((key) => ({\n//       key,\n//       points: jsonData[key],\n//       dimensions: key.length,\n//       subspaceId: key,\n//     }));\n\n//     const svg = d3.select(graphRef.current);\n//     const width = 800;\n//     const height = 800;\n//     const margin = 20;\n\n//     svg.selectAll(\"*\").remove();\n//     const maxRadius = Math.min(width, height) / 2 - margin;\n//     const g = svg\n//       .attr(\"width\", width)\n//       .attr(\"height\", height)\n//       .append(\"g\")\n//       .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n//     const pointPositions = {}; // Store positions of points by Point_ID\n\n//     const tooltip = d3\n//       .select(\"body\")\n//       .append(\"div\")\n//       .attr(\"class\", \"tooltip\")\n//       .style(\"position\", \"absolute\")\n//       .style(\"visibility\", \"hidden\")\n//       .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n//       .style(\"color\", \"white\")\n//       .style(\"padding\", \"5px\")\n//       .style(\"border-radius\", \"4px\")\n//       .style(\"font-size\", \"12px\");\n\n//     pointsData.forEach((subspace, index) => {\n//       const innerRadius = (index / subspaces.length) * maxRadius;\n//       const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n//       const sectors = 2 ** (index + 1);\n//       const colorScale = d3\n//         .scaleOrdinal()\n//         .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n//       const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n//       g.append(\"circle\")\n//         .attr(\"r\", outerRadius)\n//         .attr(\"stroke\", \"black\")\n//         .attr(\"fill\", subspaceColor)\n//         .attr(\"fill-opacity\", 0.2)\n//         .attr(\"stroke-width\", 2)\n//         .style(\"pointer-events\", \"none\");\n\n//       for (let i = 0; i < sectors; i++) {\n//         const angle = (2 * Math.PI * i) / sectors;\n//         const x1 = outerRadius * Math.cos(angle);\n//         const y1 = outerRadius * Math.sin(angle);\n//         g.append(\"line\")\n//           .attr(\"x1\", 0)\n//           .attr(\"y1\", 0)\n//           .attr(\"x2\", x1)\n//           .attr(\"y2\", y1)\n//           .attr(\"stroke\", \"black\")\n//           .attr(\"stroke-width\", 1)\n//           .style(\"pointer-events\", \"none\");\n//       }\n\n//       subspace.points.forEach((point) => {\n//         const pointData = Object.entries(point).filter(\n//           ([key]) => key !== \"Point_ID\"\n//         );\n//         const bitVector = pointData\n//           .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n//           .join(\"\");\n\n//         const minRadius = innerRadius;\n//         const maxRadius = outerRadius;\n//         const randomRadius =\n//           minRadius + Math.random() * (maxRadius - minRadius);\n\n//         const bitVectorIndex = parseInt(bitVector, 2);\n//         const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n//         const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n//         const randomAngle =\n//           angleStart + Math.random() * (angleEnd - angleStart);\n\n//         const x = randomRadius * Math.cos(randomAngle);\n//         const y = randomRadius * Math.sin(randomAngle);\n\n//         if (!pointPositions[point.Point_ID]) {\n//           pointPositions[point.Point_ID] = [];\n//         }\n//         pointPositions[point.Point_ID].push({ x, y, point });\n\n//         g.append(\"circle\")\n//           .attr(\"cx\", x)\n//           .attr(\"cy\", y)\n//           .attr(\"r\", 4)\n//           .attr(\"fill\", \"black\")\n//           .attr(\"stroke\", \"white\")\n//           .attr(\"stroke-width\", 0.5)\n//           .style(\"pointer-events\", \"visible\")\n//           .on(\"mouseover\", (event) => {\n//             tooltip\n//               .style(\"visibility\", \"visible\")\n//               .html(\n//                 `Point_ID: ${point.Point_ID}<br>Coordinates: (${x.toFixed(\n//                   2\n//                 )}, ${y.toFixed(2)})`\n//               );\n//             setHoveredCoordinates(point);\n//           })\n//           .on(\"mousemove\", (event) => {\n//             tooltip\n//               .style(\"top\", event.pageY + 10 + \"px\")\n//               .style(\"left\", event.pageX + 10 + \"px\");\n//           })\n//           .on(\"mouseout\", () => {\n//             tooltip.style(\"visibility\", \"hidden\");\n//             setHoveredCoordinates(null);\n//           });\n//       });\n//     });\n\n//     Object.values(pointPositions).forEach((positions) => {\n//       if (positions.length > 1) {\n//         for (let i = 0; i < positions.length - 1; i++) {\n//           g.append(\"line\")\n//             .attr(\"x1\", positions[i].x)\n//             .attr(\"y1\", positions[i].y)\n//             .attr(\"x2\", positions[i + 1].x)\n//             .attr(\"y2\", positions[i + 1].y)\n//             .attr(\"stroke\", \"red\")\n//             .attr(\"stroke-width\", 0.3)\n//             .on(\"mouseover\", (event) => {\n//               tooltip\n//                 .style(\"visibility\", \"visible\")\n//                 .html(`Connection: Point_ID ${positions[i].point.Point_ID}`);\n//             })\n//             .on(\"mousemove\", (event) => {\n//               tooltip\n//                 .style(\"top\", event.pageY + 10 + \"px\")\n//                 .style(\"left\", event.pageX + 10 + \"px\");\n//             })\n//             .on(\"mouseout\", () => {\n//               tooltip.style(\"visibility\", \"hidden\");\n//             });\n//         }\n//       }\n//     });\n//   }, [jsonData, setHoveredCoordinates]);\n\n//   return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n// };\n\n// export default HierarchicalGraph;\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nconst HierarchicalGraph = ({ jsonData, setHoveredCoordinates }) => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    if (!jsonData || Object.keys(jsonData).length === 0) return;\n\n    const subspaces = Object.keys(jsonData);\n    subspaces.sort((a, b) => a.length - b.length);\n\n    const pointsData = subspaces.map((key) => ({\n      key,\n      points: jsonData[key],\n      dimensions: key.length,\n      subspaceId: key,\n    }));\n\n    const svg = d3.select(graphRef.current);\n    const width = 800;\n    const height = 800;\n    const margin = 20;\n\n    svg.selectAll(\"*\").remove();\n    const maxRadius = Math.min(width, height) / 2 - margin;\n    const g = svg\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const zoom = d3\n      .zoom()\n      .scaleExtent([0.5, 5])\n      .on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n\n    svg.call(zoom);\n\n    const pointPositions = {};\n\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n      .style(\"color\", \"white\")\n      .style(\"padding\", \"5px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"font-size\", \"12px\");\n\n    pointsData.forEach((subspace, index) => {\n      const innerRadius = (index / subspaces.length) * maxRadius;\n      const outerRadius = ((index + 1) / subspaces.length) * maxRadius;\n      const sectors = 2 ** (index + 1);\n      const colorScale = d3\n        .scaleOrdinal()\n        .range([\"#FFD700\", \"#FF69B4\", \"#33B5E5\"]);\n      const subspaceColor = colorScale((index + 1) % colorScale.range().length);\n\n      g.append(\"circle\")\n        .attr(\"r\", outerRadius)\n        .attr(\"stroke\", \"black\")\n        .attr(\"fill\", subspaceColor)\n        .attr(\"fill-opacity\", 0.2)\n        .attr(\"stroke-width\", 2)\n        .style(\"pointer-events\", \"none\");\n\n      for (let i = 0; i < sectors; i++) {\n        const angle = (2 * Math.PI * i) / sectors;\n        const x1 = outerRadius * Math.cos(angle);\n        const y1 = outerRadius * Math.sin(angle);\n        g.append(\"line\")\n          .attr(\"x1\", 0)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", x1)\n          .attr(\"y2\", y1)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1)\n          .style(\"pointer-events\", \"none\");\n      }\n\n      subspace.points.forEach((point) => {\n        const pointData = Object.entries(point).filter(\n          ([key]) => key !== \"Point_ID\"\n        );\n        const bitVector = pointData\n          .map(([key, coord]) => (coord >= 0 ? 1 : 0))\n          .join(\"\");\n\n        const minRadius = innerRadius;\n        const maxRadius = outerRadius;\n        const randomRadius =\n          minRadius + Math.random() * (maxRadius - minRadius);\n\n        const bitVectorIndex = parseInt(bitVector, 2);\n        const angleStart = (2 * Math.PI * bitVectorIndex) / sectors;\n        const angleEnd = (2 * Math.PI * (bitVectorIndex + 1)) / sectors;\n        const randomAngle =\n          angleStart + Math.random() * (angleEnd - angleStart);\n\n        const x = randomRadius * Math.cos(randomAngle);\n        const y = randomRadius * Math.sin(randomAngle);\n\n        if (!pointPositions[point.Point_ID]) {\n          pointPositions[point.Point_ID] = [];\n        }\n        pointPositions[point.Point_ID].push({ x, y, point });\n      });\n    });\n\n    Object.values(pointPositions).forEach((points) => {\n      for (let i = 0; i < points.length - 1; i++) {\n        g.append(\"line\")\n          .attr(\"x1\", points[i].x)\n          .attr(\"y1\", points[i].y)\n          .attr(\"x2\", points[i + 1].x)\n          .attr(\"y2\", points[i + 1].y)\n          .attr(\"stroke\", \"blue\")\n          .attr(\"stroke-width\", 0.1)\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(`Point_ID: ${points[i].point.Point_ID}`);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      }\n    });\n\n    // Add points tooltips\n    Object.values(pointPositions).forEach((points) => {\n      points.forEach((point) => {\n        g.append(\"circle\")\n          .attr(\"cx\", point.x)\n          .attr(\"cy\", point.y)\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\")\n          .style(\"pointer-events\", \"visible\")\n          .on(\"mouseover\", (event) => {\n            tooltip\n              .style(\"visibility\", \"visible\")\n              .html(`Point_ID: ${point.point.Point_ID}`);\n          })\n          .on(\"mousemove\", (event) => {\n            tooltip\n              .style(\"top\", event.pageY + 10 + \"px\")\n              .style(\"left\", event.pageX + 10 + \"px\");\n          })\n          .on(\"mouseout\", () => {\n            tooltip.style(\"visibility\", \"hidden\");\n          });\n      });\n    });\n  }, [jsonData, setHoveredCoordinates]);\n\n  return <svg ref={graphRef} style={{ width: \"800px\", height: \"800px\" }}></svg>;\n};\n\nexport default HierarchicalGraph;\n"],"mappings":";;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAsB,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,QAAQ,IAAII,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,CAACM,MAAM,KAAK,CAAC,EAAE;IAErD,MAAMC,SAAS,GAAGH,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC;IACvCO,SAAS,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}